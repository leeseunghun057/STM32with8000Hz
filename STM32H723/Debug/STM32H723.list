
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b98c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800bc5c  0800bc5c  0000cc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be24  0800be24  0000ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000318  24000000  0800be28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fa8  24000318  0800c140  0000d318  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240012c0  0800c140  0000e2c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019456  00000000  00000000  0000d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003693  00000000  00000000  0002679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001188  00000000  00000000  00029e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d55  00000000  00000000  0002afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010726  00000000  00000000  0002bd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000655f  00000000  00000000  0003c433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00042992  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d9c  00000000  00000000  000429d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  00047774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000318 	.word	0x24000318
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bc44 	.word	0x0800bc44

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400031c 	.word	0x2400031c
 800030c:	0800bc44 	.word	0x0800bc44

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0b6      	sub	sp, #216	@ 0xd8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    // 이전 GPIO 상태를 static으로 유지

	uint32_t CurrentTime = HAL_GetTick();
 80006b8:	f001 fade 	bl	8001c78 <HAL_GetTick>
 80006bc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    static uint32_t Last_gpioG_state = 0;
    static uint32_t Last_gpioH_state = 0;
    //static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1001111111010000; //핀 마스킹
 80006c0:	4bab      	ldr	r3, [pc, #684]	@ (8000970 <MatrixScan+0x2c0>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	43da      	mvns	r2, r3
 80006c6:	f649 73d0 	movw	r3, #40912	@ 0x9fd0
 80006ca:	4013      	ands	r3, r2
 80006cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100001111011100;
 80006d0:	4ba8      	ldr	r3, [pc, #672]	@ (8000974 <MatrixScan+0x2c4>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	43da      	mvns	r2, r3
 80006d6:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 80006da:	4013      	ands	r3, r2
 80006dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006e0:	4ba5      	ldr	r3, [pc, #660]	@ (8000978 <MatrixScan+0x2c8>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	43da      	mvns	r2, r3
 80006e6:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006ea:	4013      	ands	r3, r2
 80006ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006f0:	4ba2      	ldr	r3, [pc, #648]	@ (800097c <MatrixScan+0x2cc>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111110111;
 80006fc:	4ba0      	ldr	r3, [pc, #640]	@ (8000980 <MatrixScan+0x2d0>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	43da      	mvns	r2, r3
 8000702:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000706:	4013      	ands	r3, r2
 8000708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 800070c:	4b9d      	ldr	r3, [pc, #628]	@ (8000984 <MatrixScan+0x2d4>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	43db      	mvns	r3, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 8000716:	4b9c      	ldr	r3, [pc, #624]	@ (8000988 <MatrixScan+0x2d8>)
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	43db      	mvns	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b0011111111111100;
 8000720:	4b9a      	ldr	r3, [pc, #616]	@ (800098c <MatrixScan+0x2dc>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	43da      	mvns	r2, r3
 8000726:	f643 73fc 	movw	r3, #16380	@ 0x3ffc
 800072a:	4013      	ands	r3, r2
 800072c:	677b      	str	r3, [r7, #116]	@ 0x74
    //uint32_t gpioI_state = (-(GPIOI->IDR)) & 0b1111111111111111;


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 800072e:	4b98      	ldr	r3, [pc, #608]	@ (8000990 <MatrixScan+0x2e0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000736:	4053      	eors	r3, r2
 8000738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 800073c:	4b95      	ldr	r3, [pc, #596]	@ (8000994 <MatrixScan+0x2e4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000744:	4053      	eors	r3, r2
 8000746:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 800074a:	4b93      	ldr	r3, [pc, #588]	@ (8000998 <MatrixScan+0x2e8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000752:	4053      	eors	r3, r2
 8000754:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 8000758:	4b90      	ldr	r3, [pc, #576]	@ (800099c <MatrixScan+0x2ec>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000760:	4053      	eors	r3, r2
 8000762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 8000766:	4b8e      	ldr	r3, [pc, #568]	@ (80009a0 <MatrixScan+0x2f0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800076e:	4053      	eors	r3, r2
 8000770:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 8000774:	4b8b      	ldr	r3, [pc, #556]	@ (80009a4 <MatrixScan+0x2f4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800077a:	4053      	eors	r3, r2
 800077c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 8000780:	4b89      	ldr	r3, [pc, #548]	@ (80009a8 <MatrixScan+0x2f8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000786:	4053      	eors	r3, r2
 8000788:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
 800078c:	4b87      	ldr	r3, [pc, #540]	@ (80009ac <MatrixScan+0x2fc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000792:	4053      	eors	r3, r2
 8000794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    //uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    result.pinState = -1;
 800079e:	23ff      	movs	r3, #255	@ 0xff
 80007a0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70


    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 80007a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d044      	beq.n	8000836 <MatrixScan+0x186>
    {
        int bitPosition = -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinA )
 80007b4:	e009      	b.n	80007ca <MatrixScan+0x11a>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 80007b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            bitPosition++;
 80007c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007c4:	3301      	adds	r3, #1
 80007c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinA )
 80007ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f1      	bne.n	80007b6 <MatrixScan+0x106>
        }


        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 80007d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 80007d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80007dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007e0:	fa22 f303 	lsr.w	r3, r2, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70


        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 80007f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007f2:	4a6f      	ldr	r2, [pc, #444]	@ (80009b0 <MatrixScan+0x300>)
 80007f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d90a      	bls.n	8000818 <MatrixScan+0x168>
        {
        	Last_gpioA_state = gpioA_state;
 8000802:	4a63      	ldr	r2, [pc, #396]	@ (8000990 <MatrixScan+0x2e0>)
 8000804:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000808:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 800080a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800080c:	4968      	ldr	r1, [pc, #416]	@ (80009b0 <MatrixScan+0x300>)
 800080e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000816:	e005      	b.n	8000824 <MatrixScan+0x174>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 800081e:	23ff      	movs	r3, #255	@ 0xff
 8000820:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	461a      	mov	r2, r3
 8000828:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800082c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000830:	e882 0003 	stmia.w	r2, {r0, r1}
 8000834:	e23d      	b.n	8000cb2 <MatrixScan+0x602>
//        char message[100];
//        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinB != 0 )
 8000836:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d045      	beq.n	80008ca <MatrixScan+0x21a>
    {
        int bitPosition = -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinB )
 8000846:	e009      	b.n	800085c <MatrixScan+0x1ac>
        {
            changedPinB >>= 1;
 8000848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            bitPosition++;
 8000852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000856:	3301      	adds	r3, #1
 8000858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinB )
 800085c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f1      	bne.n	8000848 <MatrixScan+0x198>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 8000864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000868:	3310      	adds	r3, #16
 800086a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioB_state >> bitPosition) & 1;
 800086c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000874:	fa22 f303 	lsr.w	r3, r2, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000886:	4a4a      	ldr	r2, [pc, #296]	@ (80009b0 <MatrixScan+0x300>)
 8000888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2b05      	cmp	r3, #5
 8000894:	d90a      	bls.n	80008ac <MatrixScan+0x1fc>
        {
        	Last_gpioB_state = gpioB_state;
 8000896:	4a3f      	ldr	r2, [pc, #252]	@ (8000994 <MatrixScan+0x2e4>)
 8000898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800089c:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 800089e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008a0:	4943      	ldr	r1, [pc, #268]	@ (80009b0 <MatrixScan+0x300>)
 80008a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008aa:	e005      	b.n	80008b8 <MatrixScan+0x208>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 80008b2:	23ff      	movs	r3, #255	@ 0xff
 80008b4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	461a      	mov	r2, r3
 80008bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80008c8:	e1f3      	b.n	8000cb2 <MatrixScan+0x602>
//        char message[100];
//        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinC != 0 )
 80008ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d045      	beq.n	800095e <MatrixScan+0x2ae>
    {
        int bitPosition = -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinC )
 80008da:	e009      	b.n	80008f0 <MatrixScan+0x240>
        {
            changedPinC >>= 1;
 80008dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            bitPosition++;
 80008e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008ea:	3301      	adds	r3, #1
 80008ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinC )
 80008f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f1      	bne.n	80008dc <MatrixScan+0x22c>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 80008f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80008fc:	3320      	adds	r3, #32
 80008fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioC_state >> bitPosition) & 1;
 8000900:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000908:	fa22 f303 	lsr.w	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800091a:	4a25      	ldr	r2, [pc, #148]	@ (80009b0 <MatrixScan+0x300>)
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2b05      	cmp	r3, #5
 8000928:	d90a      	bls.n	8000940 <MatrixScan+0x290>
        {
        	Last_gpioC_state = gpioC_state;
 800092a:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <MatrixScan+0x2e8>)
 800092c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000930:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000934:	491e      	ldr	r1, [pc, #120]	@ (80009b0 <MatrixScan+0x300>)
 8000936:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800093e:	e005      	b.n	800094c <MatrixScan+0x29c>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000946:	23ff      	movs	r3, #255	@ 0xff
 8000948:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	461a      	mov	r2, r3
 8000950:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000954:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000958:	e882 0003 	stmia.w	r2, {r0, r1}
 800095c:	e1a9      	b.n	8000cb2 <MatrixScan+0x602>
//        char message[100];
//        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

    }
    else if ( changedPinD != 0 )
 800095e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000962:	2b00      	cmp	r3, #0
 8000964:	d07d      	beq.n	8000a62 <MatrixScan+0x3b2>
    {
        int bitPosition = -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinD )
 800096e:	e02b      	b.n	80009c8 <MatrixScan+0x318>
 8000970:	58020000 	.word	0x58020000
 8000974:	58020400 	.word	0x58020400
 8000978:	58020800 	.word	0x58020800
 800097c:	58020c00 	.word	0x58020c00
 8000980:	58021000 	.word	0x58021000
 8000984:	58021400 	.word	0x58021400
 8000988:	58021800 	.word	0x58021800
 800098c:	58021c00 	.word	0x58021c00
 8000990:	24000778 	.word	0x24000778
 8000994:	2400077c 	.word	0x2400077c
 8000998:	24000780 	.word	0x24000780
 800099c:	24000784 	.word	0x24000784
 80009a0:	24000788 	.word	0x24000788
 80009a4:	2400078c 	.word	0x2400078c
 80009a8:	24000790 	.word	0x24000790
 80009ac:	24000794 	.word	0x24000794
 80009b0:	24000578 	.word	0x24000578
        {
            changedPinD >>= 1;
 80009b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            bitPosition++;
 80009be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80009c2:	3301      	adds	r3, #1
 80009c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinD )
 80009c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1f1      	bne.n	80009b4 <MatrixScan+0x304>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 80009d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80009d4:	3330      	adds	r3, #48	@ 0x30
 80009d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioD_state >> bitPosition) & 1;
 80009d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80009dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80009e0:	fa22 f303 	lsr.w	r3, r2, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80009f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009f2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80009f6:	f107 0008 	add.w	r0, r7, #8
 80009fa:	49b0      	ldr	r1, [pc, #704]	@ (8000cbc <MatrixScan+0x60c>)
 80009fc:	f00a fc82 	bl	800b304 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc83 	bl	8000310 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f107 0108 	add.w	r1, r7, #8
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	48aa      	ldr	r0, [pc, #680]	@ (8000cc0 <MatrixScan+0x610>)
 8000a18:	f005 fcd8 	bl	80063cc <HAL_UART_Transmit>

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a1e:	4aa9      	ldr	r2, [pc, #676]	@ (8000cc4 <MatrixScan+0x614>)
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d90a      	bls.n	8000a44 <MatrixScan+0x394>
        {
        	Last_gpioD_state = gpioD_state;
 8000a2e:	4aa6      	ldr	r2, [pc, #664]	@ (8000cc8 <MatrixScan+0x618>)
 8000a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000a34:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a38:	49a2      	ldr	r1, [pc, #648]	@ (8000cc4 <MatrixScan+0x614>)
 8000a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a42:	e005      	b.n	8000a50 <MatrixScan+0x3a0>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000a4a:	23ff      	movs	r3, #255	@ 0xff
 8000a4c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	461a      	mov	r2, r3
 8000a54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a5c:	e882 0003 	stmia.w	r2, {r0, r1}





}
 8000a60:	e127      	b.n	8000cb2 <MatrixScan+0x602>
    else if ( changedPinE != 0 )
 8000a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d045      	beq.n	8000af6 <MatrixScan+0x446>
        int bitPosition = -1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinE )
 8000a72:	e009      	b.n	8000a88 <MatrixScan+0x3d8>
            changedPinE >>= 1;
 8000a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            bitPosition++;
 8000a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a82:	3301      	adds	r3, #1
 8000a84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinE )
 8000a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f1      	bne.n	8000a74 <MatrixScan+0x3c4>
        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000a90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000a94:	3340      	adds	r3, #64	@ 0x40
 8000a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ab2:	4a84      	ldr	r2, [pc, #528]	@ (8000cc4 <MatrixScan+0x614>)
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	d90a      	bls.n	8000ad8 <MatrixScan+0x428>
        	Last_gpioE_state = gpioE_state;
 8000ac2:	4a82      	ldr	r2, [pc, #520]	@ (8000ccc <MatrixScan+0x61c>)
 8000ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ac8:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000acc:	497d      	ldr	r1, [pc, #500]	@ (8000cc4 <MatrixScan+0x614>)
 8000ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ad6:	e005      	b.n	8000ae4 <MatrixScan+0x434>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000ade:	23ff      	movs	r3, #255	@ 0xff
 8000ae0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000aec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000af0:	e882 0003 	stmia.w	r2, {r0, r1}
 8000af4:	e0dd      	b.n	8000cb2 <MatrixScan+0x602>
    else if ( changedPinF != 0 )
 8000af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d043      	beq.n	8000b86 <MatrixScan+0x4d6>
        int bitPosition = -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinF )
 8000b06:	e009      	b.n	8000b1c <MatrixScan+0x46c>
            changedPinF >>= 1;
 8000b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            bitPosition++;
 8000b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b16:	3301      	adds	r3, #1
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinF )
 8000b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f1      	bne.n	8000b08 <MatrixScan+0x458>
        result.pinNumber = bitPosition + 80; // 핀 번호 (포트 E는 64 ~ 79)
 8000b24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b28:	3350      	adds	r3, #80	@ 0x50
 8000b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000b2c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b32:	fa22 f303 	lsr.w	r3, r2, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b44:	4a5f      	ldr	r2, [pc, #380]	@ (8000cc4 <MatrixScan+0x614>)
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d909      	bls.n	8000b68 <MatrixScan+0x4b8>
        	Last_gpioF_state = gpioF_state;
 8000b54:	4a5e      	ldr	r2, [pc, #376]	@ (8000cd0 <MatrixScan+0x620>)
 8000b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b58:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b5c:	4959      	ldr	r1, [pc, #356]	@ (8000cc4 <MatrixScan+0x614>)
 8000b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b66:	e005      	b.n	8000b74 <MatrixScan+0x4c4>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000b6e:	23ff      	movs	r3, #255	@ 0xff
 8000b70:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	461a      	mov	r2, r3
 8000b78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b80:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b84:	e095      	b.n	8000cb2 <MatrixScan+0x602>
    else if ( changedPinG != 0 )
 8000b86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d042      	beq.n	8000c14 <MatrixScan+0x564>
        int bitPosition = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinG )
 8000b94:	e009      	b.n	8000baa <MatrixScan+0x4fa>
        	changedPinG >>= 1;
 8000b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b9a:	085b      	lsrs	r3, r3, #1
 8000b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            bitPosition++;
 8000ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinG )
 8000baa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f1      	bne.n	8000b96 <MatrixScan+0x4e6>
        result.pinNumber = bitPosition + 96; // 핀 번호 (포트 E는 64 ~ 79)
 8000bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000bb6:	3360      	adds	r3, #96	@ 0x60
 8000bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioG_state >> bitPosition) & 1;
 8000bba:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bd2:	4a3c      	ldr	r2, [pc, #240]	@ (8000cc4 <MatrixScan+0x614>)
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b05      	cmp	r3, #5
 8000be0:	d909      	bls.n	8000bf6 <MatrixScan+0x546>
        	Last_gpioG_state = gpioG_state;
 8000be2:	4a3c      	ldr	r2, [pc, #240]	@ (8000cd4 <MatrixScan+0x624>)
 8000be4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000be6:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bea:	4936      	ldr	r1, [pc, #216]	@ (8000cc4 <MatrixScan+0x614>)
 8000bec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bf4:	e005      	b.n	8000c02 <MatrixScan+0x552>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000bfc:	23ff      	movs	r3, #255	@ 0xff
 8000bfe:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	461a      	mov	r2, r3
 8000c06:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c12:	e04e      	b.n	8000cb2 <MatrixScan+0x602>
    else if ( changedPinH != 0 )
 8000c14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d042      	beq.n	8000ca2 <MatrixScan+0x5f2>
        int bitPosition = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ( changedPinH )
 8000c22:	e009      	b.n	8000c38 <MatrixScan+0x588>
        	changedPinH >>= 1;
 8000c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c28:	085b      	lsrs	r3, r3, #1
 8000c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            bitPosition++;
 8000c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c32:	3301      	adds	r3, #1
 8000c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        while ( changedPinH )
 8000c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f1      	bne.n	8000c24 <MatrixScan+0x574>
        result.pinNumber = bitPosition + 112; // 핀 번호 (포트 E는 64 ~ 79)
 8000c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c44:	3370      	adds	r3, #112	@ 0x70
 8000c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioH_state >> bitPosition) & 1;
 8000c48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c60:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <MatrixScan+0x614>)
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d909      	bls.n	8000c84 <MatrixScan+0x5d4>
        	Last_gpioH_state = gpioH_state;
 8000c70:	4a19      	ldr	r2, [pc, #100]	@ (8000cd8 <MatrixScan+0x628>)
 8000c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c74:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c78:	4912      	ldr	r1, [pc, #72]	@ (8000cc4 <MatrixScan+0x614>)
 8000c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c82:	e005      	b.n	8000c90 <MatrixScan+0x5e0>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000c8a:	23ff      	movs	r3, #255	@ 0xff
 8000c8c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	461a      	mov	r2, r3
 8000c94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c9c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000ca0:	e007      	b.n	8000cb2 <MatrixScan+0x602>
    return result;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	37d8      	adds	r7, #216	@ 0xd8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800bc5c 	.word	0x0800bc5c
 8000cc0:	2400033c 	.word	0x2400033c
 8000cc4:	24000578 	.word	0x24000578
 8000cc8:	24000784 	.word	0x24000784
 8000ccc:	24000788 	.word	0x24000788
 8000cd0:	2400078c 	.word	0x2400078c
 8000cd4:	24000790 	.word	0x24000790
 8000cd8:	24000794 	.word	0x24000794

08000cdc <SetKeycode>:




void SetKeycode(int keycode)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e10 <SetKeycode+0x134>)
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d104      	bne.n	8000cf6 <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b47      	ldr	r3, [pc, #284]	@ (8000e10 <SetKeycode+0x134>)
 8000cf2:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000cf4:	e086      	b.n	8000e04 <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 8000cf6:	4b46      	ldr	r3, [pc, #280]	@ (8000e10 <SetKeycode+0x134>)
 8000cf8:	78db      	ldrb	r3, [r3, #3]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10a      	bne.n	8000d14 <SetKeycode+0x38>
 8000cfe:	4b44      	ldr	r3, [pc, #272]	@ (8000e10 <SetKeycode+0x134>)
 8000d00:	789b      	ldrb	r3, [r3, #2]
 8000d02:	461a      	mov	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d004      	beq.n	8000d14 <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b40      	ldr	r3, [pc, #256]	@ (8000e10 <SetKeycode+0x134>)
 8000d10:	70da      	strb	r2, [r3, #3]
 8000d12:	e077      	b.n	8000e04 <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d14:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <SetKeycode+0x134>)
 8000d16:	791b      	ldrb	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d110      	bne.n	8000d3e <SetKeycode+0x62>
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e10 <SetKeycode+0x134>)
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	461a      	mov	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00a      	beq.n	8000d3e <SetKeycode+0x62>
 8000d28:	4b39      	ldr	r3, [pc, #228]	@ (8000e10 <SetKeycode+0x134>)
 8000d2a:	789b      	ldrb	r3, [r3, #2]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d004      	beq.n	8000d3e <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b35      	ldr	r3, [pc, #212]	@ (8000e10 <SetKeycode+0x134>)
 8000d3a:	711a      	strb	r2, [r3, #4]
 8000d3c:	e062      	b.n	8000e04 <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d3e:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <SetKeycode+0x134>)
 8000d40:	795b      	ldrb	r3, [r3, #5]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d116      	bne.n	8000d74 <SetKeycode+0x98>
 8000d46:	4b32      	ldr	r3, [pc, #200]	@ (8000e10 <SetKeycode+0x134>)
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d010      	beq.n	8000d74 <SetKeycode+0x98>
 8000d52:	4b2f      	ldr	r3, [pc, #188]	@ (8000e10 <SetKeycode+0x134>)
 8000d54:	78db      	ldrb	r3, [r3, #3]
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00a      	beq.n	8000d74 <SetKeycode+0x98>
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <SetKeycode+0x134>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d004      	beq.n	8000d74 <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <SetKeycode+0x134>)
 8000d70:	715a      	strb	r2, [r3, #5]
 8000d72:	e047      	b.n	8000e04 <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000d74:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <SetKeycode+0x134>)
 8000d76:	799b      	ldrb	r3, [r3, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d11c      	bne.n	8000db6 <SetKeycode+0xda>
 8000d7c:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <SetKeycode+0x134>)
 8000d7e:	795b      	ldrb	r3, [r3, #5]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d016      	beq.n	8000db6 <SetKeycode+0xda>
 8000d88:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <SetKeycode+0x134>)
 8000d8a:	791b      	ldrb	r3, [r3, #4]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d010      	beq.n	8000db6 <SetKeycode+0xda>
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <SetKeycode+0x134>)
 8000d96:	78db      	ldrb	r3, [r3, #3]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00a      	beq.n	8000db6 <SetKeycode+0xda>
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <SetKeycode+0x134>)
 8000da2:	789b      	ldrb	r3, [r3, #2]
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d004      	beq.n	8000db6 <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <SetKeycode+0x134>)
 8000db2:	719a      	strb	r2, [r3, #6]
 8000db4:	e026      	b.n	8000e04 <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <SetKeycode+0x134>)
 8000db8:	79db      	ldrb	r3, [r3, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d122      	bne.n	8000e04 <SetKeycode+0x128>
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <SetKeycode+0x134>)
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d01c      	beq.n	8000e04 <SetKeycode+0x128>
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <SetKeycode+0x134>)
 8000dcc:	795b      	ldrb	r3, [r3, #5]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d016      	beq.n	8000e04 <SetKeycode+0x128>
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <SetKeycode+0x134>)
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d010      	beq.n	8000e04 <SetKeycode+0x128>
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <SetKeycode+0x134>)
 8000de4:	78db      	ldrb	r3, [r3, #3]
 8000de6:	461a      	mov	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00a      	beq.n	8000e04 <SetKeycode+0x128>
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <SetKeycode+0x134>)
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	461a      	mov	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d004      	beq.n	8000e04 <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <SetKeycode+0x134>)
 8000e00:	71da      	strb	r2, [r3, #7]
}
 8000e02:	e7ff      	b.n	8000e04 <SetKeycode+0x128>
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	24000334 	.word	0x24000334

08000e14 <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <ResetKeycode+0x80>)
 8000e1e:	789b      	ldrb	r3, [r3, #2]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d102      	bne.n	8000e2e <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <ResetKeycode+0x80>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <ResetKeycode+0x80>)
 8000e30:	78db      	ldrb	r3, [r3, #3]
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d102      	bne.n	8000e40 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <ResetKeycode+0x80>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <ResetKeycode+0x80>)
 8000e42:	791b      	ldrb	r3, [r3, #4]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <ResetKeycode+0x80>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <ResetKeycode+0x80>)
 8000e54:	795b      	ldrb	r3, [r3, #5]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d102      	bne.n	8000e64 <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <ResetKeycode+0x80>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <ResetKeycode+0x80>)
 8000e66:	799b      	ldrb	r3, [r3, #6]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d102      	bne.n	8000e76 <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <ResetKeycode+0x80>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <ResetKeycode+0x80>)
 8000e78:	79db      	ldrb	r3, [r3, #7]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d102      	bne.n	8000e88 <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <ResetKeycode+0x80>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	71da      	strb	r2, [r3, #7]
    }
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	24000334 	.word	0x24000334

08000e98 <KeycodeSend>:

void KeycodeSend()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b09a      	sub	sp, #104	@ 0x68
 8000e9c:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <KeycodeSend+0x3c>)
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <KeycodeSend+0x40>)
 8000ea4:	f008 f9be 	bl	8009224 <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend \n\r");
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	490c      	ldr	r1, [pc, #48]	@ (8000edc <KeycodeSend+0x44>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00a fa29 	bl	800b304 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa2b 	bl	8000310 <strlen>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	1d39      	adds	r1, r7, #4
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <KeycodeSend+0x48>)
 8000ec6:	f005 fa81 	bl	80063cc <HAL_UART_Transmit>
}
 8000eca:	bf00      	nop
 8000ecc:	3768      	adds	r7, #104	@ 0x68
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000334 	.word	0x24000334
 8000ed8:	240007a4 	.word	0x240007a4
 8000edc:	0800bc84 	.word	0x0800bc84
 8000ee0:	2400033c 	.word	0x2400033c

08000ee4 <PressKeycodes>:

void PressKeycodes(int i)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09c      	sub	sp, #112	@ 0x70
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000eec:	4b89      	ldr	r3, [pc, #548]	@ (8001114 <PressKeycodes+0x230>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4989      	ldr	r1, [pc, #548]	@ (8001118 <PressKeycodes+0x234>)
 8000ef2:	2264      	movs	r2, #100	@ 0x64
 8000ef4:	fb03 f202 	mul.w	r2, r3, r2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f00:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d925      	bls.n	8000f54 <PressKeycodes+0x70>
	{
		KeyTimer = HAL_GetTick();
 8000f08:	f000 feb6 	bl	8001c78 <HAL_GetTick>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b82      	ldr	r3, [pc, #520]	@ (800111c <PressKeycodes+0x238>)
 8000f12:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000f14:	4b7f      	ldr	r3, [pc, #508]	@ (8001114 <PressKeycodes+0x230>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	497f      	ldr	r1, [pc, #508]	@ (8001118 <PressKeycodes+0x234>)
 8000f1a:	2264      	movs	r2, #100	@ 0x64
 8000f1c:	fb03 f202 	mul.w	r2, r3, r2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	497c      	ldr	r1, [pc, #496]	@ (8001120 <PressKeycodes+0x23c>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00a f9e7 	bl	800b304 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f9e8 	bl	8000310 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	f107 010c 	add.w	r1, r7, #12
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	4875      	ldr	r0, [pc, #468]	@ (8001124 <PressKeycodes+0x240>)
 8000f4e:	f005 fa3d 	bl	80063cc <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000f52:	e0db      	b.n	800110c <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 10000)
 8000f54:	4b6f      	ldr	r3, [pc, #444]	@ (8001114 <PressKeycodes+0x230>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	496f      	ldr	r1, [pc, #444]	@ (8001118 <PressKeycodes+0x234>)
 8000f5a:	2264      	movs	r2, #100	@ 0x64
 8000f5c:	fb03 f202 	mul.w	r2, r3, r2
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f68:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d941      	bls.n	8000ff4 <PressKeycodes+0x110>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 8000f70:	4b68      	ldr	r3, [pc, #416]	@ (8001114 <PressKeycodes+0x230>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4968      	ldr	r1, [pc, #416]	@ (8001118 <PressKeycodes+0x234>)
 8000f76:	2264      	movs	r2, #100	@ 0x64
 8000f78:	fb03 f202 	mul.w	r2, r3, r2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b68      	ldr	r3, [pc, #416]	@ (8001128 <PressKeycodes+0x244>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a68      	ldr	r2, [pc, #416]	@ (800112c <PressKeycodes+0x248>)
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	b25a      	sxtb	r2, r3
 8000f92:	4b67      	ldr	r3, [pc, #412]	@ (8001130 <PressKeycodes+0x24c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b64      	ldr	r3, [pc, #400]	@ (8001130 <PressKeycodes+0x24c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 8000fa2:	4b63      	ldr	r3, [pc, #396]	@ (8001130 <PressKeycodes+0x24c>)
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	4b63      	ldr	r3, [pc, #396]	@ (8001134 <PressKeycodes+0x250>)
 8000fa8:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8000faa:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <PressKeycodes+0x230>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	495a      	ldr	r1, [pc, #360]	@ (8001118 <PressKeycodes+0x234>)
 8000fb0:	2264      	movs	r2, #100	@ 0x64
 8000fb2:	fb03 f202 	mul.w	r2, r3, r2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b59      	ldr	r3, [pc, #356]	@ (8001128 <PressKeycodes+0x244>)
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a59      	ldr	r2, [pc, #356]	@ (800112c <PressKeycodes+0x248>)
 8000fc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	495a      	ldr	r1, [pc, #360]	@ (8001138 <PressKeycodes+0x254>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00a f997 	bl	800b304 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f998 	bl	8000310 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f107 010c 	add.w	r1, r7, #12
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	484d      	ldr	r0, [pc, #308]	@ (8001124 <PressKeycodes+0x240>)
 8000fee:	f005 f9ed 	bl	80063cc <HAL_UART_Transmit>
}
 8000ff2:	e08b      	b.n	800110c <PressKeycodes+0x228>
	else if (Keycode[LayerState][i] >= 5000)
 8000ff4:	4b47      	ldr	r3, [pc, #284]	@ (8001114 <PressKeycodes+0x230>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4947      	ldr	r1, [pc, #284]	@ (8001118 <PressKeycodes+0x234>)
 8000ffa:	2264      	movs	r2, #100	@ 0x64
 8000ffc:	fb03 f202 	mul.w	r2, r3, r2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001008:	f241 3287 	movw	r2, #4999	@ 0x1387
 800100c:	4293      	cmp	r3, r2
 800100e:	d94b      	bls.n	80010a8 <PressKeycodes+0x1c4>
		if ( Keycode[LayerState][i] == KC_FN1)
 8001010:	4b40      	ldr	r3, [pc, #256]	@ (8001114 <PressKeycodes+0x230>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4940      	ldr	r1, [pc, #256]	@ (8001118 <PressKeycodes+0x234>)
 8001016:	2264      	movs	r2, #100	@ 0x64
 8001018:	fb03 f202 	mul.w	r2, r3, r2
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001028:	4293      	cmp	r3, r2
 800102a:	d103      	bne.n	8001034 <PressKeycodes+0x150>
			LayerState = 1; // Layer1 when pressed
 800102c:	4b39      	ldr	r3, [pc, #228]	@ (8001114 <PressKeycodes+0x230>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e022      	b.n	800107a <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD0)
 8001034:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <PressKeycodes+0x230>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4937      	ldr	r1, [pc, #220]	@ (8001118 <PressKeycodes+0x234>)
 800103a:	2264      	movs	r2, #100	@ 0x64
 800103c:	fb03 f202 	mul.w	r2, r3, r2
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001048:	f241 3289 	movw	r2, #5001	@ 0x1389
 800104c:	4293      	cmp	r3, r2
 800104e:	d103      	bne.n	8001058 <PressKeycodes+0x174>
			LayerState = 0;
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <PressKeycodes+0x230>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e010      	b.n	800107a <PressKeycodes+0x196>
		else if ( Keycode[LayerState][i] == KC_TD1)
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <PressKeycodes+0x230>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	492e      	ldr	r1, [pc, #184]	@ (8001118 <PressKeycodes+0x234>)
 800105e:	2264      	movs	r2, #100	@ 0x64
 8001060:	fb03 f202 	mul.w	r2, r3, r2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800106c:	f241 328a 	movw	r2, #5002	@ 0x138a
 8001070:	4293      	cmp	r3, r2
 8001072:	d102      	bne.n	800107a <PressKeycodes+0x196>
			LayerState = 1;
 8001074:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <PressKeycodes+0x230>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <PressKeycodes+0x230>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	492e      	ldr	r1, [pc, #184]	@ (800113c <PressKeycodes+0x258>)
 8001084:	4618      	mov	r0, r3
 8001086:	f00a f93d 	bl	800b304 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f93e 	bl	8000310 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 010c 	add.w	r1, r7, #12
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	4820      	ldr	r0, [pc, #128]	@ (8001124 <PressKeycodes+0x240>)
 80010a2:	f005 f993 	bl	80063cc <HAL_UART_Transmit>
}
 80010a6:	e031      	b.n	800110c <PressKeycodes+0x228>
		SetKeycode(Keycode[LayerState][i]);
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <PressKeycodes+0x230>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	491a      	ldr	r1, [pc, #104]	@ (8001118 <PressKeycodes+0x234>)
 80010ae:	2264      	movs	r2, #100	@ 0x64
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe0d 	bl	8000cdc <SetKeycode>
		WhichLayer[i] = LayerState;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <PressKeycodes+0x230>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	491e      	ldr	r1, [pc, #120]	@ (8001140 <PressKeycodes+0x25c>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <PressKeycodes+0x230>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4911      	ldr	r1, [pc, #68]	@ (8001118 <PressKeycodes+0x234>)
 80010d4:	2264      	movs	r2, #100	@ 0x64
 80010d6:	fb03 f202 	mul.w	r2, r3, r2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010e2:	461a      	mov	r2, r3
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4916      	ldr	r1, [pc, #88]	@ (8001144 <PressKeycodes+0x260>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00a f90a 	bl	800b304 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f90b 	bl	8000310 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f107 010c 	add.w	r1, r7, #12
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <PressKeycodes+0x240>)
 8001108:	f005 f960 	bl	80063cc <HAL_UART_Transmit>
}
 800110c:	bf00      	nop
 800110e:	3770      	adds	r7, #112	@ 0x70
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	240003dc 	.word	0x240003dc
 8001118:	24000000 	.word	0x24000000
 800111c:	24000574 	.word	0x24000574
 8001120:	0800bc94 	.word	0x0800bc94
 8001124:	2400033c 	.word	0x2400033c
 8001128:	ffffd8f0 	.word	0xffffd8f0
 800112c:	24000190 	.word	0x24000190
 8001130:	240003d8 	.word	0x240003d8
 8001134:	24000334 	.word	0x24000334
 8001138:	0800bcac 	.word	0x0800bcac
 800113c:	0800bcc4 	.word	0x0800bcc4
 8001140:	240003e0 	.word	0x240003e0
 8001144:	0800bcdc 	.word	0x0800bcdc

08001148 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b09c      	sub	sp, #112	@ 0x70
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8001150:	4b8c      	ldr	r3, [pc, #560]	@ (8001384 <ReleaseKeycodes+0x23c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	498c      	ldr	r1, [pc, #560]	@ (8001388 <ReleaseKeycodes+0x240>)
 8001156:	2264      	movs	r2, #100	@ 0x64
 8001158:	fb03 f202 	mul.w	r2, r3, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001168:	4293      	cmp	r3, r2
 800116a:	d959      	bls.n	8001220 <ReleaseKeycodes+0xd8>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 800116c:	f000 fd84 	bl	8001c78 <HAL_GetTick>
 8001170:	4603      	mov	r3, r0
 8001172:	4a86      	ldr	r2, [pc, #536]	@ (800138c <ReleaseKeycodes+0x244>)
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	2bfa      	cmp	r3, #250	@ 0xfa
 800117a:	d90e      	bls.n	800119a <ReleaseKeycodes+0x52>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 800117c:	4b81      	ldr	r3, [pc, #516]	@ (8001384 <ReleaseKeycodes+0x23c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4981      	ldr	r1, [pc, #516]	@ (8001388 <ReleaseKeycodes+0x240>)
 8001184:	2264      	movs	r2, #100	@ 0x64
 8001186:	fb03 f202 	mul.w	r2, r3, r2
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001192:	461a      	mov	r2, r3
 8001194:	4b7e      	ldr	r3, [pc, #504]	@ (8001390 <ReleaseKeycodes+0x248>)
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e00e      	b.n	80011b8 <ReleaseKeycodes+0x70>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 800119a:	4b7a      	ldr	r3, [pc, #488]	@ (8001384 <ReleaseKeycodes+0x23c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	497a      	ldr	r1, [pc, #488]	@ (8001388 <ReleaseKeycodes+0x240>)
 80011a0:	2264      	movs	r2, #100	@ 0x64
 80011a2:	fb03 f202 	mul.w	r2, r3, r2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b78      	ldr	r3, [pc, #480]	@ (8001394 <ReleaseKeycodes+0x24c>)
 80011b2:	4413      	add	r3, r2
 80011b4:	4a76      	ldr	r2, [pc, #472]	@ (8001390 <ReleaseKeycodes+0x248>)
 80011b6:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 80011b8:	4b75      	ldr	r3, [pc, #468]	@ (8001390 <ReleaseKeycodes+0x248>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd8d 	bl	8000cdc <SetKeycode>
        KeycodeSend();
 80011c2:	f7ff fe69 	bl	8000e98 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80011c6:	2032      	movs	r0, #50	@ 0x32
 80011c8:	f000 fd62 	bl	8001c90 <HAL_Delay>
        ResetKeycode(TempKeycode);
 80011cc:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <ReleaseKeycodes+0x248>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe1f 	bl	8000e14 <ResetKeycode>
        KeycodeSend();
 80011d6:	f7ff fe5f 	bl	8000e98 <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 80011da:	2032      	movs	r0, #50	@ 0x32
 80011dc:	f000 fd58 	bl	8001c90 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 80011e0:	4b68      	ldr	r3, [pc, #416]	@ (8001384 <ReleaseKeycodes+0x23c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4968      	ldr	r1, [pc, #416]	@ (8001388 <ReleaseKeycodes+0x240>)
 80011e6:	2264      	movs	r2, #100	@ 0x64
 80011e8:	fb03 f202 	mul.w	r2, r3, r2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011f4:	461a      	mov	r2, r3
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4967      	ldr	r1, [pc, #412]	@ (8001398 <ReleaseKeycodes+0x250>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00a f881 	bl	800b304 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f882 	bl	8000310 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 010c 	add.w	r1, r7, #12
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	4860      	ldr	r0, [pc, #384]	@ (800139c <ReleaseKeycodes+0x254>)
 800121a:	f005 f8d7 	bl	80063cc <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 800121e:	e0ac      	b.n	800137a <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 10000)
 8001220:	4b58      	ldr	r3, [pc, #352]	@ (8001384 <ReleaseKeycodes+0x23c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4958      	ldr	r1, [pc, #352]	@ (8001388 <ReleaseKeycodes+0x240>)
 8001226:	2264      	movs	r2, #100	@ 0x64
 8001228:	fb03 f202 	mul.w	r2, r3, r2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001234:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001238:	4293      	cmp	r3, r2
 800123a:	d93e      	bls.n	80012ba <ReleaseKeycodes+0x172>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 800123c:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <ReleaseKeycodes+0x23c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4951      	ldr	r1, [pc, #324]	@ (8001388 <ReleaseKeycodes+0x240>)
 8001242:	2264      	movs	r2, #100	@ 0x64
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <ReleaseKeycodes+0x258>)
 8001254:	4413      	add	r3, r2
 8001256:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <ReleaseKeycodes+0x25c>)
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	b25b      	sxtb	r3, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	b25a      	sxtb	r2, r3
 8001262:	4b51      	ldr	r3, [pc, #324]	@ (80013a8 <ReleaseKeycodes+0x260>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b25b      	sxtb	r3, r3
 8001268:	4013      	ands	r3, r2
 800126a:	b25b      	sxtb	r3, r3
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <ReleaseKeycodes+0x260>)
 8001270:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 8001272:	4b4d      	ldr	r3, [pc, #308]	@ (80013a8 <ReleaseKeycodes+0x260>)
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <ReleaseKeycodes+0x264>)
 8001278:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 800127a:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <ReleaseKeycodes+0x23c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4942      	ldr	r1, [pc, #264]	@ (8001388 <ReleaseKeycodes+0x240>)
 8001280:	2264      	movs	r2, #100	@ 0x64
 8001282:	fb03 f202 	mul.w	r2, r3, r2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128e:	461a      	mov	r2, r3
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4946      	ldr	r1, [pc, #280]	@ (80013b0 <ReleaseKeycodes+0x268>)
 8001296:	4618      	mov	r0, r3
 8001298:	f00a f834 	bl	800b304 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f835 	bl	8000310 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	f107 010c 	add.w	r1, r7, #12
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	483a      	ldr	r0, [pc, #232]	@ (800139c <ReleaseKeycodes+0x254>)
 80012b4:	f005 f88a 	bl	80063cc <HAL_UART_Transmit>
}
 80012b8:	e05f      	b.n	800137a <ReleaseKeycodes+0x232>
    else if (Keycode[LayerState][i] >= 5000 )
 80012ba:	4b32      	ldr	r3, [pc, #200]	@ (8001384 <ReleaseKeycodes+0x23c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4932      	ldr	r1, [pc, #200]	@ (8001388 <ReleaseKeycodes+0x240>)
 80012c0:	2264      	movs	r2, #100	@ 0x64
 80012c2:	fb03 f202 	mul.w	r2, r3, r2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ce:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d927      	bls.n	8001326 <ReleaseKeycodes+0x1de>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 80012d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <ReleaseKeycodes+0x23c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	492b      	ldr	r1, [pc, #172]	@ (8001388 <ReleaseKeycodes+0x240>)
 80012dc:	2264      	movs	r2, #100	@ 0x64
 80012de:	fb03 f202 	mul.w	r2, r3, r2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d143      	bne.n	800137a <ReleaseKeycodes+0x232>
            LayerState = 0; // Layer0 when released
 80012f2:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <ReleaseKeycodes+0x23c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <ReleaseKeycodes+0x23c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	492c      	ldr	r1, [pc, #176]	@ (80013b4 <ReleaseKeycodes+0x26c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f009 fffe 	bl	800b304 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ffff 	bl	8000310 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	f107 010c 	add.w	r1, r7, #12
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	481f      	ldr	r0, [pc, #124]	@ (800139c <ReleaseKeycodes+0x254>)
 8001320:	f005 f854 	bl	80063cc <HAL_UART_Transmit>
}
 8001324:	e029      	b.n	800137a <ReleaseKeycodes+0x232>
        TempKeycode = Keycode[WhichLayer[i]][i];
 8001326:	4a24      	ldr	r2, [pc, #144]	@ (80013b8 <ReleaseKeycodes+0x270>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	4916      	ldr	r1, [pc, #88]	@ (8001388 <ReleaseKeycodes+0x240>)
 8001330:	2264      	movs	r2, #100	@ 0x64
 8001332:	fb03 f202 	mul.w	r2, r3, r2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800133e:	461a      	mov	r2, r3
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <ReleaseKeycodes+0x248>)
 8001342:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <ReleaseKeycodes+0x248>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd63 	bl	8000e14 <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <ReleaseKeycodes+0x248>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4919      	ldr	r1, [pc, #100]	@ (80013bc <ReleaseKeycodes+0x274>)
 8001358:	4618      	mov	r0, r3
 800135a:	f009 ffd3 	bl	800b304 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ffd4 	bl	8000310 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f107 010c 	add.w	r1, r7, #12
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <ReleaseKeycodes+0x254>)
 8001376:	f005 f829 	bl	80063cc <HAL_UART_Transmit>
}
 800137a:	bf00      	nop
 800137c:	3770      	adds	r7, #112	@ 0x70
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	240003dc 	.word	0x240003dc
 8001388:	24000000 	.word	0x24000000
 800138c:	24000574 	.word	0x24000574
 8001390:	24000570 	.word	0x24000570
 8001394:	ffff8ad0 	.word	0xffff8ad0
 8001398:	0800bcf4 	.word	0x0800bcf4
 800139c:	2400033c 	.word	0x2400033c
 80013a0:	ffffd8f0 	.word	0xffffd8f0
 80013a4:	24000190 	.word	0x24000190
 80013a8:	240003d8 	.word	0x240003d8
 80013ac:	24000334 	.word	0x24000334
 80013b0:	0800bd0c 	.word	0x0800bd0c
 80013b4:	0800bcc4 	.word	0x0800bcc4
 80013b8:	240003e0 	.word	0x240003e0
 80013bc:	0800bd24 	.word	0x0800bd24

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09c      	sub	sp, #112	@ 0x70
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80013c6:	f000 f9d9 	bl	800177c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f000 fbcf 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f855 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d2:	f000 f90f 	bl	80015f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80013d6:	f009 fad9 	bl	800a98c <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80013da:	f000 f8bf 	bl	800155c <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 1000)
 80013de:	f000 fc4b 	bl	8001c78 <HAL_GetTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a21      	ldr	r2, [pc, #132]	@ (800146c <main+0xac>)
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ee:	d31d      	bcc.n	800142c <main+0x6c>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate );
 80013f0:	f000 fc42 	bl	8001c78 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <main+0xb0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1d38      	adds	r0, r7, #4
 80013fc:	491d      	ldr	r1, [pc, #116]	@ (8001474 <main+0xb4>)
 80013fe:	f009 ff81 	bl	800b304 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe ff83 	bl	8000310 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	1d39      	adds	r1, r7, #4
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	4818      	ldr	r0, [pc, #96]	@ (8001478 <main+0xb8>)
 8001416:	f004 ffd9 	bl	80063cc <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 800141a:	f000 fc2d 	bl	8001c78 <HAL_GetTick>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <main+0xac>)
 8001424:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <main+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <main+0xb0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <main+0xb0>)
 8001434:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScanResult Matrix = MatrixScan();
 8001436:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f938 	bl	80006b0 <MatrixScan>
//
//        char message[100];
//        sprintf(message, "pinNumber = %d | pinState =  %d \n\r", Matrix.pinNumber, Matrix.pinState);
//        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

        if ( Matrix.pinNumber != -1 )
 8001440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001446:	d0ca      	beq.n	80013de <main+0x1e>
        {




			if ( Matrix.pinState == 1)
 8001448:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <main+0x9e>
			{
				PressKeycodes(Matrix.pinNumber);
 8001450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fd46 	bl	8000ee4 <PressKeycodes>
				KeycodeSend();
 8001458:	f7ff fd1e 	bl	8000e98 <KeycodeSend>
 800145c:	e7bf      	b.n	80013de <main+0x1e>
			}
			else
			{
				ReleaseKeycodes(Matrix.pinNumber);
 800145e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe71 	bl	8001148 <ReleaseKeycodes>
				KeycodeSend();
 8001466:	f7ff fd17 	bl	8000e98 <KeycodeSend>
    {
 800146a:	e7b8      	b.n	80013de <main+0x1e>
 800146c:	240003d4 	.word	0x240003d4
 8001470:	240003d0 	.word	0x240003d0
 8001474:	0800bd3c 	.word	0x0800bd3c
 8001478:	2400033c 	.word	0x2400033c

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09c      	sub	sp, #112	@ 0x70
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001486:	224c      	movs	r2, #76	@ 0x4c
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f009 ff5a 	bl	800b344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2220      	movs	r2, #32
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f009 ff54 	bl	800b344 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800149c:	2002      	movs	r0, #2
 800149e:	f002 f9d3 	bl	8003848 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <SystemClock_Config+0xdc>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001558 <SystemClock_Config+0xdc>)
 80014ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <SystemClock_Config+0xdc>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014be:	bf00      	nop
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <SystemClock_Config+0xdc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014cc:	d1f8      	bne.n	80014c0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014ce:	2321      	movs	r3, #33	@ 0x21
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e0:	2302      	movs	r3, #2
 80014e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80014e4:	2305      	movs	r3, #5
 80014e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80014e8:	236e      	movs	r3, #110	@ 0x6e
 80014ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014f8:	2308      	movs	r3, #8
 80014fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4618      	mov	r0, r3
 800150a:	f002 f9e7 	bl	80038dc <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001514:	f000 f95e 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	233f      	movs	r3, #63	@ 0x3f
 800151a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2303      	movs	r3, #3
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001524:	2308      	movs	r3, #8
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800152c:	2340      	movs	r3, #64	@ 0x40
 800152e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001534:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001536:	2350      	movs	r3, #80	@ 0x50
 8001538:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2103      	movs	r1, #3
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fda6 	bl	8004090 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800154a:	f000 f943 	bl	80017d4 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3770      	adds	r7, #112	@ 0x70
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	58024800 	.word	0x58024800

0800155c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <MX_UART4_Init+0x90>)
 8001562:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <MX_UART4_Init+0x94>)
 8001564:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <MX_UART4_Init+0x90>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <MX_UART4_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <MX_UART4_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <MX_UART4_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_UART4_Init+0x90>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <MX_UART4_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <MX_UART4_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <MX_UART4_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_UART4_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_UART4_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <MX_UART4_Init+0x90>)
 80015a6:	f004 fec1 	bl	800632c <HAL_UART_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015b0:	f000 f910 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	480d      	ldr	r0, [pc, #52]	@ (80015ec <MX_UART4_Init+0x90>)
 80015b8:	f006 f85b 	bl	8007672 <HAL_UARTEx_SetTxFifoThreshold>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015c2:	f000 f907 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <MX_UART4_Init+0x90>)
 80015ca:	f006 f890 	bl	80076ee <HAL_UARTEx_SetRxFifoThreshold>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015d4:	f000 f8fe 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_UART4_Init+0x90>)
 80015da:	f006 f811 	bl	8007600 <HAL_UARTEx_DisableFifoMode>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f000 f8f6 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2400033c 	.word	0x2400033c
 80015f0:	40004c00 	.word	0x40004c00

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	@ 0x30
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160a:	4b56      	ldr	r3, [pc, #344]	@ (8001764 <MX_GPIO_Init+0x170>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001610:	4a54      	ldr	r2, [pc, #336]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161a:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <MX_GPIO_Init+0x170>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <MX_GPIO_Init+0x170>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162e:	4a4d      	ldr	r2, [pc, #308]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <MX_GPIO_Init+0x170>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001646:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164c:	4a45      	ldr	r2, [pc, #276]	@ (8001764 <MX_GPIO_Init+0x170>)
 800164e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001656:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166a:	4a3e      	ldr	r2, [pc, #248]	@ (8001764 <MX_GPIO_Init+0x170>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	4a36      	ldr	r2, [pc, #216]	@ (8001764 <MX_GPIO_Init+0x170>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001692:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <MX_GPIO_Init+0x170>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <MX_GPIO_Init+0x170>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001764 <MX_GPIO_Init+0x170>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <MX_GPIO_Init+0x170>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80016be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	4825      	ldr	r0, [pc, #148]	@ (8001768 <MX_GPIO_Init+0x174>)
 80016d4:	f000 fc88 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80016d8:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80016dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	481f      	ldr	r0, [pc, #124]	@ (800176c <MX_GPIO_Init+0x178>)
 80016ee:	f000 fc7b 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 80016f2:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 80016f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	481a      	ldr	r0, [pc, #104]	@ (8001770 <MX_GPIO_Init+0x17c>)
 8001708:	f000 fc6e 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 800170c:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 8001710:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001716:	2301      	movs	r3, #1
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4814      	ldr	r0, [pc, #80]	@ (8001774 <MX_GPIO_Init+0x180>)
 8001722:	f000 fc61 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001732:	2301      	movs	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_GPIO_Init+0x180>)
 800173e:	f000 fc53 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001742:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001746:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4808      	ldr	r0, [pc, #32]	@ (8001778 <MX_GPIO_Init+0x184>)
 8001758:	f000 fc46 	bl	8001fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175c:	bf00      	nop
 800175e:	3730      	adds	r7, #48	@ 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400
 8001768:	58021000 	.word	0x58021000
 800176c:	58020800 	.word	0x58020800
 8001770:	58020000 	.word	0x58020000
 8001774:	58020400 	.word	0x58020400
 8001778:	58020c00 	.word	0x58020c00

0800177c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001782:	463b      	mov	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800178e:	f000 fbb3 	bl	8001ef8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001796:	2300      	movs	r3, #0
 8001798:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800179e:	231f      	movs	r3, #31
 80017a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80017a2:	2387      	movs	r3, #135	@ 0x87
 80017a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017aa:	2300      	movs	r3, #0
 80017ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017be:	463b      	mov	r3, r7
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fbd1 	bl	8001f68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017c6:	2004      	movs	r0, #4
 80017c8:	f000 fbae 	bl	8001f28 <HAL_MPU_Enable>

}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <Error_Handler+0x8>

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_MspInit+0x30>)
 80017e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017ec:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_MspInit+0x30>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_MspInit+0x30>)
 80017f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	58024400 	.word	0x58024400

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0b8      	sub	sp, #224	@ 0xe0
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	22b8      	movs	r2, #184	@ 0xb8
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f009 fd85 	bl	800b344 <memset>
  if(huart->Instance==UART4)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a26      	ldr	r2, [pc, #152]	@ (80018d8 <HAL_UART_MspInit+0xc4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d145      	bne.n	80018d0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001844:	f04f 0202 	mov.w	r2, #2
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4618      	mov	r0, r3
 800185c:	f002 ffa4 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001866:	f7ff ffb5 	bl	80017d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_UART_MspInit+0xc8>)
 800186c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001870:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <HAL_UART_MspInit+0xc8>)
 8001872:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001876:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <HAL_UART_MspInit+0xc8>)
 800187c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_UART_MspInit+0xc8>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188e:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <HAL_UART_MspInit+0xc8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_UART_MspInit+0xc8>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018be:	2308      	movs	r3, #8
 80018c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <HAL_UART_MspInit+0xcc>)
 80018cc:	f000 fb8c 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80018d0:	bf00      	nop
 80018d2:	37e0      	adds	r7, #224	@ 0xe0
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40004c00 	.word	0x40004c00
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58020000 	.word	0x58020000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <UsageFault_Handler+0x4>

0800190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f000 f989 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <OTG_HS_IRQHandler+0x10>)
 800194a:	f000 fe36 	bl	80025ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	24000c80 	.word	0x24000c80

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	@ (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f009 fce4 	bl	800b354 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	24050000 	.word	0x24050000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	24000798 	.word	0x24000798
 80019c0:	240012c0 	.word	0x240012c0

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <SystemInit+0x100>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ce:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac4 <SystemInit+0x100>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <SystemInit+0x104>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	2b06      	cmp	r3, #6
 80019e2:	d807      	bhi.n	80019f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019e4:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <SystemInit+0x104>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 030f 	bic.w	r3, r3, #15
 80019ec:	4a36      	ldr	r2, [pc, #216]	@ (8001ac8 <SystemInit+0x104>)
 80019ee:	f043 0307 	orr.w	r3, r3, #7
 80019f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019f4:	4b35      	ldr	r3, [pc, #212]	@ (8001acc <SystemInit+0x108>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a34      	ldr	r2, [pc, #208]	@ (8001acc <SystemInit+0x108>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a00:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <SystemInit+0x108>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a06:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <SystemInit+0x108>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4930      	ldr	r1, [pc, #192]	@ (8001acc <SystemInit+0x108>)
 8001a0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <SystemInit+0x10c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <SystemInit+0x104>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <SystemInit+0x104>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 030f 	bic.w	r3, r3, #15
 8001a26:	4a28      	ldr	r2, [pc, #160]	@ (8001ac8 <SystemInit+0x104>)
 8001a28:	f043 0307 	orr.w	r3, r3, #7
 8001a2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a2e:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <SystemInit+0x108>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a34:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <SystemInit+0x108>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <SystemInit+0x108>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a40:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <SystemInit+0x108>)
 8001a42:	4a24      	ldr	r2, [pc, #144]	@ (8001ad4 <SystemInit+0x110>)
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a46:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <SystemInit+0x108>)
 8001a48:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <SystemInit+0x114>)
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <SystemInit+0x108>)
 8001a4e:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <SystemInit+0x118>)
 8001a50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <SystemInit+0x108>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <SystemInit+0x108>)
 8001a5a:	4a20      	ldr	r2, [pc, #128]	@ (8001adc <SystemInit+0x118>)
 8001a5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <SystemInit+0x108>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <SystemInit+0x108>)
 8001a66:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <SystemInit+0x118>)
 8001a68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <SystemInit+0x108>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a70:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <SystemInit+0x108>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	@ (8001acc <SystemInit+0x108>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <SystemInit+0x108>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <SystemInit+0x108>)
 8001a84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d113      	bne.n	8001ab8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001a90:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <SystemInit+0x108>)
 8001a92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a96:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <SystemInit+0x108>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <SystemInit+0x11c>)
 8001aa2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <SystemInit+0x108>)
 8001aaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001aae:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <SystemInit+0x108>)
 8001ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ab4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00
 8001ac8:	52002000 	.word	0x52002000
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ad4:	02020200 	.word	0x02020200
 8001ad8:	01ff0000 	.word	0x01ff0000
 8001adc:	01010280 	.word	0x01010280
 8001ae0:	52004000 	.word	0x52004000

08001ae4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <ExitRun0Mode+0x2c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <ExitRun0Mode+0x2c>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001af4:	bf00      	nop
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <ExitRun0Mode+0x2c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f9      	beq.n	8001af6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	58024800 	.word	0x58024800

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b50 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b18:	f7ff ffe4 	bl	8001ae4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b1c:	f7ff ff52 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	@ (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f009 fc0b 	bl	800b360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff fc39 	bl	80013c0 <main>
  bx  lr
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b58:	24000318 	.word	0x24000318
  ldr r2, =_sidata
 8001b5c:	0800be28 	.word	0x0800be28
  ldr r2, =_sbss
 8001b60:	24000318 	.word	0x24000318
  ldr r4, =_ebss
 8001b64:	240012c0 	.word	0x240012c0

08001b68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC3_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f980 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b78:	f002 fc40 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_Init+0x68>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	4913      	ldr	r1, [pc, #76]	@ (8001bd8 <HAL_Init+0x6c>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_Init+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <HAL_Init+0x6c>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_Init+0x70>)
 8001bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_Init+0x74>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f814 	bl	8001be4 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e002      	b.n	8001bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc6:	f7ff fe0b 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	0800bdac 	.word	0x0800bdac
 8001bdc:	240001b4 	.word	0x240001b4
 8001be0:	240001b0 	.word	0x240001b0

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bec:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_InitTick+0x60>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e021      	b.n	8001c3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_InitTick+0x64>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f965 	bl	8001ede <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f92f 	bl	8001e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	@ (8001c4c <HAL_InitTick+0x68>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	240001bc 	.word	0x240001bc
 8001c48:	240001b0 	.word	0x240001b0
 8001c4c:	240001b8 	.word	0x240001b8

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	240001bc 	.word	0x240001bc
 8001c74:	2400079c 	.word	0x2400079c

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2400079c 	.word	0x2400079c

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	240001bc 	.word	0x240001bc

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x40>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x40>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	05fa0000 	.word	0x05fa0000

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	@ (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	@ (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	@ (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e44:	d301      	bcc.n	8001e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00f      	b.n	8001e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <SysTick_Config+0x40>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e52:	210f      	movs	r1, #15
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f7ff ff8e 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <SysTick_Config+0x40>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e62:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <SysTick_Config+0x40>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff29 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff40 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff33 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa4 	bl	8001e34 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001efc:	f3bf 8f5f 	dmb	sy
}
 8001f00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_MPU_Disable+0x28>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_MPU_Disable+0x28>)
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f0e:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_MPU_Disable+0x2c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	e000ed90 	.word	0xe000ed90

08001f28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f30:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_MPU_Enable+0x38>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_MPU_Enable+0x3c>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_MPU_Enable+0x3c>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f46:	f3bf 8f4f 	dsb	sy
}
 8001f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f4c:	f3bf 8f6f 	isb	sy
}
 8001f50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed90 	.word	0xe000ed90
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	785a      	ldrb	r2, [r3, #1]
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7b1b      	ldrb	r3, [r3, #12]
 8001f90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7adb      	ldrb	r3, [r3, #11]
 8001f96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7a9b      	ldrb	r3, [r3, #10]
 8001f9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7b5b      	ldrb	r3, [r3, #13]
 8001fa6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7b9b      	ldrb	r3, [r3, #14]
 8001fae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7bdb      	ldrb	r3, [r3, #15]
 8001fb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7a5b      	ldrb	r3, [r3, #9]
 8001fbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7a1b      	ldrb	r3, [r3, #8]
 8001fc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fd4:	6113      	str	r3, [r2, #16]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed90 	.word	0xe000ed90

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ff6:	4b86      	ldr	r3, [pc, #536]	@ (8002210 <HAL_GPIO_Init+0x228>)
 8001ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ffa:	e18c      	b.n	8002316 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 817e 	beq.w	8002310 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d005      	beq.n	800202c <HAL_GPIO_Init+0x44>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d130      	bne.n	800208e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002062:	2201      	movs	r2, #1
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0201 	and.w	r2, r3, #1
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b03      	cmp	r3, #3
 8002098:	d017      	beq.n	80020ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d123      	bne.n	800211e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	08da      	lsrs	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3208      	adds	r2, #8
 8002118:	69b9      	ldr	r1, [r7, #24]
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80d8 	beq.w	8002310 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <HAL_GPIO_Init+0x22c>)
 8002162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002166:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <HAL_GPIO_Init+0x22c>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002170:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <HAL_GPIO_Init+0x22c>)
 8002172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217e:	4a26      	ldr	r2, [pc, #152]	@ (8002218 <HAL_GPIO_Init+0x230>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_GPIO_Init+0x234>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d04a      	beq.n	8002240 <HAL_GPIO_Init+0x258>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_GPIO_Init+0x238>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_GPIO_Init+0x23c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x21e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002228 <HAL_GPIO_Init+0x240>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x21a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_GPIO_Init+0x244>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x216>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a18      	ldr	r2, [pc, #96]	@ (8002230 <HAL_GPIO_Init+0x248>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x212>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <HAL_GPIO_Init+0x24c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <HAL_GPIO_Init+0x250>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x20a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a15      	ldr	r2, [pc, #84]	@ (800223c <HAL_GPIO_Init+0x254>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x206>
 80021ea:	2309      	movs	r3, #9
 80021ec:	e029      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 80021ee:	230a      	movs	r3, #10
 80021f0:	e027      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e025      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 80021f6:	2306      	movs	r3, #6
 80021f8:	e023      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 80021fa:	2305      	movs	r3, #5
 80021fc:	e021      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 80021fe:	2304      	movs	r3, #4
 8002200:	e01f      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 8002202:	2303      	movs	r3, #3
 8002204:	e01d      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 8002206:	2302      	movs	r3, #2
 8002208:	e01b      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 800220a:	2301      	movs	r3, #1
 800220c:	e019      	b.n	8002242 <HAL_GPIO_Init+0x25a>
 800220e:	bf00      	nop
 8002210:	58000080 	.word	0x58000080
 8002214:	58024400 	.word	0x58024400
 8002218:	58000400 	.word	0x58000400
 800221c:	58020000 	.word	0x58020000
 8002220:	58020400 	.word	0x58020400
 8002224:	58020800 	.word	0x58020800
 8002228:	58020c00 	.word	0x58020c00
 800222c:	58021000 	.word	0x58021000
 8002230:	58021400 	.word	0x58021400
 8002234:	58021800 	.word	0x58021800
 8002238:	58021c00 	.word	0x58021c00
 800223c:	58022400 	.word	0x58022400
 8002240:	2300      	movs	r3, #0
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002252:	4938      	ldr	r1, [pc, #224]	@ (8002334 <HAL_GPIO_Init+0x34c>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002286:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3301      	adds	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f ae6b 	bne.w	8001ffc <HAL_GPIO_Init+0x14>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3724      	adds	r7, #36	@ 0x24
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	58000400 	.word	0x58000400

08002338 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af02      	add	r7, sp, #8
 800233e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0fe      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f008 fc4c 	bl	800abfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2203      	movs	r2, #3
 8002368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f005 fb6e 	bl	8007a52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7c1a      	ldrb	r2, [r3, #16]
 800237e:	f88d 2000 	strb.w	r2, [sp]
 8002382:	3304      	adds	r3, #4
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	f005 fa3f 	bl	8007808 <USB_CoreInit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0d5      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 fb66 	bl	8007a74 <USB_SetCurrentMode>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0c6      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e04a      	b.n	8002456 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3315      	adds	r3, #21
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3314      	adds	r3, #20
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	b298      	uxth	r0, r3
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	332e      	adds	r3, #46	@ 0x2e
 80023fc:	4602      	mov	r2, r0
 80023fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3318      	adds	r3, #24
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	331c      	adds	r3, #28
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3320      	adds	r3, #32
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3324      	adds	r3, #36	@ 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	3301      	adds	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3af      	bcc.n	80023c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e044      	b.n	80024f0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	3301      	adds	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3b5      	bcc.n	8002466 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7c1a      	ldrb	r2, [r3, #16]
 8002502:	f88d 2000 	strb.w	r2, [sp]
 8002506:	3304      	adds	r3, #4
 8002508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250a:	f005 faff 	bl	8007b0c <USB_DevInit>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e013      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7b1b      	ldrb	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 f956 	bl	80037e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f006 fb42 	bl	8008bca <USB_DevDisconnect>

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_PCD_Start+0x1c>
 8002568:	2302      	movs	r3, #2
 800256a:	e022      	b.n	80025b2 <HAL_PCD_Start+0x62>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f005 fa49 	bl	8007a30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 faf0 	bl	8008b88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b08d      	sub	sp, #52	@ 0x34
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f006 fbae 	bl	8008d32 <USB_GetMode>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 84b9 	bne.w	8002f50 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f006 fb12 	bl	8008c0c <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 84af 	beq.w	8002f4e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f006 faff 	bl	8008c0c <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b02      	cmp	r3, #2
 8002616:	d107      	bne.n	8002628 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f002 0202 	and.w	r2, r2, #2
 8002626:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f006 faed 	bl	8008c0c <USB_ReadInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b10      	cmp	r3, #16
 800263a:	d161      	bne.n	8002700 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0210 	bic.w	r2, r2, #16
 800264a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	0c5b      	lsrs	r3, r3, #17
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	2b02      	cmp	r3, #2
 8002676:	d124      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d035      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800268e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	6a38      	ldr	r0, [r7, #32]
 8002698:	f006 f924 	bl	80088e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a8:	441a      	add	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ba:	441a      	add	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	e016      	b.n	80026f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	0c5b      	lsrs	r3, r3, #17
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d110      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026d4:	2208      	movs	r2, #8
 80026d6:	4619      	mov	r1, r3
 80026d8:	6a38      	ldr	r0, [r7, #32]
 80026da:	f006 f903 	bl	80088e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ea:	441a      	add	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0210 	orr.w	r2, r2, #16
 80026fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f006 fa81 	bl	8008c0c <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002710:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002714:	f040 80a7 	bne.w	8002866 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f006 fa86 	bl	8008c32 <USB_ReadDevAllOutEpInterrupt>
 8002726:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002728:	e099      	b.n	800285e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 808e 	beq.w	8002852 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f006 faaa 	bl	8008c9a <USB_ReadDevOutEPInterrupt>
 8002746:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2301      	movs	r3, #1
 8002762:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 feb8 	bl	80034dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	2308      	movs	r3, #8
 8002786:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 ff8e 	bl	80036ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a6:	461a      	mov	r2, r3
 80027a8:	2310      	movs	r3, #16
 80027aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d030      	beq.n	8002818 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027be:	2b80      	cmp	r3, #128	@ 0x80
 80027c0:	d109      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2200      	movs	r2, #0
 80027f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f008 fb7d 	bl	800af00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	2302      	movs	r3, #2
 8002816:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	2320      	movs	r3, #32
 8002832:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284a:	461a      	mov	r2, r3
 800284c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002850:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	3301      	adds	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800285e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f af62 	bne.w	800272a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f006 f9ce 	bl	8008c0c <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800287a:	f040 80db 	bne.w	8002a34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f006 f9ef 	bl	8008c66 <USB_ReadDevAllInEpInterrupt>
 8002888:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800288e:	e0cd      	b.n	8002a2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80c2 	beq.w	8002a20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f006 fa15 	bl	8008cd6 <USB_ReadDevInEPInterrupt>
 80028ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d057      	beq.n	8002968 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	2201      	movs	r2, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69f9      	ldr	r1, [r7, #28]
 80028d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028d8:	4013      	ands	r3, r2
 80028da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	799b      	ldrb	r3, [r3, #6]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d132      	bne.n	800295c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3320      	adds	r3, #32
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	331c      	adds	r3, #28
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4419      	add	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4403      	add	r3, r0
 800292a:	3320      	adds	r3, #32
 800292c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d113      	bne.n	800295c <HAL_PCD_IRQHandler+0x3a2>
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3324      	adds	r3, #36	@ 0x24
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002954:	461a      	mov	r2, r3
 8002956:	2101      	movs	r1, #1
 8002958:	f006 fa1e 	bl	8008d98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f008 fa47 	bl	800adf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800297e:	461a      	mov	r2, r3
 8002980:	2308      	movs	r3, #8
 8002982:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299a:	461a      	mov	r2, r3
 800299c:	2310      	movs	r3, #16
 800299e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029b6:	461a      	mov	r2, r3
 80029b8:	2340      	movs	r3, #64	@ 0x40
 80029ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d023      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029c8:	6a38      	ldr	r0, [r7, #32]
 80029ca:	f005 f9fd 	bl	8007dc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3310      	adds	r3, #16
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f008 fa94 	bl	800af24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fcd2 	bl	80033c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f af2e 	bne.w	8002890 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f006 f8e7 	bl	8008c0c <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a48:	d122      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d108      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a70:	2100      	movs	r1, #0
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fedc 	bl	8003830 <HAL_PCDEx_LPM_Callback>
 8002a78:	e002      	b.n	8002a80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f008 fa32 	bl	800aee4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f006 f8b9 	bl	8008c0c <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa4:	d112      	bne.n	8002acc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f008 f9ee 	bl	800ae98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f006 f89b 	bl	8008c0c <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae0:	d121      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002af0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b16:	2101      	movs	r1, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fe89 	bl	8003830 <HAL_PCDEx_LPM_Callback>
 8002b1e:	e002      	b.n	8002b26 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f008 f9b9 	bl	800ae98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f006 f86e 	bl	8008c0c <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3a:	f040 80b7 	bne.w	8002cac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2110      	movs	r1, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 f935 	bl	8007dc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b62:	e046      	b.n	8002bf2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b70:	461a      	mov	r2, r3
 8002b72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b88:	0151      	lsls	r1, r2, #5
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002baa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bdc:	0151      	lsls	r1, r2, #5
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	440a      	add	r2, r1
 8002be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002be6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bee:	3301      	adds	r3, #1
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	791b      	ldrb	r3, [r3, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d3b2      	bcc.n	8002b64 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c0c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7bdb      	ldrb	r3, [r3, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2a:	f043 030b 	orr.w	r3, r3, #11
 8002c2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c40:	f043 030b 	orr.w	r3, r3, #11
 8002c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c46:	e015      	b.n	8002c74 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c56:	4619      	mov	r1, r3
 8002c58:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c6e:	f043 030b 	orr.w	r3, r3, #11
 8002c72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c96:	461a      	mov	r2, r3
 8002c98:	f006 f87e 	bl	8008d98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f005 ffab 	bl	8008c0c <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc0:	d123      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f006 f842 	bl	8008d50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f005 f8f2 	bl	8007eba <USB_GetDevSpeed>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681c      	ldr	r4, [r3, #0]
 8002ce2:	f001 fd05 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8002ce6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cec:	461a      	mov	r2, r3
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f004 fdfc 	bl	80078ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f008 f8a6 	bl	800ae46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f005 ff7c 	bl	8008c0c <USB_ReadInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d10a      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f008 f883 	bl	800ae2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f002 0208 	and.w	r2, r2, #8
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 ff67 	bl	8008c0c <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d123      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d58:	e014      	b.n	8002d84 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 faf2 	bl	8003362 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	791b      	ldrb	r3, [r3, #4]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d3e4      	bcc.n	8002d5a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 ff39 	bl	8008c0c <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002da4:	d13c      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da6:	2301      	movs	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002daa:	e02b      	b.n	8002e04 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3318      	adds	r3, #24
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d115      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	da12      	bge.n	8002dfe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3317      	adds	r3, #23
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fab2 	bl	8003362 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	3301      	adds	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d3cd      	bcc.n	8002dac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f005 fef1 	bl	8008c0c <USB_ReadInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e34:	d156      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e045      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d12e      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	da2b      	bge.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	0c1a      	lsrs	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e74:	4053      	eors	r3, r2
 8002e76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d121      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebe:	6053      	str	r3, [r2, #4]
            break;
 8002ec0:	e008      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	791b      	ldrb	r3, [r3, #4]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d3b3      	bcc.n	8002e3c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fe8f 	bl	8008c0c <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef8:	d10a      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f008 f824 	bl	800af48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 fe79 	bl	8008c0c <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d115      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f008 f814 	bl	800af64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e000      	b.n	8002f50 <HAL_PCD_IRQHandler+0x996>
      return;
 8002f4e:	bf00      	nop
    }
  }
}
 8002f50:	3734      	adds	r7, #52	@ 0x34
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}

08002f56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_SetAddress+0x1a>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e012      	b.n	8002f96 <HAL_PCD_SetAddress+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 fdd8 	bl	8008b3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	4611      	mov	r1, r2
 8002faa:	461a      	mov	r2, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	70fb      	strb	r3, [r7, #3]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	803b      	strh	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da0f      	bge.n	8002fe4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
 8002fe2:	e00f      	b.n	8003004 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003010:	883b      	ldrh	r3, [r7, #0]
 8003012:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	78ba      	ldrb	r2, [r7, #2]
 800301e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003032:	78bb      	ldrb	r3, [r7, #2]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d102      	bne.n	800303e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_PCD_EP_Open+0xae>
 8003048:	2302      	movs	r3, #2
 800304a:	e00e      	b.n	800306a <HAL_PCD_EP_Open+0xcc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 ff52 	bl	8007f04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003068:	7afb      	ldrb	r3, [r7, #11]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800307e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da0f      	bge.n	80030a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3310      	adds	r3, #16
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	705a      	strb	r2, [r3, #1]
 80030a4:	e00f      	b.n	80030c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_Close+0x6e>
 80030dc:	2302      	movs	r3, #2
 80030de:	e00e      	b.n	80030fe <HAL_PCD_EP_Close+0x8c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 ff90 	bl	8008014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	460b      	mov	r3, r1
 8003114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	b2da      	uxtb	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	799b      	ldrb	r3, [r3, #6]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d102      	bne.n	8003162 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	799b      	ldrb	r3, [r3, #6]
 800316a:	461a      	mov	r2, r3
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	f005 f82d 	bl	80081cc <USB_EPStartXfer>

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3310      	adds	r3, #16
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	799b      	ldrb	r3, [r3, #6]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	799b      	ldrb	r3, [r3, #6]
 80031de:	461a      	mov	r2, r3
 80031e0:	6979      	ldr	r1, [r7, #20]
 80031e2:	f004 fff3 	bl	80081cc <USB_EPStartXfer>

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	7912      	ldrb	r2, [r2, #4]
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e04f      	b.n	80032ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800320e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da0f      	bge.n	8003236 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	3310      	adds	r3, #16
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	705a      	strb	r2, [r3, #1]
 8003234:	e00d      	b.n	8003252 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	3304      	adds	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_PCD_EP_SetStall+0x82>
 800326e:	2302      	movs	r3, #2
 8003270:	e01d      	b.n	80032ae <HAL_PCD_EP_SetStall+0xbe>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	4618      	mov	r0, r3
 8003282:	f005 fb87 	bl	8008994 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7999      	ldrb	r1, [r3, #6]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800329e:	461a      	mov	r2, r3
 80032a0:	f005 fd7a 	bl	8008d98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	7912      	ldrb	r2, [r2, #4]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e042      	b.n	800335a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0f      	bge.n	80032fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3310      	adds	r3, #16
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	705a      	strb	r2, [r3, #1]
 80032fa:	e00f      	b.n	800331c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 020f 	and.w	r2, r3, #15
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_PCD_EP_ClrStall+0x86>
 8003338:	2302      	movs	r3, #2
 800333a:	e00e      	b.n	800335a <HAL_PCD_EP_ClrStall+0xa4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	4618      	mov	r0, r3
 800334c:	f005 fb90 	bl	8008a70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800336e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003372:	2b00      	cmp	r3, #0
 8003374:	da0c      	bge.n	8003390 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	3310      	adds	r3, #16
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	3304      	adds	r3, #4
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e00c      	b.n	80033aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 020f 	and.w	r2, r3, #15
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 f9af 	bl	8008714 <USB_EPStopXfer>
 80033b6:	4603      	mov	r3, r0
 80033b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033ba:	7afb      	ldrb	r3, [r7, #11]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	3310      	adds	r3, #16
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d901      	bls.n	80033fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e06b      	b.n	80034d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	d902      	bls.n	8003418 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	3303      	adds	r3, #3
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003420:	e02a      	b.n	8003478 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	429a      	cmp	r2, r3
 8003436:	d902      	bls.n	800343e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3303      	adds	r3, #3
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68d9      	ldr	r1, [r3, #12]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4603      	mov	r3, r0
 800345a:	6978      	ldr	r0, [r7, #20]
 800345c:	f005 fa04 	bl	8008868 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	429a      	cmp	r2, r3
 800348c:	d809      	bhi.n	80034a2 <PCD_WriteEmptyTxFifo+0xde>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003496:	429a      	cmp	r2, r3
 8003498:	d203      	bcs.n	80034a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1bf      	bne.n	8003422 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d811      	bhi.n	80034d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2201      	movs	r2, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034ce:	4013      	ands	r3, r2
 80034d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	333c      	adds	r3, #60	@ 0x3c
 80034f4:	3304      	adds	r3, #4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	799b      	ldrb	r3, [r3, #6]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d17b      	bne.n	800360a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4a61      	ldr	r2, [pc, #388]	@ (80036a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f240 80b9 	bls.w	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80b3 	beq.w	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003544:	6093      	str	r3, [r2, #8]
 8003546:	e0a7      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	2320      	movs	r3, #32
 8003562:	6093      	str	r3, [r2, #8]
 8003564:	e098      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 8093 	bne.w	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4a4b      	ldr	r2, [pc, #300]	@ (80036a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d90f      	bls.n	800359a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	e07e      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1a      	ldr	r2, [r3, #32]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d114      	bne.n	80035fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035e4:	461a      	mov	r2, r3
 80035e6:	2101      	movs	r1, #1
 80035e8:	f005 fbd6 	bl	8008d98 <USB_EP0_OutStart>
 80035ec:	e006      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f007 fbdc 	bl	800adc0 <HAL_PCD_DataOutStageCallback>
 8003608:	e046      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4a26      	ldr	r2, [pc, #152]	@ (80036a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d124      	bne.n	800365c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362e:	6093      	str	r3, [r2, #8]
 8003630:	e032      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	2320      	movs	r3, #32
 800364c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f007 fbb3 	bl	800adc0 <HAL_PCD_DataOutStageCallback>
 800365a:	e01d      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d114      	bne.n	800368c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003684:	461a      	mov	r2, r3
 8003686:	2100      	movs	r1, #0
 8003688:	f005 fb86 	bl	8008d98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f007 fb94 	bl	800adc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	4f54300a 	.word	0x4f54300a
 80036a8:	4f54310a 	.word	0x4f54310a

080036ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	333c      	adds	r3, #60	@ 0x3c
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <PCD_EP_OutSetupPacket_int+0x88>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d90e      	bls.n	8003700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f007 fb4b 	bl	800ad9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a0a      	ldr	r2, [pc, #40]	@ (8003734 <PCD_EP_OutSetupPacket_int+0x88>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d90c      	bls.n	8003728 <PCD_EP_OutSetupPacket_int+0x7c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	799b      	ldrb	r3, [r3, #6]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003720:	461a      	mov	r2, r3
 8003722:	2101      	movs	r1, #1
 8003724:	f005 fb38 	bl	8008d98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	4f54300a 	.word	0x4f54300a

08003738 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
 8003744:	4613      	mov	r3, r2
 8003746:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003756:	883b      	ldrh	r3, [r7, #0]
 8003758:	0419      	lsls	r1, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	430a      	orrs	r2, r1
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
 8003764:	e028      	b.n	80037b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e00d      	b.n	8003796 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	3340      	adds	r3, #64	@ 0x40
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	4413      	add	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	3301      	adds	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	3b01      	subs	r3, #1
 800379c:	429a      	cmp	r2, r3
 800379e:	d3ec      	bcc.n	800377a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037a0:	883b      	ldrh	r3, [r7, #0]
 80037a2:	0418      	lsls	r0, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4302      	orrs	r2, r0
 80037b0:	3340      	adds	r3, #64	@ 0x40
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003816:	4b05      	ldr	r3, [pc, #20]	@ (800382c <HAL_PCDEx_ActivateLPM+0x44>)
 8003818:	4313      	orrs	r3, r2
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	10000003 	.word	0x10000003

08003830 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00a      	beq.n	8003872 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800385c:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e01f      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e01d      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003872:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	490f      	ldr	r1, [pc, #60]	@ (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4313      	orrs	r3, r2
 8003880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003882:	f7fe f9f9 	bl	8001c78 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003888:	e009      	b.n	800389e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800388a:	f7fe f9f5 	bl	8001c78 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003898:	d901      	bls.n	800389e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038aa:	d1ee      	bne.n	800388a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	58024800 	.word	0x58024800

080038bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a04      	ldr	r2, [pc, #16]	@ (80038d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ca:	60d3      	str	r3, [r2, #12]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	58024800 	.word	0x58024800

080038dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	@ 0x30
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e3c8      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8087 	beq.w	8003a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fc:	4b88      	ldr	r3, [pc, #544]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003906:	4b86      	ldr	r3, [pc, #536]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	2b10      	cmp	r3, #16
 8003910:	d007      	beq.n	8003922 <HAL_RCC_OscConfig+0x46>
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	2b18      	cmp	r3, #24
 8003916:	d110      	bne.n	800393a <HAL_RCC_OscConfig+0x5e>
 8003918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d10b      	bne.n	800393a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003922:	4b7f      	ldr	r3, [pc, #508]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d06c      	beq.n	8003a08 <HAL_RCC_OscConfig+0x12c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d168      	bne.n	8003a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e3a2      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x76>
 8003944:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a75      	ldr	r2, [pc, #468]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	e02e      	b.n	80039b0 <HAL_RCC_OscConfig+0xd4>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x98>
 800395a:	4b71      	ldr	r3, [pc, #452]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a70      	ldr	r2, [pc, #448]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b6e      	ldr	r3, [pc, #440]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 800396c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xd4>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0xbc>
 800397e:	4b68      	ldr	r3, [pc, #416]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a67      	ldr	r2, [pc, #412]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b65      	ldr	r3, [pc, #404]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a64      	ldr	r2, [pc, #400]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xd4>
 8003998:	4b61      	ldr	r3, [pc, #388]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a60      	ldr	r2, [pc, #384]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe f95e 	bl	8001c78 <HAL_GetTick>
 80039bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe f95a 	bl	8001c78 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	@ 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e356      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039d2:	4b53      	ldr	r3, [pc, #332]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xe4>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe f94a 	bl	8001c78 <HAL_GetTick>
 80039e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe f946 	bl	8001c78 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	@ 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e342      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039fa:	4b49      	ldr	r3, [pc, #292]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x10c>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 808c 	beq.w	8003b30 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a18:	4b41      	ldr	r3, [pc, #260]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a22:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_RCC_OscConfig+0x162>
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2b18      	cmp	r3, #24
 8003a32:	d137      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1c8>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d132      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3e:	4b38      	ldr	r3, [pc, #224]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x17a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e314      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a56:	4b32      	ldr	r3, [pc, #200]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0219 	bic.w	r2, r3, #25
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	492f      	ldr	r1, [pc, #188]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe f906 	bl	8001c78 <HAL_GetTick>
 8003a6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe f902 	bl	8001c78 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e2fe      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a82:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	061b      	lsls	r3, r3, #24
 8003a9c:	4920      	ldr	r1, [pc, #128]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa2:	e045      	b.n	8003b30 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d026      	beq.n	8003afa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aac:	4b1c      	ldr	r3, [pc, #112]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 0219 	bic.w	r2, r3, #25
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4919      	ldr	r1, [pc, #100]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fe f8db 	bl	8001c78 <HAL_GetTick>
 8003ac2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fe f8d7 	bl	8001c78 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e2d3      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad8:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	490b      	ldr	r1, [pc, #44]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
 8003af8:	e01a      	b.n	8003b30 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_RCC_OscConfig+0x244>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fe f8b7 	bl	8001c78 <HAL_GetTick>
 8003b0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fe f8b3 	bl	8001c78 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d903      	bls.n	8003b24 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e2af      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
 8003b20:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b24:	4b96      	ldr	r3, [pc, #600]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d06a      	beq.n	8003c12 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3c:	4b90      	ldr	r3, [pc, #576]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b46:	4b8e      	ldr	r3, [pc, #568]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d007      	beq.n	8003b62 <HAL_RCC_OscConfig+0x286>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b18      	cmp	r3, #24
 8003b56:	d11b      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2b4>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d116      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b62:	4b87      	ldr	r3, [pc, #540]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x29e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e282      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7a:	4b81      	ldr	r3, [pc, #516]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	497d      	ldr	r1, [pc, #500]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b8e:	e040      	b.n	8003c12 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b98:	4b79      	ldr	r3, [pc, #484]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a78      	ldr	r2, [pc, #480]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f868 	bl	8001c78 <HAL_GetTick>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bac:	f7fe f864 	bl	8001c78 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e260      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bbe:	4b70      	ldr	r3, [pc, #448]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bca:	4b6d      	ldr	r3, [pc, #436]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	4969      	ldr	r1, [pc, #420]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
 8003bde:	e018      	b.n	8003c12 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003be0:	4b67      	ldr	r3, [pc, #412]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a66      	ldr	r2, [pc, #408]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe f844 	bl	8001c78 <HAL_GetTick>
 8003bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bf4:	f7fe f840 	bl	8001c78 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e23c      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c06:	4b5e      	ldr	r3, [pc, #376]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d036      	beq.n	8003c8c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d019      	beq.n	8003c5a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c26:	4b56      	ldr	r3, [pc, #344]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c2a:	4a55      	ldr	r2, [pc, #340]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fe f821 	bl	8001c78 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fe f81d 	bl	8001c78 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e219      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x35e>
 8003c58:	e018      	b.n	8003c8c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5a:	4b49      	ldr	r3, [pc, #292]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5e:	4a48      	ldr	r2, [pc, #288]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fe f807 	bl	8001c78 <HAL_GetTick>
 8003c6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fe f803 	bl	8001c78 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1ff      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c80:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d036      	beq.n	8003d06 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d019      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca0:	4b37      	ldr	r3, [pc, #220]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a36      	ldr	r2, [pc, #216]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003ca6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cac:	f7fd ffe4 	bl	8001c78 <HAL_GetTick>
 8003cb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb4:	f7fd ffe0 	bl	8001c78 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1dc      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x3d8>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a29      	ldr	r2, [pc, #164]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003cda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ce0:	f7fd ffca 	bl	8001c78 <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce8:	f7fd ffc6 	bl	8001c78 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1c2      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8086 	beq.w	8003e20 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x4a8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <HAL_RCC_OscConfig+0x4a8>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d20:	f7fd ffaa 	bl	8001c78 <HAL_GetTick>
 8003d24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fd ffa6 	bl	8001c78 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1a2      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3a:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <HAL_RCC_OscConfig+0x4a8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x480>
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	4a0b      	ldr	r2, [pc, #44]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4ac>
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	4a05      	ldr	r2, [pc, #20]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d70:	4b03      	ldr	r3, [pc, #12]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	4a02      	ldr	r2, [pc, #8]	@ (8003d80 <HAL_RCC_OscConfig+0x4a4>)
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7c:	e021      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e6>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	58024800 	.word	0x58024800
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCC_OscConfig+0x4ce>
 8003d90:	4b83      	ldr	r3, [pc, #524]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a82      	ldr	r2, [pc, #520]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	4b80      	ldr	r3, [pc, #512]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4a7f      	ldr	r2, [pc, #508]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4e6>
 8003daa:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	4a79      	ldr	r2, [pc, #484]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d015      	beq.n	8003df6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd ff55 	bl	8001c78 <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fd ff51 	bl	8001c78 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e14b      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de8:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4f6>
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fd ff3f 	bl	8001c78 <HAL_GetTick>
 8003dfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fd ff3b 	bl	8001c78 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e135      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e14:	4b62      	ldr	r3, [pc, #392]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ee      	bne.n	8003dfe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 812a 	beq.w	800407e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e32:	2b18      	cmp	r3, #24
 8003e34:	f000 80ba 	beq.w	8003fac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	f040 8095 	bne.w	8003f6c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b57      	ldr	r3, [pc, #348]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a56      	ldr	r2, [pc, #344]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd ff13 	bl	8001c78 <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd ff0f 	bl	8001c78 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e10b      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e68:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e74:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e78:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa4 <HAL_RCC_OscConfig+0x6c8>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	430a      	orrs	r2, r1
 8003e88:	4945      	ldr	r1, [pc, #276]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	025b      	lsls	r3, r3, #9
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ebe:	4938      	ldr	r1, [pc, #224]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ec4:	4b36      	ldr	r3, [pc, #216]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	4a35      	ldr	r2, [pc, #212]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ed0:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed4:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <HAL_RCC_OscConfig+0x6cc>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003edc:	00d2      	lsls	r2, r2, #3
 8003ede:	4930      	ldr	r1, [pc, #192]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	f023 020c 	bic.w	r2, r3, #12
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	492b      	ldr	r1, [pc, #172]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	f023 0202 	bic.w	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	4927      	ldr	r1, [pc, #156]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	4a24      	ldr	r2, [pc, #144]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f14:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	4a21      	ldr	r2, [pc, #132]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f20:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f38:	4b19      	ldr	r3, [pc, #100]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fe98 	bl	8001c78 <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd fe94 	bl	8001c78 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e090      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x670>
 8003f6a:	e088      	b.n	800407e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fe7e 	bl	8001c78 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd fe7a 	bl	8001c78 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e076      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f92:	4b03      	ldr	r3, [pc, #12]	@ (8003fa0 <HAL_RCC_OscConfig+0x6c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x6a4>
 8003f9e:	e06e      	b.n	800407e <HAL_RCC_OscConfig+0x7a2>
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	fffffc0c 	.word	0xfffffc0c
 8003fa8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fac:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fb2:	4b35      	ldr	r3, [pc, #212]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d031      	beq.n	8004024 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0203 	and.w	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d12a      	bne.n	8004024 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d122      	bne.n	8004024 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d11a      	bne.n	8004024 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	0a5b      	lsrs	r3, r3, #9
 8003ff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d111      	bne.n	8004024 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d108      	bne.n	8004024 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0e1b      	lsrs	r3, r3, #24
 8004016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e02b      	b.n	8004080 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004028:	4b17      	ldr	r3, [pc, #92]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004032:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	429a      	cmp	r2, r3
 800403c:	d01f      	beq.n	800407e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800403e:	4b12      	ldr	r3, [pc, #72]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	4a11      	ldr	r2, [pc, #68]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800404a:	f7fd fe15 	bl	8001c78 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004050:	bf00      	nop
 8004052:	f7fd fe11 	bl	8001c78 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	4293      	cmp	r3, r2
 800405c:	d0f9      	beq.n	8004052 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8004060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004062:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <HAL_RCC_OscConfig+0x7b0>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800406a:	00d2      	lsls	r2, r2, #3
 800406c:	4906      	ldr	r1, [pc, #24]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 800406e:	4313      	orrs	r3, r2
 8004070:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004072:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <HAL_RCC_OscConfig+0x7ac>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3730      	adds	r7, #48	@ 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	58024400 	.word	0x58024400
 800408c:	ffff0007 	.word	0xffff0007

08004090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e19c      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b8a      	ldr	r3, [pc, #552]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d910      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b87      	ldr	r3, [pc, #540]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 020f 	bic.w	r2, r3, #15
 80040ba:	4985      	ldr	r1, [pc, #532]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b83      	ldr	r3, [pc, #524]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e184      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	4b7b      	ldr	r3, [pc, #492]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f0:	4b78      	ldr	r3, [pc, #480]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	4975      	ldr	r1, [pc, #468]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d010      	beq.n	8004130 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	4b70      	ldr	r3, [pc, #448]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800411a:	429a      	cmp	r2, r3
 800411c:	d908      	bls.n	8004130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800411e:	4b6d      	ldr	r3, [pc, #436]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	496a      	ldr	r1, [pc, #424]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800412c:	4313      	orrs	r3, r2
 800412e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	4b64      	ldr	r3, [pc, #400]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004148:	429a      	cmp	r2, r3
 800414a:	d908      	bls.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800414c:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	495e      	ldr	r1, [pc, #376]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800415a:	4313      	orrs	r3, r2
 800415c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d010      	beq.n	800418c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	4b59      	ldr	r3, [pc, #356]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004176:	429a      	cmp	r2, r3
 8004178:	d908      	bls.n	800418c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800417a:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4953      	ldr	r1, [pc, #332]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004188:	4313      	orrs	r3, r2
 800418a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4b4d      	ldr	r3, [pc, #308]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d908      	bls.n	80041ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b4a      	ldr	r3, [pc, #296]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f023 020f 	bic.w	r2, r3, #15
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4947      	ldr	r1, [pc, #284]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d055      	beq.n	8004272 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041c6:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4940      	ldr	r1, [pc, #256]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e0:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d121      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0f6      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d115      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0ea      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004210:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0de      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004220:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d6      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004230:	4b28      	ldr	r3, [pc, #160]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f023 0207 	bic.w	r2, r3, #7
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4925      	ldr	r1, [pc, #148]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fd fd19 	bl	8001c78 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	e00a      	b.n	8004260 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424a:	f7fd fd15 	bl	8001c78 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0be      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004260:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	429a      	cmp	r2, r3
 8004270:	d1eb      	bne.n	800424a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	429a      	cmp	r2, r3
 800428c:	d208      	bcs.n	80042a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428e:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	490e      	ldr	r1, [pc, #56]	@ (80042d4 <HAL_RCC_ClockConfig+0x244>)
 800429c:	4313      	orrs	r3, r2
 800429e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d214      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 020f 	bic.w	r2, r3, #15
 80042b6:	4906      	ldr	r1, [pc, #24]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <HAL_RCC_ClockConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e086      	b.n	80043de <HAL_RCC_ClockConfig+0x34e>
 80042d0:	52002000 	.word	0x52002000
 80042d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d208      	bcs.n	8004306 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f4:	4b3c      	ldr	r3, [pc, #240]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4939      	ldr	r1, [pc, #228]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004302:	4313      	orrs	r3, r2
 8004304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	4b34      	ldr	r3, [pc, #208]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800431e:	429a      	cmp	r2, r3
 8004320:	d208      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004322:	4b31      	ldr	r3, [pc, #196]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	492e      	ldr	r1, [pc, #184]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004330:	4313      	orrs	r3, r2
 8004332:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	4b28      	ldr	r3, [pc, #160]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800434c:	429a      	cmp	r2, r3
 800434e:	d208      	bcs.n	8004362 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004350:	4b25      	ldr	r3, [pc, #148]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4922      	ldr	r1, [pc, #136]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 800435e:	4313      	orrs	r3, r2
 8004360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800437a:	429a      	cmp	r2, r3
 800437c:	d208      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800437e:	4b1a      	ldr	r3, [pc, #104]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4917      	ldr	r1, [pc, #92]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 800438c:	4313      	orrs	r3, r2
 800438e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004390:	f000 f834 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	4912      	ldr	r1, [pc, #72]	@ (80043ec <HAL_RCC_ClockConfig+0x35c>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ae:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <HAL_RCC_ClockConfig+0x358>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <HAL_RCC_ClockConfig+0x35c>)
 80043b8:	5cd3      	ldrb	r3, [r2, r3]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <HAL_RCC_ClockConfig+0x360>)
 80043c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043c8:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <HAL_RCC_ClockConfig+0x364>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043ce:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <HAL_RCC_ClockConfig+0x368>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fc06 	bl	8001be4 <HAL_InitTick>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	58024400 	.word	0x58024400
 80043ec:	0800bdac 	.word	0x0800bdac
 80043f0:	240001b4 	.word	0x240001b4
 80043f4:	240001b0 	.word	0x240001b0
 80043f8:	240001b8 	.word	0x240001b8

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	@ 0x24
 8004400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004402:	4bb3      	ldr	r3, [pc, #716]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800440a:	2b18      	cmp	r3, #24
 800440c:	f200 8155 	bhi.w	80046ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004410:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800447d 	.word	0x0800447d
 800441c:	080046bb 	.word	0x080046bb
 8004420:	080046bb 	.word	0x080046bb
 8004424:	080046bb 	.word	0x080046bb
 8004428:	080046bb 	.word	0x080046bb
 800442c:	080046bb 	.word	0x080046bb
 8004430:	080046bb 	.word	0x080046bb
 8004434:	080046bb 	.word	0x080046bb
 8004438:	080044a3 	.word	0x080044a3
 800443c:	080046bb 	.word	0x080046bb
 8004440:	080046bb 	.word	0x080046bb
 8004444:	080046bb 	.word	0x080046bb
 8004448:	080046bb 	.word	0x080046bb
 800444c:	080046bb 	.word	0x080046bb
 8004450:	080046bb 	.word	0x080046bb
 8004454:	080046bb 	.word	0x080046bb
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080046bb 	.word	0x080046bb
 8004460:	080046bb 	.word	0x080046bb
 8004464:	080046bb 	.word	0x080046bb
 8004468:	080046bb 	.word	0x080046bb
 800446c:	080046bb 	.word	0x080046bb
 8004470:	080046bb 	.word	0x080046bb
 8004474:	080046bb 	.word	0x080046bb
 8004478:	080044af 	.word	0x080044af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800447c:	4b94      	ldr	r3, [pc, #592]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004488:	4b91      	ldr	r3, [pc, #580]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	08db      	lsrs	r3, r3, #3
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	4a90      	ldr	r2, [pc, #576]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800449a:	e111      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800449c:	4b8d      	ldr	r3, [pc, #564]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800449e:	61bb      	str	r3, [r7, #24]
      break;
 80044a0:	e10e      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044a2:	4b8d      	ldr	r3, [pc, #564]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a4:	61bb      	str	r3, [r7, #24]
      break;
 80044a6:	e10b      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044a8:	4b8c      	ldr	r3, [pc, #560]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044aa:	61bb      	str	r3, [r7, #24]
      break;
 80044ac:	e108      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ae:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044b8:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044c4:	4b82      	ldr	r3, [pc, #520]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044ce:	4b80      	ldr	r3, [pc, #512]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80e1 	beq.w	80046b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	f000 8083 	beq.w	8004600 <HAL_RCC_GetSysClockFreq+0x204>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f200 80a1 	bhi.w	8004644 <HAL_RCC_GetSysClockFreq+0x248>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x114>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d056      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800450e:	e099      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004510:	4b6f      	ldr	r3, [pc, #444]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02d      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800451c:	4b6c      	ldr	r3, [pc, #432]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	4a6b      	ldr	r2, [pc, #428]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b62      	ldr	r3, [pc, #392]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a02 	vldr	s12, [r7, #8]
 800455a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004576:	e087      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b51      	ldr	r3, [pc, #324]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a02 	vldr	s12, [r7, #8]
 800459e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ba:	e065      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045fe:	e043      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004642:	e021      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b1e      	ldr	r3, [pc, #120]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004686:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004688:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	0a5b      	lsrs	r3, r3, #9
 800468e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004692:	3301      	adds	r3, #1
 8004694:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ac:	ee17 3a90 	vmov	r3, s15
 80046b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046b2:	e005      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]
      break;
 80046b8:	e002      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046ba:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046bc:	61bb      	str	r3, [r7, #24]
      break;
 80046be:	bf00      	nop
  }

  return sysclockfreq;
 80046c0:	69bb      	ldr	r3, [r7, #24]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	@ 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
 80046d4:	03d09000 	.word	0x03d09000
 80046d8:	003d0900 	.word	0x003d0900
 80046dc:	017d7840 	.word	0x017d7840
 80046e0:	46000000 	.word	0x46000000
 80046e4:	4c742400 	.word	0x4c742400
 80046e8:	4a742400 	.word	0x4a742400
 80046ec:	4bbebc20 	.word	0x4bbebc20

080046f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046f6:	f7ff fe81 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <HAL_RCC_GetHCLKFreq+0x50>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	0a1b      	lsrs	r3, r3, #8
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490f      	ldr	r1, [pc, #60]	@ (8004744 <HAL_RCC_GetHCLKFreq+0x54>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004714:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCC_GetHCLKFreq+0x50>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	4a09      	ldr	r2, [pc, #36]	@ (8004744 <HAL_RCC_GetHCLKFreq+0x54>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	4a07      	ldr	r2, [pc, #28]	@ (8004748 <HAL_RCC_GetHCLKFreq+0x58>)
 800472c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800472e:	4a07      	ldr	r2, [pc, #28]	@ (800474c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004734:	4b04      	ldr	r3, [pc, #16]	@ (8004748 <HAL_RCC_GetHCLKFreq+0x58>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58024400 	.word	0x58024400
 8004744:	0800bdac 	.word	0x0800bdac
 8004748:	240001b4 	.word	0x240001b4
 800474c:	240001b0 	.word	0x240001b0

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004754:	f7ff ffcc 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	@ (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	58024400 	.word	0x58024400
 8004778:	0800bdac 	.word	0x0800bdac

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004780:	f7ff ffb6 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	58024400 	.word	0x58024400
 80047a4:	0800bdac 	.word	0x0800bdac

080047a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b0c6      	sub	sp, #280	@ 0x118
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80047cc:	2500      	movs	r5, #0
 80047ce:	ea54 0305 	orrs.w	r3, r4, r5
 80047d2:	d049      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047de:	d02f      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e4:	d828      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ea:	d01a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f0:	d822      	bhi.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047fa:	d007      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047fc:	e01c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fe:	4bab      	ldr	r3, [pc, #684]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	4aaa      	ldr	r2, [pc, #680]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800480a:	e01a      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004810:	3308      	adds	r3, #8
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f001 fc25 	bl	8006064 <RCCEx_PLL2_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004820:	e00f      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004826:	3328      	adds	r3, #40	@ 0x28
 8004828:	2102      	movs	r1, #2
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fccc 	bl	80061c8 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800483e:	e000      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800484a:	4b98      	ldr	r3, [pc, #608]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800484c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004858:	4a94      	ldr	r2, [pc, #592]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800485a:	430b      	orrs	r3, r1
 800485c:	6513      	str	r3, [r2, #80]	@ 0x50
 800485e:	e003      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004874:	f04f 0900 	mov.w	r9, #0
 8004878:	ea58 0309 	orrs.w	r3, r8, r9
 800487c:	d047      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004884:	2b04      	cmp	r3, #4
 8004886:	d82a      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004888:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048b3 	.word	0x080048b3
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048e7 	.word	0x080048e7
 80048a0:	080048e7 	.word	0x080048e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b81      	ldr	r3, [pc, #516]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	4a80      	ldr	r2, [pc, #512]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048b0:	e01a      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b6:	3308      	adds	r3, #8
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fbd2 	bl	8006064 <RCCEx_PLL2_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048c6:	e00f      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048cc:	3328      	adds	r3, #40	@ 0x28
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 fc79 	bl	80061c8 <RCCEx_PLL3_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048dc:	e004      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f0:	4b6e      	ldr	r3, [pc, #440]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f4:	f023 0107 	bic.w	r1, r3, #7
 80048f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	4a6b      	ldr	r2, [pc, #428]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004900:	430b      	orrs	r3, r1
 8004902:	6513      	str	r3, [r2, #80]	@ 0x50
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800490a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800490e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800491a:	f04f 0b00 	mov.w	fp, #0
 800491e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004922:	d05b      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800492c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004930:	d03b      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004932:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004936:	d834      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004938:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800493c:	d037      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800493e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004942:	d82e      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004944:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004948:	d033      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800494a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800494e:	d828      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004954:	d01a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800495a:	d822      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004964:	d007      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004966:	e01c      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b50      	ldr	r3, [pc, #320]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a4f      	ldr	r2, [pc, #316]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004974:	e01e      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800497a:	3308      	adds	r3, #8
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fb70 	bl	8006064 <RCCEx_PLL2_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800498a:	e013      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004990:	3328      	adds	r3, #40	@ 0x28
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fc17 	bl	80061c8 <RCCEx_PLL3_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a0:	e008      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80049b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049bc:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80049c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049cc:	4a37      	ldr	r2, [pc, #220]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049ce:	430b      	orrs	r3, r1
 80049d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049d2:	e003      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80049e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049f6:	460b      	mov	r3, r1
 80049f8:	4313      	orrs	r3, r2
 80049fa:	d05d      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80049fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a08:	d03b      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004a0a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a0e:	d834      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a14:	d037      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004a16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a1a:	d82e      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a20:	d033      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004a22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a26:	d828      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a2c:	d01a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004a2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a32:	d822      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a3c:	d007      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a3e:	e01c      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a40:	4b1a      	ldr	r3, [pc, #104]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e01e      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a52:	3308      	adds	r3, #8
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fb04 	bl	8006064 <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a62:	e013      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a68:	3328      	adds	r3, #40	@ 0x28
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fbab 	bl	80061c8 <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a80:	e004      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a82:	bf00      	nop
 8004a84:	e002      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10d      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a94:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aa4:	4a01      	ldr	r2, [pc, #4]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ace:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d03a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	2b30      	cmp	r3, #48	@ 0x30
 8004ae0:	d01f      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004ae2:	2b30      	cmp	r3, #48	@ 0x30
 8004ae4:	d819      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d00c      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d815      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d019      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d111      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af6:	4baa      	ldr	r3, [pc, #680]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	4aa9      	ldr	r2, [pc, #676]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b02:	e011      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 faa9 	bl	8006064 <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b18:	e006      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b30:	4b9b      	ldr	r3, [pc, #620]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b3e:	4a98      	ldr	r2, [pc, #608]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d051      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b78:	d035      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004b7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7e:	d82e      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b84:	d031      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004b86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b8a:	d828      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b90:	d01a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b96:	d822      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba0:	d007      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004ba2:	e01c      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	4a7d      	ldr	r2, [pc, #500]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bb0:	e01c      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fa52 	bl	8006064 <RCCEx_PLL2_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bc6:	e011      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bcc:	3328      	adds	r3, #40	@ 0x28
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 faf9 	bl	80061c8 <RCCEx_PLL3_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	4a67      	ldr	r2, [pc, #412]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c08:	e003      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d053      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c3c:	d033      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004c3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c42:	d82c      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c48:	d02f      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004c4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c4e:	d826      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c54:	d02b      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004c56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c5a:	d820      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c60:	d012      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c66:	d81a      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d022      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c70:	d115      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c76:	3308      	adds	r3, #8
 8004c78:	2101      	movs	r1, #1
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 f9f2 	bl	8006064 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c86:	e015      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8c:	3328      	adds	r3, #40	@ 0x28
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 fa99 	bl	80061c8 <RCCEx_PLL3_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e004      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cbc:	4b38      	ldr	r3, [pc, #224]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cca:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cd0:	e003      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cf0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d058      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d06:	d033      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d0c:	d82c      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d12:	d02f      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d18:	d826      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d1e:	d02b      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004d20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d24:	d820      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d2a:	d012      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d30:	d81a      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d022      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d3a:	d115      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d40:	3308      	adds	r3, #8
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 f98d 	bl	8006064 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d50:	e015      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d56:	3328      	adds	r3, #40	@ 0x28
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 fa34 	bl	80061c8 <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d6e:	e006      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d70:	bf00      	nop
 8004d72:	e004      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d74:	bf00      	nop
 8004d76:	e002      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e000      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10e      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d96:	4a02      	ldr	r2, [pc, #8]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d9c:	e006      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004db8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004dc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d037      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd6:	d00e      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ddc:	d816      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d018      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de6:	d111      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de8:	4bc4      	ldr	r3, [pc, #784]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	4ac3      	ldr	r2, [pc, #780]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004df4:	e00f      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f930 	bl	8006064 <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e0a:	e004      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e12:	e000      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e1e:	4bb7      	ldr	r3, [pc, #732]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e2c:	4ab3      	ldr	r2, [pc, #716]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d039      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d81c      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004ea9 	.word	0x08004ea9
 8004e70:	08004e7d 	.word	0x08004e7d
 8004e74:	08004e8b 	.word	0x08004e8b
 8004e78:	08004ea9 	.word	0x08004ea9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7c:	4b9f      	ldr	r3, [pc, #636]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	4a9e      	ldr	r2, [pc, #632]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8e:	3308      	adds	r3, #8
 8004e90:	2102      	movs	r1, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 f8e6 	bl	8006064 <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004eb2:	4b92      	ldr	r3, [pc, #584]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb6:	f023 0103 	bic.w	r1, r3, #3
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec0:	4a8e      	ldr	r2, [pc, #568]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ec6:	e003      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004edc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ee6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f000 8099 	beq.w	8005024 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef2:	4b83      	ldr	r3, [pc, #524]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a82      	ldr	r2, [pc, #520]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efe:	f7fc febb 	bl	8001c78 <HAL_GetTick>
 8004f02:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f06:	e00b      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f08:	f7fc feb6 	bl	8001c78 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	@ 0x64
 8004f16:	d903      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f1e:	e005      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f20:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ed      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d173      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f34:	4b71      	ldr	r3, [pc, #452]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f40:	4053      	eors	r3, r2
 8004f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d015      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f56:	4b69      	ldr	r3, [pc, #420]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a68      	ldr	r2, [pc, #416]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f62:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a65      	ldr	r2, [pc, #404]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f6e:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f82:	d118      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc fe78 	bl	8001c78 <HAL_GetTick>
 8004f88:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f8c:	e00d      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fc fe73 	bl	8001c78 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d903      	bls.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004fa8:	e005      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004faa:	4b54      	ldr	r3, [pc, #336]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0eb      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d129      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fce:	d10e      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fe0:	091a      	lsrs	r2, r3, #4
 8004fe2:	4b48      	ldr	r3, [pc, #288]	@ (8005104 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	4a45      	ldr	r2, [pc, #276]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6113      	str	r3, [r2, #16]
 8004fec:	e005      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004fee:	4b43      	ldr	r3, [pc, #268]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	4a42      	ldr	r2, [pc, #264]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ff8:	6113      	str	r3, [r2, #16]
 8004ffa:	4b40      	ldr	r3, [pc, #256]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ffc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	4a3c      	ldr	r2, [pc, #240]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500c:	430b      	orrs	r3, r1
 800500e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005016:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800501a:	e003      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f002 0301 	and.w	r3, r2, #1
 8005030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800503a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800503e:	460b      	mov	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	f000 808f 	beq.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504c:	2b28      	cmp	r3, #40	@ 0x28
 800504e:	d871      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800513d 	.word	0x0800513d
 800505c:	08005135 	.word	0x08005135
 8005060:	08005135 	.word	0x08005135
 8005064:	08005135 	.word	0x08005135
 8005068:	08005135 	.word	0x08005135
 800506c:	08005135 	.word	0x08005135
 8005070:	08005135 	.word	0x08005135
 8005074:	08005135 	.word	0x08005135
 8005078:	08005109 	.word	0x08005109
 800507c:	08005135 	.word	0x08005135
 8005080:	08005135 	.word	0x08005135
 8005084:	08005135 	.word	0x08005135
 8005088:	08005135 	.word	0x08005135
 800508c:	08005135 	.word	0x08005135
 8005090:	08005135 	.word	0x08005135
 8005094:	08005135 	.word	0x08005135
 8005098:	0800511f 	.word	0x0800511f
 800509c:	08005135 	.word	0x08005135
 80050a0:	08005135 	.word	0x08005135
 80050a4:	08005135 	.word	0x08005135
 80050a8:	08005135 	.word	0x08005135
 80050ac:	08005135 	.word	0x08005135
 80050b0:	08005135 	.word	0x08005135
 80050b4:	08005135 	.word	0x08005135
 80050b8:	0800513d 	.word	0x0800513d
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005135 	.word	0x08005135
 80050c4:	08005135 	.word	0x08005135
 80050c8:	08005135 	.word	0x08005135
 80050cc:	08005135 	.word	0x08005135
 80050d0:	08005135 	.word	0x08005135
 80050d4:	08005135 	.word	0x08005135
 80050d8:	0800513d 	.word	0x0800513d
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005135 	.word	0x08005135
 80050e4:	08005135 	.word	0x08005135
 80050e8:	08005135 	.word	0x08005135
 80050ec:	08005135 	.word	0x08005135
 80050f0:	08005135 	.word	0x08005135
 80050f4:	08005135 	.word	0x08005135
 80050f8:	0800513d 	.word	0x0800513d
 80050fc:	58024400 	.word	0x58024400
 8005100:	58024800 	.word	0x58024800
 8005104:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510c:	3308      	adds	r3, #8
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f000 ffa7 	bl	8006064 <RCCEx_PLL2_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800511c:	e00f      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	3328      	adds	r3, #40	@ 0x28
 8005124:	2101      	movs	r1, #1
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f84e 	bl	80061c8 <RCCEx_PLL3_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005146:	4bbf      	ldr	r3, [pc, #764]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005152:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005154:	4abb      	ldr	r2, [pc, #748]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6553      	str	r3, [r2, #84]	@ 0x54
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005160:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f002 0302 	and.w	r3, r2, #2
 8005170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800517a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800517e:	460b      	mov	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	d041      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	2b05      	cmp	r3, #5
 800518c:	d824      	bhi.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800518e:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051e1 	.word	0x080051e1
 8005198:	080051ad 	.word	0x080051ad
 800519c:	080051c3 	.word	0x080051c3
 80051a0:	080051e1 	.word	0x080051e1
 80051a4:	080051e1 	.word	0x080051e1
 80051a8:	080051e1 	.word	0x080051e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	3308      	adds	r3, #8
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 ff55 	bl	8006064 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051c0:	e00f      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c6:	3328      	adds	r3, #40	@ 0x28
 80051c8:	2101      	movs	r1, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fffc 	bl	80061c8 <RCCEx_PLL3_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051d6:	e004      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051de:	e000      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80051e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ea:	4b96      	ldr	r3, [pc, #600]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ee:	f023 0107 	bic.w	r1, r3, #7
 80051f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f8:	4a92      	ldr	r2, [pc, #584]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80051fa:	430b      	orrs	r3, r1
 80051fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80051fe:	e003      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f002 0304 	and.w	r3, r2, #4
 8005214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800521e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d044      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005230:	2b05      	cmp	r3, #5
 8005232:	d825      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005234:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005289 	.word	0x08005289
 8005240:	08005255 	.word	0x08005255
 8005244:	0800526b 	.word	0x0800526b
 8005248:	08005289 	.word	0x08005289
 800524c:	08005289 	.word	0x08005289
 8005250:	08005289 	.word	0x08005289
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005258:	3308      	adds	r3, #8
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f000 ff01 	bl	8006064 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	2101      	movs	r1, #1
 8005272:	4618      	mov	r0, r3
 8005274:	f000 ffa8 	bl	80061c8 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005292:	4b6c      	ldr	r3, [pc, #432]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	f023 0107 	bic.w	r1, r3, #7
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a2:	4a68      	ldr	r2, [pc, #416]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f002 0320 	and.w	r3, r2, #32
 80052be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4313      	orrs	r3, r2
 80052d0:	d055      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052de:	d033      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80052e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052e4:	d82c      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ea:	d02f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052f0:	d826      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052f6:	d02b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80052f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052fc:	d820      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80052fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005302:	d012      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005308:	d81a      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d022      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800530e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005312:	d115      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	3308      	adds	r3, #8
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fea1 	bl	8006064 <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005328:	e015      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800532a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532e:	3328      	adds	r3, #40	@ 0x28
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f000 ff48 	bl	80061c8 <RCCEx_PLL3_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800533e:	e00a      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005346:	e006      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005348:	bf00      	nop
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800535e:	4b39      	ldr	r3, [pc, #228]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800536e:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005370:	430b      	orrs	r3, r1
 8005372:	6553      	str	r3, [r2, #84]	@ 0x54
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800537a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800537e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800538a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005394:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d058      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053aa:	d033      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80053ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053b0:	d82c      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b6:	d02f      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053bc:	d826      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053c2:	d02b      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80053c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053c8:	d820      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ce:	d012      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80053d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d4:	d81a      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d022      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053de:	d115      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	3308      	adds	r3, #8
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fe3b 	bl	8006064 <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053f4:	e015      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fa:	3328      	adds	r3, #40	@ 0x28
 80053fc:	2102      	movs	r1, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fee2 	bl	80061c8 <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800540a:	e00a      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005412:	e006      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005414:	bf00      	nop
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005418:	bf00      	nop
 800541a:	e002      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10e      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800542a:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800543a:	4a02      	ldr	r2, [pc, #8]	@ (8005444 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800543c:	430b      	orrs	r3, r1
 800543e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005442:	bf00      	nop
 8005444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800544c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800545c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005466:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d055      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005478:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800547c:	d033      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800547e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005482:	d82c      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005488:	d02f      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800548a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800548e:	d826      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005490:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005494:	d02b      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005496:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800549a:	d820      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800549c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a0:	d012      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80054a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a6:	d81a      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d022      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80054ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b0:	d115      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	3308      	adds	r3, #8
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fdd2 	bl	8006064 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054c6:	e015      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054cc:	3328      	adds	r3, #40	@ 0x28
 80054ce:	2102      	movs	r1, #2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fe79 	bl	80061c8 <RCCEx_PLL3_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054dc:	e00a      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054e4:	e006      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054e6:	bf00      	nop
 80054e8:	e004      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80054f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054fc:	4ba0      	ldr	r3, [pc, #640]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005500:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005508:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800550c:	4a9c      	ldr	r2, [pc, #624]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6593      	str	r3, [r2, #88]	@ 0x58
 8005512:	e003      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f002 0308 	and.w	r3, r2, #8
 8005528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005532:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005536:	460b      	mov	r3, r1
 8005538:	4313      	orrs	r3, r2
 800553a:	d01e      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005548:	d10c      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fe38 	bl	80061c8 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005564:	4b86      	ldr	r3, [pc, #536]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800556c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005574:	4a82      	ldr	r2, [pc, #520]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005576:	430b      	orrs	r3, r1
 8005578:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800557a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f002 0310 	and.w	r3, r2, #16
 8005586:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005590:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d01e      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a6:	d10c      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ac:	3328      	adds	r3, #40	@ 0x28
 80055ae:	2102      	movs	r1, #2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fe09 	bl	80061c8 <RCCEx_PLL3_Config>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055c2:	4b6f      	ldr	r3, [pc, #444]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80055e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055e6:	2300      	movs	r3, #0
 80055e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d03e      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005600:	d022      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005606:	d81b      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005610:	d00b      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005612:	e015      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	3308      	adds	r3, #8
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fd21 	bl	8006064 <RCCEx_PLL2_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005628:	e00f      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562e:	3328      	adds	r3, #40	@ 0x28
 8005630:	2102      	movs	r1, #2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fdc8 	bl	80061c8 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005652:	4b4b      	ldr	r3, [pc, #300]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005662:	4a47      	ldr	r2, [pc, #284]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58
 8005668:	e003      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800566e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800567e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005680:	2300      	movs	r3, #0
 8005682:	677b      	str	r3, [r7, #116]	@ 0x74
 8005684:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005688:	460b      	mov	r3, r1
 800568a:	4313      	orrs	r3, r2
 800568c:	d03b      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005696:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800569a:	d01f      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800569c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056a0:	d818      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80056a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a6:	d003      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80056a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056ac:	d007      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80056ae:	e011      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b0:	4b33      	ldr	r3, [pc, #204]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	4a32      	ldr	r2, [pc, #200]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80056bc:	e00f      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c2:	3328      	adds	r3, #40	@ 0x28
 80056c4:	2101      	movs	r1, #1
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fd7e 	bl	80061c8 <RCCEx_PLL3_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80056dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e6:	4b26      	ldr	r3, [pc, #152]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f6:	4a22      	ldr	r2, [pc, #136]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005702:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005712:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005714:	2300      	movs	r3, #0
 8005716:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005718:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d034      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005730:	d007      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005732:	e011      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4a11      	ldr	r2, [pc, #68]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005740:	e00e      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005746:	3308      	adds	r3, #8
 8005748:	2102      	movs	r1, #2
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fc8a 	bl	8006064 <RCCEx_PLL2_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005756:	e003      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800575e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10d      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005768:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800576a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005776:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005778:	430b      	orrs	r3, r1
 800577a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800577c:	e006      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800577e:	bf00      	nop
 8005780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005788:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005798:	663b      	str	r3, [r7, #96]	@ 0x60
 800579a:	2300      	movs	r3, #0
 800579c:	667b      	str	r3, [r7, #100]	@ 0x64
 800579e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80057a2:	460b      	mov	r3, r1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	d00c      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ac:	3328      	adds	r3, #40	@ 0x28
 80057ae:	2102      	movs	r1, #2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fd09 	bl	80061c8 <RCCEx_PLL3_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057d0:	2300      	movs	r3, #0
 80057d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d036      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e8:	d018      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80057ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ee:	d811      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f4:	d014      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80057f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057fa:	d80b      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005804:	d106      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005806:	4bb7      	ldr	r3, [pc, #732]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	4ab6      	ldr	r2, [pc, #728]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800580c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005810:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005812:	e008      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800581a:	e004      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800581c:	bf00      	nop
 800581e:	e002      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800582e:	4bad      	ldr	r3, [pc, #692]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800583c:	4aa9      	ldr	r2, [pc, #676]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800583e:	430b      	orrs	r3, r1
 8005840:	6553      	str	r3, [r2, #84]	@ 0x54
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005848:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005858:	653b      	str	r3, [r7, #80]	@ 0x50
 800585a:	2300      	movs	r3, #0
 800585c:	657b      	str	r3, [r7, #84]	@ 0x54
 800585e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005868:	4b9e      	ldr	r3, [pc, #632]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800586a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005876:	4a9b      	ldr	r2, [pc, #620]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005878:	430b      	orrs	r3, r1
 800587a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800588a:	2300      	movs	r3, #0
 800588c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800588e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005898:	4b92      	ldr	r3, [pc, #584]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058a6:	4a8f      	ldr	r2, [pc, #572]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80058b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ba:	2300      	movs	r3, #0
 80058bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80058be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80058c2:	460b      	mov	r3, r1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058c8:	4b86      	ldr	r3, [pc, #536]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	4a85      	ldr	r2, [pc, #532]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058d2:	6113      	str	r3, [r2, #16]
 80058d4:	4b83      	ldr	r3, [pc, #524]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d6:	6919      	ldr	r1, [r3, #16]
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058e0:	4a80      	ldr	r2, [pc, #512]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80058f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058f4:	2300      	movs	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005902:	4b78      	ldr	r3, [pc, #480]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005906:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005910:	4a74      	ldr	r2, [pc, #464]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005912:	430b      	orrs	r3, r1
 8005914:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005922:	633b      	str	r3, [r7, #48]	@ 0x30
 8005924:	2300      	movs	r3, #0
 8005926:	637b      	str	r3, [r7, #52]	@ 0x34
 8005928:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005932:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005936:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	4a68      	ldr	r2, [pc, #416]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005944:	430b      	orrs	r3, r1
 8005946:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	2100      	movs	r1, #0
 8005952:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800595a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d011      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005968:	3308      	adds	r3, #8
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fb79 	bl	8006064 <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	2100      	movs	r1, #0
 8005992:	6239      	str	r1, [r7, #32]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
 800599a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800599e:	460b      	mov	r3, r1
 80059a0:	4313      	orrs	r3, r2
 80059a2:	d011      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	3308      	adds	r3, #8
 80059aa:	2101      	movs	r1, #1
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fb59 	bl	8006064 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80059b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	2100      	movs	r1, #0
 80059d2:	61b9      	str	r1, [r7, #24]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059de:	460b      	mov	r3, r1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	d011      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e8:	3308      	adds	r3, #8
 80059ea:	2102      	movs	r1, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fb39 	bl	8006064 <RCCEx_PLL2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80059f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	2100      	movs	r1, #0
 8005a12:	6139      	str	r1, [r7, #16]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d011      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a28:	3328      	adds	r3, #40	@ 0x28
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fbcb 	bl	80061c8 <RCCEx_PLL3_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	2100      	movs	r1, #0
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4313      	orrs	r3, r2
 8005a62:	d011      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a68:	3328      	adds	r3, #40	@ 0x28
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fbab 	bl	80061c8 <RCCEx_PLL3_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	2100      	movs	r1, #0
 8005a92:	6039      	str	r1, [r7, #0]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d011      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa8:	3328      	adds	r3, #40	@ 0x28
 8005aaa:	2102      	movs	r1, #2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fb8b 	bl	80061c8 <RCCEx_PLL3_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005ac8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae2:	bf00      	nop
 8005ae4:	58024400 	.word	0x58024400

08005ae8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005aec:	f7fe fe00 	bl	80046f0 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4904      	ldr	r1, [pc, #16]	@ (8005b10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	58024400 	.word	0x58024400
 8005b10:	0800bdac 	.word	0x0800bdac

08005b14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	@ 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b1c:	4ba1      	ldr	r3, [pc, #644]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b26:	4b9f      	ldr	r3, [pc, #636]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2a:	0b1b      	lsrs	r3, r3, #12
 8005b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b32:	4b9c      	ldr	r3, [pc, #624]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b3e:	4b99      	ldr	r3, [pc, #612]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b42:	08db      	lsrs	r3, r3, #3
 8005b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8111 	beq.w	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	f000 8083 	beq.w	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	f200 80a1 	bhi.w	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d056      	beq.n	8005c2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b7e:	e099      	b.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b80:	4b88      	ldr	r3, [pc, #544]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b8c:	4b85      	ldr	r3, [pc, #532]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	08db      	lsrs	r3, r3, #3
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	4a84      	ldr	r2, [pc, #528]	@ (8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005be6:	e087      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c2a:	e065      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b59      	ldr	r3, [pc, #356]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c6e:	e043      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb2:	e021      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b37      	ldr	r3, [pc, #220]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1e:	ee17 2a90 	vmov	r2, s15
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d26:	4b1f      	ldr	r3, [pc, #124]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2a:	0c1b      	lsrs	r3, r3, #16
 8005d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4c:	ee17 2a90 	vmov	r2, s15
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d54:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d58:	0e1b      	lsrs	r3, r3, #24
 8005d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7a:	ee17 2a90 	vmov	r2, s15
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d82:	e008      	b.n	8005d96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	bf00      	nop
 8005d98:	3724      	adds	r7, #36	@ 0x24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400
 8005da8:	03d09000 	.word	0x03d09000
 8005dac:	46000000 	.word	0x46000000
 8005db0:	4c742400 	.word	0x4c742400
 8005db4:	4a742400 	.word	0x4a742400
 8005db8:	4bbebc20 	.word	0x4bbebc20

08005dbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	@ 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005dce:	4b9f      	ldr	r3, [pc, #636]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	0d1b      	lsrs	r3, r3, #20
 8005dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dda:	4b9c      	ldr	r3, [pc, #624]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005de6:	4b99      	ldr	r3, [pc, #612]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	08db      	lsrs	r3, r3, #3
 8005dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8111 	beq.w	800602c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	f000 8083 	beq.w	8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	f200 80a1 	bhi.w	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d056      	beq.n	8005ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e26:	e099      	b.n	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e28:	4b88      	ldr	r3, [pc, #544]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d02d      	beq.n	8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e34:	4b85      	ldr	r3, [pc, #532]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	08db      	lsrs	r3, r3, #3
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	4a84      	ldr	r2, [pc, #528]	@ (8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
 8005e44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	ee07 3a90 	vmov	s15, r3
 8005e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e8e:	e087      	b.n	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed2:	e065      	b.n	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b59      	ldr	r3, [pc, #356]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f16:	e043      	b.n	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b48      	ldr	r3, [pc, #288]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f5a:	e021      	b.n	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800605c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b37      	ldr	r3, [pc, #220]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	0a5b      	lsrs	r3, r3, #9
 8005fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc6:	ee17 2a90 	vmov	r2, s15
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005fce:	4b1f      	ldr	r3, [pc, #124]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	0c1b      	lsrs	r3, r3, #16
 8005fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff4:	ee17 2a90 	vmov	r2, s15
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ffc:	4b13      	ldr	r3, [pc, #76]	@ (800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	0e1b      	lsrs	r3, r3, #24
 8006002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006016:	edd7 6a07 	vldr	s13, [r7, #28]
 800601a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006022:	ee17 2a90 	vmov	r2, s15
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800602a:	e008      	b.n	800603e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
}
 800603e:	bf00      	nop
 8006040:	3724      	adds	r7, #36	@ 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400
 8006050:	03d09000 	.word	0x03d09000
 8006054:	46000000 	.word	0x46000000
 8006058:	4c742400 	.word	0x4c742400
 800605c:	4a742400 	.word	0x4a742400
 8006060:	4bbebc20 	.word	0x4bbebc20

08006064 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006072:	4b53      	ldr	r3, [pc, #332]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b03      	cmp	r3, #3
 800607c:	d101      	bne.n	8006082 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e099      	b.n	80061b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006082:	4b4f      	ldr	r3, [pc, #316]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4e      	ldr	r2, [pc, #312]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006088:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800608c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608e:	f7fb fdf3 	bl	8001c78 <HAL_GetTick>
 8006092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006094:	e008      	b.n	80060a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006096:	f7fb fdef 	bl	8001c78 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e086      	b.n	80061b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060a8:	4b45      	ldr	r3, [pc, #276]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f0      	bne.n	8006096 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060b4:	4b42      	ldr	r3, [pc, #264]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	031b      	lsls	r3, r3, #12
 80060c2:	493f      	ldr	r1, [pc, #252]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	025b      	lsls	r3, r3, #9
 80060da:	b29b      	uxth	r3, r3
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	041b      	lsls	r3, r3, #16
 80060e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	061b      	lsls	r3, r3, #24
 80060f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060f8:	4931      	ldr	r1, [pc, #196]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060fe:	4b30      	ldr	r3, [pc, #192]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	492d      	ldr	r1, [pc, #180]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800610c:	4313      	orrs	r3, r2
 800610e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006110:	4b2b      	ldr	r3, [pc, #172]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	f023 0220 	bic.w	r2, r3, #32
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	4928      	ldr	r1, [pc, #160]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006122:	4b27      	ldr	r3, [pc, #156]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	4a26      	ldr	r2, [pc, #152]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800612e:	4b24      	ldr	r3, [pc, #144]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006132:	4b24      	ldr	r3, [pc, #144]	@ (80061c4 <RCCEx_PLL2_Config+0x160>)
 8006134:	4013      	ands	r3, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	69d2      	ldr	r2, [r2, #28]
 800613a:	00d2      	lsls	r2, r2, #3
 800613c:	4920      	ldr	r1, [pc, #128]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006142:	4b1f      	ldr	r3, [pc, #124]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	4a1e      	ldr	r2, [pc, #120]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006148:	f043 0310 	orr.w	r3, r3, #16
 800614c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006154:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	4a19      	ldr	r2, [pc, #100]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800615a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800615e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006160:	e00f      	b.n	8006182 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d106      	bne.n	8006176 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	4a14      	ldr	r2, [pc, #80]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006172:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006174:	e005      	b.n	8006182 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006176:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617a:	4a11      	ldr	r2, [pc, #68]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 800617c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006180:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006182:	4b0f      	ldr	r3, [pc, #60]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a0e      	ldr	r2, [pc, #56]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 8006188:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800618c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800618e:	f7fb fd73 	bl	8001c78 <HAL_GetTick>
 8006192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006194:	e008      	b.n	80061a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006196:	f7fb fd6f 	bl	8001c78 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e006      	b.n	80061b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <RCCEx_PLL2_Config+0x15c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	ffff0007 	.word	0xffff0007

080061c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061d6:	4b53      	ldr	r3, [pc, #332]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d101      	bne.n	80061e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e099      	b.n	800631a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061e6:	4b4f      	ldr	r3, [pc, #316]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a4e      	ldr	r2, [pc, #312]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f2:	f7fb fd41 	bl	8001c78 <HAL_GetTick>
 80061f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061f8:	e008      	b.n	800620c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061fa:	f7fb fd3d 	bl	8001c78 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e086      	b.n	800631a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800620c:	4b45      	ldr	r3, [pc, #276]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006218:	4b42      	ldr	r3, [pc, #264]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	051b      	lsls	r3, r3, #20
 8006226:	493f      	ldr	r1, [pc, #252]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006228:	4313      	orrs	r3, r2
 800622a:	628b      	str	r3, [r1, #40]	@ 0x28
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	3b01      	subs	r3, #1
 8006232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	3b01      	subs	r3, #1
 800623c:	025b      	lsls	r3, r3, #9
 800623e:	b29b      	uxth	r3, r3
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	3b01      	subs	r3, #1
 8006248:	041b      	lsls	r3, r3, #16
 800624a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	3b01      	subs	r3, #1
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800625c:	4931      	ldr	r1, [pc, #196]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 800625e:	4313      	orrs	r3, r2
 8006260:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006262:	4b30      	ldr	r3, [pc, #192]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	492d      	ldr	r1, [pc, #180]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006270:	4313      	orrs	r3, r2
 8006272:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006274:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	4928      	ldr	r1, [pc, #160]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006282:	4313      	orrs	r3, r2
 8006284:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006286:	4b27      	ldr	r3, [pc, #156]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	4a26      	ldr	r2, [pc, #152]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 800628c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006292:	4b24      	ldr	r3, [pc, #144]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 8006294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006296:	4b24      	ldr	r3, [pc, #144]	@ (8006328 <RCCEx_PLL3_Config+0x160>)
 8006298:	4013      	ands	r3, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	69d2      	ldr	r2, [r2, #28]
 800629e:	00d2      	lsls	r2, r2, #3
 80062a0:	4920      	ldr	r1, [pc, #128]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	4a19      	ldr	r2, [pc, #100]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062c4:	e00f      	b.n	80062e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d106      	bne.n	80062da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062cc:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	4a14      	ldr	r2, [pc, #80]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80062d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062d8:	e005      	b.n	80062e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062da:	4b12      	ldr	r3, [pc, #72]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 80062ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f2:	f7fb fcc1 	bl	8001c78 <HAL_GetTick>
 80062f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062f8:	e008      	b.n	800630c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062fa:	f7fb fcbd 	bl	8001c78 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e006      	b.n	800631a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800630c:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <RCCEx_PLL3_Config+0x15c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	58024400 	.word	0x58024400
 8006328:	ffff0007 	.word	0xffff0007

0800632c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e042      	b.n	80063c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fb fa5f 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2224      	movs	r2, #36	@ 0x24
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 ff22 	bl	80071c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f8b3 	bl	80064e8 <UART_SetConfig>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e01b      	b.n	80063c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800639a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 ffa1 	bl	8007304 <UART_CheckIdleState>
 80063c2:	4603      	mov	r3, r0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	@ 0x28
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4613      	mov	r3, r2
 80063da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d17b      	bne.n	80064de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_UART_Transmit+0x26>
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e074      	b.n	80064e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2221      	movs	r2, #33	@ 0x21
 8006402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006406:	f7fb fc37 	bl	8001c78 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006424:	d108      	bne.n	8006438 <HAL_UART_Transmit+0x6c>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e003      	b.n	8006440 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006440:	e030      	b.n	80064a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2200      	movs	r2, #0
 800644a:	2180      	movs	r1, #128	@ 0x80
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f001 f803 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e03d      	b.n	80064e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	3302      	adds	r3, #2
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e007      	b.n	8006492 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1c8      	bne.n	8006442 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	2140      	movs	r1, #64	@ 0x40
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 ffcc 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e006      	b.n	80064e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	e000      	b.n	80064e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064de:	2302      	movs	r3, #2
  }
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3720      	adds	r7, #32
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ec:	b092      	sub	sp, #72	@ 0x48
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	431a      	orrs	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	431a      	orrs	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	4313      	orrs	r3, r2
 800650e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4bbe      	ldr	r3, [pc, #760]	@ (8006810 <UART_SetConfig+0x328>)
 8006518:	4013      	ands	r3, r2
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006520:	430b      	orrs	r3, r1
 8006522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4ab3      	ldr	r2, [pc, #716]	@ (8006814 <UART_SetConfig+0x32c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006550:	4313      	orrs	r3, r2
 8006552:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	4baf      	ldr	r3, [pc, #700]	@ (8006818 <UART_SetConfig+0x330>)
 800655c:	4013      	ands	r3, r2
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006564:	430b      	orrs	r3, r1
 8006566:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656e:	f023 010f 	bic.w	r1, r3, #15
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4aa6      	ldr	r2, [pc, #664]	@ (800681c <UART_SetConfig+0x334>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d177      	bne.n	8006678 <UART_SetConfig+0x190>
 8006588:	4ba5      	ldr	r3, [pc, #660]	@ (8006820 <UART_SetConfig+0x338>)
 800658a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006590:	2b28      	cmp	r3, #40	@ 0x28
 8006592:	d86d      	bhi.n	8006670 <UART_SetConfig+0x188>
 8006594:	a201      	add	r2, pc, #4	@ (adr r2, 800659c <UART_SetConfig+0xb4>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	08006641 	.word	0x08006641
 80065a0:	08006671 	.word	0x08006671
 80065a4:	08006671 	.word	0x08006671
 80065a8:	08006671 	.word	0x08006671
 80065ac:	08006671 	.word	0x08006671
 80065b0:	08006671 	.word	0x08006671
 80065b4:	08006671 	.word	0x08006671
 80065b8:	08006671 	.word	0x08006671
 80065bc:	08006649 	.word	0x08006649
 80065c0:	08006671 	.word	0x08006671
 80065c4:	08006671 	.word	0x08006671
 80065c8:	08006671 	.word	0x08006671
 80065cc:	08006671 	.word	0x08006671
 80065d0:	08006671 	.word	0x08006671
 80065d4:	08006671 	.word	0x08006671
 80065d8:	08006671 	.word	0x08006671
 80065dc:	08006651 	.word	0x08006651
 80065e0:	08006671 	.word	0x08006671
 80065e4:	08006671 	.word	0x08006671
 80065e8:	08006671 	.word	0x08006671
 80065ec:	08006671 	.word	0x08006671
 80065f0:	08006671 	.word	0x08006671
 80065f4:	08006671 	.word	0x08006671
 80065f8:	08006671 	.word	0x08006671
 80065fc:	08006659 	.word	0x08006659
 8006600:	08006671 	.word	0x08006671
 8006604:	08006671 	.word	0x08006671
 8006608:	08006671 	.word	0x08006671
 800660c:	08006671 	.word	0x08006671
 8006610:	08006671 	.word	0x08006671
 8006614:	08006671 	.word	0x08006671
 8006618:	08006671 	.word	0x08006671
 800661c:	08006661 	.word	0x08006661
 8006620:	08006671 	.word	0x08006671
 8006624:	08006671 	.word	0x08006671
 8006628:	08006671 	.word	0x08006671
 800662c:	08006671 	.word	0x08006671
 8006630:	08006671 	.word	0x08006671
 8006634:	08006671 	.word	0x08006671
 8006638:	08006671 	.word	0x08006671
 800663c:	08006669 	.word	0x08006669
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e326      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e322      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e31e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e31a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006660:	2320      	movs	r3, #32
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e316      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006668:	2340      	movs	r3, #64	@ 0x40
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e312      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e30e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a69      	ldr	r2, [pc, #420]	@ (8006824 <UART_SetConfig+0x33c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d130      	bne.n	80066e4 <UART_SetConfig+0x1fc>
 8006682:	4b67      	ldr	r3, [pc, #412]	@ (8006820 <UART_SetConfig+0x338>)
 8006684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b05      	cmp	r3, #5
 800668c:	d826      	bhi.n	80066dc <UART_SetConfig+0x1f4>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0x1ac>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066ad 	.word	0x080066ad
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b2:	e2f0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ba:	e2ec      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c2:	e2e8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e2e4      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066cc:	2320      	movs	r3, #32
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e2e0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066d4:	2340      	movs	r3, #64	@ 0x40
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e2dc      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e2d8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a4f      	ldr	r2, [pc, #316]	@ (8006828 <UART_SetConfig+0x340>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d130      	bne.n	8006750 <UART_SetConfig+0x268>
 80066ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006820 <UART_SetConfig+0x338>)
 80066f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d826      	bhi.n	8006748 <UART_SetConfig+0x260>
 80066fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <UART_SetConfig+0x218>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006719 	.word	0x08006719
 8006704:	08006721 	.word	0x08006721
 8006708:	08006729 	.word	0x08006729
 800670c:	08006731 	.word	0x08006731
 8006710:	08006739 	.word	0x08006739
 8006714:	08006741 	.word	0x08006741
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671e:	e2ba      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006726:	e2b6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800672e:	e2b2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e2ae      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006738:	2320      	movs	r3, #32
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e2aa      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006740:	2340      	movs	r3, #64	@ 0x40
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e2a6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006748:	2380      	movs	r3, #128	@ 0x80
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e2a2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a35      	ldr	r2, [pc, #212]	@ (800682c <UART_SetConfig+0x344>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d130      	bne.n	80067bc <UART_SetConfig+0x2d4>
 800675a:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <UART_SetConfig+0x338>)
 800675c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	2b05      	cmp	r3, #5
 8006764:	d826      	bhi.n	80067b4 <UART_SetConfig+0x2cc>
 8006766:	a201      	add	r2, pc, #4	@ (adr r2, 800676c <UART_SetConfig+0x284>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006785 	.word	0x08006785
 8006770:	0800678d 	.word	0x0800678d
 8006774:	08006795 	.word	0x08006795
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	2300      	movs	r3, #0
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e284      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e280      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e27c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a2:	e278      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067a4:	2320      	movs	r3, #32
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067aa:	e274      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067ac:	2340      	movs	r3, #64	@ 0x40
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b2:	e270      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067b4:	2380      	movs	r3, #128	@ 0x80
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ba:	e26c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006830 <UART_SetConfig+0x348>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d142      	bne.n	800684c <UART_SetConfig+0x364>
 80067c6:	4b16      	ldr	r3, [pc, #88]	@ (8006820 <UART_SetConfig+0x338>)
 80067c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d838      	bhi.n	8006844 <UART_SetConfig+0x35c>
 80067d2:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <UART_SetConfig+0x2f0>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067f1 	.word	0x080067f1
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	08006801 	.word	0x08006801
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006835 	.word	0x08006835
 80067ec:	0800683d 	.word	0x0800683d
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e24e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e24a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e246      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680e:	e242      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006810:	cfff69f3 	.word	0xcfff69f3
 8006814:	58000c00 	.word	0x58000c00
 8006818:	11fff4ff 	.word	0x11fff4ff
 800681c:	40011000 	.word	0x40011000
 8006820:	58024400 	.word	0x58024400
 8006824:	40004400 	.word	0x40004400
 8006828:	40004800 	.word	0x40004800
 800682c:	40004c00 	.word	0x40004c00
 8006830:	40005000 	.word	0x40005000
 8006834:	2320      	movs	r3, #32
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e22c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800683c:	2340      	movs	r3, #64	@ 0x40
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e228      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006844:	2380      	movs	r3, #128	@ 0x80
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e224      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4ab1      	ldr	r2, [pc, #708]	@ (8006b18 <UART_SetConfig+0x630>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d176      	bne.n	8006944 <UART_SetConfig+0x45c>
 8006856:	4bb1      	ldr	r3, [pc, #708]	@ (8006b1c <UART_SetConfig+0x634>)
 8006858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800685e:	2b28      	cmp	r3, #40	@ 0x28
 8006860:	d86c      	bhi.n	800693c <UART_SetConfig+0x454>
 8006862:	a201      	add	r2, pc, #4	@ (adr r2, 8006868 <UART_SetConfig+0x380>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	0800690d 	.word	0x0800690d
 800686c:	0800693d 	.word	0x0800693d
 8006870:	0800693d 	.word	0x0800693d
 8006874:	0800693d 	.word	0x0800693d
 8006878:	0800693d 	.word	0x0800693d
 800687c:	0800693d 	.word	0x0800693d
 8006880:	0800693d 	.word	0x0800693d
 8006884:	0800693d 	.word	0x0800693d
 8006888:	08006915 	.word	0x08006915
 800688c:	0800693d 	.word	0x0800693d
 8006890:	0800693d 	.word	0x0800693d
 8006894:	0800693d 	.word	0x0800693d
 8006898:	0800693d 	.word	0x0800693d
 800689c:	0800693d 	.word	0x0800693d
 80068a0:	0800693d 	.word	0x0800693d
 80068a4:	0800693d 	.word	0x0800693d
 80068a8:	0800691d 	.word	0x0800691d
 80068ac:	0800693d 	.word	0x0800693d
 80068b0:	0800693d 	.word	0x0800693d
 80068b4:	0800693d 	.word	0x0800693d
 80068b8:	0800693d 	.word	0x0800693d
 80068bc:	0800693d 	.word	0x0800693d
 80068c0:	0800693d 	.word	0x0800693d
 80068c4:	0800693d 	.word	0x0800693d
 80068c8:	08006925 	.word	0x08006925
 80068cc:	0800693d 	.word	0x0800693d
 80068d0:	0800693d 	.word	0x0800693d
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	0800693d 	.word	0x0800693d
 80068dc:	0800693d 	.word	0x0800693d
 80068e0:	0800693d 	.word	0x0800693d
 80068e4:	0800693d 	.word	0x0800693d
 80068e8:	0800692d 	.word	0x0800692d
 80068ec:	0800693d 	.word	0x0800693d
 80068f0:	0800693d 	.word	0x0800693d
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	0800693d 	.word	0x0800693d
 80068fc:	0800693d 	.word	0x0800693d
 8006900:	0800693d 	.word	0x0800693d
 8006904:	0800693d 	.word	0x0800693d
 8006908:	08006935 	.word	0x08006935
 800690c:	2301      	movs	r3, #1
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006912:	e1c0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e1bc      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e1b8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e1b4      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800692c:	2320      	movs	r3, #32
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e1b0      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e1ac      	b.n	8006c96 <UART_SetConfig+0x7ae>
 800693c:	2380      	movs	r3, #128	@ 0x80
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e1a8      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a75      	ldr	r2, [pc, #468]	@ (8006b20 <UART_SetConfig+0x638>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d130      	bne.n	80069b0 <UART_SetConfig+0x4c8>
 800694e:	4b73      	ldr	r3, [pc, #460]	@ (8006b1c <UART_SetConfig+0x634>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b05      	cmp	r3, #5
 8006958:	d826      	bhi.n	80069a8 <UART_SetConfig+0x4c0>
 800695a:	a201      	add	r2, pc, #4	@ (adr r2, 8006960 <UART_SetConfig+0x478>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006979 	.word	0x08006979
 8006964:	08006981 	.word	0x08006981
 8006968:	08006989 	.word	0x08006989
 800696c:	08006991 	.word	0x08006991
 8006970:	08006999 	.word	0x08006999
 8006974:	080069a1 	.word	0x080069a1
 8006978:	2300      	movs	r3, #0
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e18a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e186      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e182      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e17e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006998:	2320      	movs	r3, #32
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e17a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069a0:	2340      	movs	r3, #64	@ 0x40
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e176      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069a8:	2380      	movs	r3, #128	@ 0x80
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e172      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a5b      	ldr	r2, [pc, #364]	@ (8006b24 <UART_SetConfig+0x63c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d130      	bne.n	8006a1c <UART_SetConfig+0x534>
 80069ba:	4b58      	ldr	r3, [pc, #352]	@ (8006b1c <UART_SetConfig+0x634>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d826      	bhi.n	8006a14 <UART_SetConfig+0x52c>
 80069c6:	a201      	add	r2, pc, #4	@ (adr r2, 80069cc <UART_SetConfig+0x4e4>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e154      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e150      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e14c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e148      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a04:	2320      	movs	r3, #32
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e144      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a0c:	2340      	movs	r3, #64	@ 0x40
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e140      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a14:	2380      	movs	r3, #128	@ 0x80
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e13c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a41      	ldr	r2, [pc, #260]	@ (8006b28 <UART_SetConfig+0x640>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f040 8082 	bne.w	8006b2c <UART_SetConfig+0x644>
 8006a28:	4b3c      	ldr	r3, [pc, #240]	@ (8006b1c <UART_SetConfig+0x634>)
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a30:	2b28      	cmp	r3, #40	@ 0x28
 8006a32:	d86d      	bhi.n	8006b10 <UART_SetConfig+0x628>
 8006a34:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <UART_SetConfig+0x554>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006ae1 	.word	0x08006ae1
 8006a40:	08006b11 	.word	0x08006b11
 8006a44:	08006b11 	.word	0x08006b11
 8006a48:	08006b11 	.word	0x08006b11
 8006a4c:	08006b11 	.word	0x08006b11
 8006a50:	08006b11 	.word	0x08006b11
 8006a54:	08006b11 	.word	0x08006b11
 8006a58:	08006b11 	.word	0x08006b11
 8006a5c:	08006ae9 	.word	0x08006ae9
 8006a60:	08006b11 	.word	0x08006b11
 8006a64:	08006b11 	.word	0x08006b11
 8006a68:	08006b11 	.word	0x08006b11
 8006a6c:	08006b11 	.word	0x08006b11
 8006a70:	08006b11 	.word	0x08006b11
 8006a74:	08006b11 	.word	0x08006b11
 8006a78:	08006b11 	.word	0x08006b11
 8006a7c:	08006af1 	.word	0x08006af1
 8006a80:	08006b11 	.word	0x08006b11
 8006a84:	08006b11 	.word	0x08006b11
 8006a88:	08006b11 	.word	0x08006b11
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b11 	.word	0x08006b11
 8006a94:	08006b11 	.word	0x08006b11
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006af9 	.word	0x08006af9
 8006aa0:	08006b11 	.word	0x08006b11
 8006aa4:	08006b11 	.word	0x08006b11
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006b11 	.word	0x08006b11
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b01 	.word	0x08006b01
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b11 	.word	0x08006b11
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e0d6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aee:	e0d2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af6:	e0ce      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afe:	e0ca      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b00:	2320      	movs	r3, #32
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b06:	e0c6      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b08:	2340      	movs	r3, #64	@ 0x40
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0e:	e0c2      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b10:	2380      	movs	r3, #128	@ 0x80
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b16:	e0be      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006b18:	40011400 	.word	0x40011400
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	40007800 	.word	0x40007800
 8006b24:	40007c00 	.word	0x40007c00
 8006b28:	40011800 	.word	0x40011800
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4aad      	ldr	r2, [pc, #692]	@ (8006de8 <UART_SetConfig+0x900>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d176      	bne.n	8006c24 <UART_SetConfig+0x73c>
 8006b36:	4bad      	ldr	r3, [pc, #692]	@ (8006dec <UART_SetConfig+0x904>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b3e:	2b28      	cmp	r3, #40	@ 0x28
 8006b40:	d86c      	bhi.n	8006c1c <UART_SetConfig+0x734>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <UART_SetConfig+0x660>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006bed 	.word	0x08006bed
 8006b4c:	08006c1d 	.word	0x08006c1d
 8006b50:	08006c1d 	.word	0x08006c1d
 8006b54:	08006c1d 	.word	0x08006c1d
 8006b58:	08006c1d 	.word	0x08006c1d
 8006b5c:	08006c1d 	.word	0x08006c1d
 8006b60:	08006c1d 	.word	0x08006c1d
 8006b64:	08006c1d 	.word	0x08006c1d
 8006b68:	08006bf5 	.word	0x08006bf5
 8006b6c:	08006c1d 	.word	0x08006c1d
 8006b70:	08006c1d 	.word	0x08006c1d
 8006b74:	08006c1d 	.word	0x08006c1d
 8006b78:	08006c1d 	.word	0x08006c1d
 8006b7c:	08006c1d 	.word	0x08006c1d
 8006b80:	08006c1d 	.word	0x08006c1d
 8006b84:	08006c1d 	.word	0x08006c1d
 8006b88:	08006bfd 	.word	0x08006bfd
 8006b8c:	08006c1d 	.word	0x08006c1d
 8006b90:	08006c1d 	.word	0x08006c1d
 8006b94:	08006c1d 	.word	0x08006c1d
 8006b98:	08006c1d 	.word	0x08006c1d
 8006b9c:	08006c1d 	.word	0x08006c1d
 8006ba0:	08006c1d 	.word	0x08006c1d
 8006ba4:	08006c1d 	.word	0x08006c1d
 8006ba8:	08006c05 	.word	0x08006c05
 8006bac:	08006c1d 	.word	0x08006c1d
 8006bb0:	08006c1d 	.word	0x08006c1d
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006c1d 	.word	0x08006c1d
 8006bbc:	08006c1d 	.word	0x08006c1d
 8006bc0:	08006c1d 	.word	0x08006c1d
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c0d 	.word	0x08006c0d
 8006bcc:	08006c1d 	.word	0x08006c1d
 8006bd0:	08006c1d 	.word	0x08006c1d
 8006bd4:	08006c1d 	.word	0x08006c1d
 8006bd8:	08006c1d 	.word	0x08006c1d
 8006bdc:	08006c1d 	.word	0x08006c1d
 8006be0:	08006c1d 	.word	0x08006c1d
 8006be4:	08006c1d 	.word	0x08006c1d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e050      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e04c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e048      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e044      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e040      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c14:	2340      	movs	r3, #64	@ 0x40
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e03c      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c1c:	2380      	movs	r3, #128	@ 0x80
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e038      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a71      	ldr	r2, [pc, #452]	@ (8006df0 <UART_SetConfig+0x908>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d130      	bne.n	8006c90 <UART_SetConfig+0x7a8>
 8006c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8006dec <UART_SetConfig+0x904>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d826      	bhi.n	8006c88 <UART_SetConfig+0x7a0>
 8006c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <UART_SetConfig+0x758>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c59 	.word	0x08006c59
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	08006c69 	.word	0x08006c69
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	2302      	movs	r3, #2
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e01a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c60:	2304      	movs	r3, #4
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c66:	e016      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6e:	e012      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c76:	e00e      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c78:	2320      	movs	r3, #32
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e00a      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c80:	2340      	movs	r3, #64	@ 0x40
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e006      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c88:	2380      	movs	r3, #128	@ 0x80
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e002      	b.n	8006c96 <UART_SetConfig+0x7ae>
 8006c90:	2380      	movs	r3, #128	@ 0x80
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a55      	ldr	r2, [pc, #340]	@ (8006df0 <UART_SetConfig+0x908>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	f040 80f8 	bne.w	8006e92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ca2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	dc46      	bgt.n	8006d38 <UART_SetConfig+0x850>
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	db75      	blt.n	8006d9a <UART_SetConfig+0x8b2>
 8006cae:	3b02      	subs	r3, #2
 8006cb0:	2b1e      	cmp	r3, #30
 8006cb2:	d872      	bhi.n	8006d9a <UART_SetConfig+0x8b2>
 8006cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <UART_SetConfig+0x7d4>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006d3f 	.word	0x08006d3f
 8006cc0:	08006d9b 	.word	0x08006d9b
 8006cc4:	08006d47 	.word	0x08006d47
 8006cc8:	08006d9b 	.word	0x08006d9b
 8006ccc:	08006d9b 	.word	0x08006d9b
 8006cd0:	08006d9b 	.word	0x08006d9b
 8006cd4:	08006d57 	.word	0x08006d57
 8006cd8:	08006d9b 	.word	0x08006d9b
 8006cdc:	08006d9b 	.word	0x08006d9b
 8006ce0:	08006d9b 	.word	0x08006d9b
 8006ce4:	08006d9b 	.word	0x08006d9b
 8006ce8:	08006d9b 	.word	0x08006d9b
 8006cec:	08006d9b 	.word	0x08006d9b
 8006cf0:	08006d9b 	.word	0x08006d9b
 8006cf4:	08006d67 	.word	0x08006d67
 8006cf8:	08006d9b 	.word	0x08006d9b
 8006cfc:	08006d9b 	.word	0x08006d9b
 8006d00:	08006d9b 	.word	0x08006d9b
 8006d04:	08006d9b 	.word	0x08006d9b
 8006d08:	08006d9b 	.word	0x08006d9b
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006d9b 	.word	0x08006d9b
 8006d14:	08006d9b 	.word	0x08006d9b
 8006d18:	08006d9b 	.word	0x08006d9b
 8006d1c:	08006d9b 	.word	0x08006d9b
 8006d20:	08006d9b 	.word	0x08006d9b
 8006d24:	08006d9b 	.word	0x08006d9b
 8006d28:	08006d9b 	.word	0x08006d9b
 8006d2c:	08006d9b 	.word	0x08006d9b
 8006d30:	08006d9b 	.word	0x08006d9b
 8006d34:	08006d8d 	.word	0x08006d8d
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d02a      	beq.n	8006d92 <UART_SetConfig+0x8aa>
 8006d3c:	e02d      	b.n	8006d9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d3e:	f7fe fed3 	bl	8005ae8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d44:	e02f      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fee2 	bl	8005b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d54:	e027      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d56:	f107 0318 	add.w	r3, r7, #24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff f82e 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d64:	e01f      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d66:	4b21      	ldr	r3, [pc, #132]	@ (8006dec <UART_SetConfig+0x904>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d72:	4b1e      	ldr	r3, [pc, #120]	@ (8006dec <UART_SetConfig+0x904>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006df4 <UART_SetConfig+0x90c>)
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d84:	e00f      	b.n	8006da6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d86:	4b1b      	ldr	r3, [pc, #108]	@ (8006df4 <UART_SetConfig+0x90c>)
 8006d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d8a:	e00c      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006df8 <UART_SetConfig+0x910>)
 8006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d90:	e009      	b.n	8006da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d98:	e005      	b.n	8006da6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006da4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 81ee 	beq.w	800718a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	4a12      	ldr	r2, [pc, #72]	@ (8006dfc <UART_SetConfig+0x914>)
 8006db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d305      	bcc.n	8006dde <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d910      	bls.n	8006e00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006de4:	e1d1      	b.n	800718a <UART_SetConfig+0xca2>
 8006de6:	bf00      	nop
 8006de8:	40011c00 	.word	0x40011c00
 8006dec:	58024400 	.word	0x58024400
 8006df0:	58000c00 	.word	0x58000c00
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	003d0900 	.word	0x003d0900
 8006dfc:	0800bdbc 	.word	0x0800bdbc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e02:	2200      	movs	r2, #0
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	60fa      	str	r2, [r7, #12]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	4ac0      	ldr	r2, [pc, #768]	@ (8007110 <UART_SetConfig+0xc28>)
 8006e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2200      	movs	r2, #0
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e22:	f7f9 facd 	bl	80003c0 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	020b      	lsls	r3, r1, #8
 8006e38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e3c:	0202      	lsls	r2, r0, #8
 8006e3e:	6979      	ldr	r1, [r7, #20]
 8006e40:	6849      	ldr	r1, [r1, #4]
 8006e42:	0849      	lsrs	r1, r1, #1
 8006e44:	2000      	movs	r0, #0
 8006e46:	460c      	mov	r4, r1
 8006e48:	4605      	mov	r5, r0
 8006e4a:	eb12 0804 	adds.w	r8, r2, r4
 8006e4e:	eb43 0905 	adc.w	r9, r3, r5
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	469a      	mov	sl, r3
 8006e5a:	4693      	mov	fp, r2
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	465b      	mov	r3, fp
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 faac 	bl	80003c0 <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e76:	d308      	bcc.n	8006e8a <UART_SetConfig+0x9a2>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e7e:	d204      	bcs.n	8006e8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	e17f      	b.n	800718a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e90:	e17b      	b.n	800718a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e9a:	f040 80bd 	bne.w	8007018 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	dc48      	bgt.n	8006f38 <UART_SetConfig+0xa50>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	db7b      	blt.n	8006fa2 <UART_SetConfig+0xaba>
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d879      	bhi.n	8006fa2 <UART_SetConfig+0xaba>
 8006eae:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <UART_SetConfig+0x9cc>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006f3f 	.word	0x08006f3f
 8006eb8:	08006f47 	.word	0x08006f47
 8006ebc:	08006fa3 	.word	0x08006fa3
 8006ec0:	08006fa3 	.word	0x08006fa3
 8006ec4:	08006f4f 	.word	0x08006f4f
 8006ec8:	08006fa3 	.word	0x08006fa3
 8006ecc:	08006fa3 	.word	0x08006fa3
 8006ed0:	08006fa3 	.word	0x08006fa3
 8006ed4:	08006f5f 	.word	0x08006f5f
 8006ed8:	08006fa3 	.word	0x08006fa3
 8006edc:	08006fa3 	.word	0x08006fa3
 8006ee0:	08006fa3 	.word	0x08006fa3
 8006ee4:	08006fa3 	.word	0x08006fa3
 8006ee8:	08006fa3 	.word	0x08006fa3
 8006eec:	08006fa3 	.word	0x08006fa3
 8006ef0:	08006fa3 	.word	0x08006fa3
 8006ef4:	08006f6f 	.word	0x08006f6f
 8006ef8:	08006fa3 	.word	0x08006fa3
 8006efc:	08006fa3 	.word	0x08006fa3
 8006f00:	08006fa3 	.word	0x08006fa3
 8006f04:	08006fa3 	.word	0x08006fa3
 8006f08:	08006fa3 	.word	0x08006fa3
 8006f0c:	08006fa3 	.word	0x08006fa3
 8006f10:	08006fa3 	.word	0x08006fa3
 8006f14:	08006fa3 	.word	0x08006fa3
 8006f18:	08006fa3 	.word	0x08006fa3
 8006f1c:	08006fa3 	.word	0x08006fa3
 8006f20:	08006fa3 	.word	0x08006fa3
 8006f24:	08006fa3 	.word	0x08006fa3
 8006f28:	08006fa3 	.word	0x08006fa3
 8006f2c:	08006fa3 	.word	0x08006fa3
 8006f30:	08006fa3 	.word	0x08006fa3
 8006f34:	08006f95 	.word	0x08006f95
 8006f38:	2b40      	cmp	r3, #64	@ 0x40
 8006f3a:	d02e      	beq.n	8006f9a <UART_SetConfig+0xab2>
 8006f3c:	e031      	b.n	8006fa2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f7fd fc07 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006f42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f44:	e033      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f46:	f7fd fc19 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8006f4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006f4c:	e02f      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fdde 	bl	8005b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f5c:	e027      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f5e:	f107 0318 	add.w	r3, r7, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe ff2a 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6c:	e01f      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f6e:	4b69      	ldr	r3, [pc, #420]	@ (8007114 <UART_SetConfig+0xc2c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f7a:	4b66      	ldr	r3, [pc, #408]	@ (8007114 <UART_SetConfig+0xc2c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	4a64      	ldr	r2, [pc, #400]	@ (8007118 <UART_SetConfig+0xc30>)
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f8c:	e00f      	b.n	8006fae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006f8e:	4b62      	ldr	r3, [pc, #392]	@ (8007118 <UART_SetConfig+0xc30>)
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f92:	e00c      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f94:	4b61      	ldr	r3, [pc, #388]	@ (800711c <UART_SetConfig+0xc34>)
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f98:	e009      	b.n	8006fae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa0:	e005      	b.n	8006fae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 80ea 	beq.w	800718a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	4a55      	ldr	r2, [pc, #340]	@ (8007110 <UART_SetConfig+0xc28>)
 8006fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc8:	005a      	lsls	r2, r3, #1
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	441a      	add	r2, r3
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	d916      	bls.n	8007010 <UART_SetConfig+0xb28>
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe8:	d212      	bcs.n	8007010 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f023 030f 	bic.w	r3, r3, #15
 8006ff2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007002:	4313      	orrs	r3, r2
 8007004:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800700c:	60da      	str	r2, [r3, #12]
 800700e:	e0bc      	b.n	800718a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007016:	e0b8      	b.n	800718a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007018:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800701c:	2b20      	cmp	r3, #32
 800701e:	dc4b      	bgt.n	80070b8 <UART_SetConfig+0xbd0>
 8007020:	2b00      	cmp	r3, #0
 8007022:	f2c0 8087 	blt.w	8007134 <UART_SetConfig+0xc4c>
 8007026:	2b20      	cmp	r3, #32
 8007028:	f200 8084 	bhi.w	8007134 <UART_SetConfig+0xc4c>
 800702c:	a201      	add	r2, pc, #4	@ (adr r2, 8007034 <UART_SetConfig+0xb4c>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	080070bf 	.word	0x080070bf
 8007038:	080070c7 	.word	0x080070c7
 800703c:	08007135 	.word	0x08007135
 8007040:	08007135 	.word	0x08007135
 8007044:	080070cf 	.word	0x080070cf
 8007048:	08007135 	.word	0x08007135
 800704c:	08007135 	.word	0x08007135
 8007050:	08007135 	.word	0x08007135
 8007054:	080070df 	.word	0x080070df
 8007058:	08007135 	.word	0x08007135
 800705c:	08007135 	.word	0x08007135
 8007060:	08007135 	.word	0x08007135
 8007064:	08007135 	.word	0x08007135
 8007068:	08007135 	.word	0x08007135
 800706c:	08007135 	.word	0x08007135
 8007070:	08007135 	.word	0x08007135
 8007074:	080070ef 	.word	0x080070ef
 8007078:	08007135 	.word	0x08007135
 800707c:	08007135 	.word	0x08007135
 8007080:	08007135 	.word	0x08007135
 8007084:	08007135 	.word	0x08007135
 8007088:	08007135 	.word	0x08007135
 800708c:	08007135 	.word	0x08007135
 8007090:	08007135 	.word	0x08007135
 8007094:	08007135 	.word	0x08007135
 8007098:	08007135 	.word	0x08007135
 800709c:	08007135 	.word	0x08007135
 80070a0:	08007135 	.word	0x08007135
 80070a4:	08007135 	.word	0x08007135
 80070a8:	08007135 	.word	0x08007135
 80070ac:	08007135 	.word	0x08007135
 80070b0:	08007135 	.word	0x08007135
 80070b4:	08007127 	.word	0x08007127
 80070b8:	2b40      	cmp	r3, #64	@ 0x40
 80070ba:	d037      	beq.n	800712c <UART_SetConfig+0xc44>
 80070bc:	e03a      	b.n	8007134 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070be:	f7fd fb47 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80070c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070c4:	e03c      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c6:	f7fd fb59 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 80070ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070cc:	e038      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe fd1e 	bl	8005b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070dc:	e030      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070de:	f107 0318 	add.w	r3, r7, #24
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fe6a 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ec:	e028      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ee:	4b09      	ldr	r3, [pc, #36]	@ (8007114 <UART_SetConfig+0xc2c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070fa:	4b06      	ldr	r3, [pc, #24]	@ (8007114 <UART_SetConfig+0xc2c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	4a04      	ldr	r2, [pc, #16]	@ (8007118 <UART_SetConfig+0xc30>)
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800710c:	e018      	b.n	8007140 <UART_SetConfig+0xc58>
 800710e:	bf00      	nop
 8007110:	0800bdbc 	.word	0x0800bdbc
 8007114:	58024400 	.word	0x58024400
 8007118:	03d09000 	.word	0x03d09000
 800711c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007120:	4b24      	ldr	r3, [pc, #144]	@ (80071b4 <UART_SetConfig+0xccc>)
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007124:	e00c      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007126:	4b24      	ldr	r3, [pc, #144]	@ (80071b8 <UART_SetConfig+0xcd0>)
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712a:	e009      	b.n	8007140 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800712c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007132:	e005      	b.n	8007140 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800713e:	bf00      	nop
    }

    if (pclk != 0U)
 8007140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d021      	beq.n	800718a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	4a1c      	ldr	r2, [pc, #112]	@ (80071bc <UART_SetConfig+0xcd4>)
 800714c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007150:	461a      	mov	r2, r3
 8007152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007154:	fbb3 f2f2 	udiv	r2, r3, r2
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	441a      	add	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	2b0f      	cmp	r3, #15
 800716e:	d909      	bls.n	8007184 <UART_SetConfig+0xc9c>
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007176:	d205      	bcs.n	8007184 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	b29a      	uxth	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60da      	str	r2, [r3, #12]
 8007182:	e002      	b.n	800718a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2201      	movs	r2, #1
 800718e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2201      	movs	r2, #1
 8007196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2200      	movs	r2, #0
 800719e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071a6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3748      	adds	r7, #72	@ 0x48
 80071ae:	46bd      	mov	sp, r7
 80071b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b4:	03d09000 	.word	0x03d09000
 80071b8:	003d0900 	.word	0x003d0900
 80071bc:	0800bdbc 	.word	0x0800bdbc

080071c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	f003 0310 	and.w	r3, r3, #16
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01a      	beq.n	80072d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072be:	d10a      	bne.n	80072d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b098      	sub	sp, #96	@ 0x60
 8007308:	af02      	add	r7, sp, #8
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007314:	f7fa fcb0 	bl	8001c78 <HAL_GetTick>
 8007318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b08      	cmp	r3, #8
 8007326:	d12f      	bne.n	8007388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007330:	2200      	movs	r2, #0
 8007332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f88e 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d022      	beq.n	8007388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007356:	653b      	str	r3, [r7, #80]	@ 0x50
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007360:	647b      	str	r3, [r7, #68]	@ 0x44
 8007362:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800736e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2220      	movs	r2, #32
 8007378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e063      	b.n	8007450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b04      	cmp	r3, #4
 8007394:	d149      	bne.n	800742a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007396:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800739e:	2200      	movs	r2, #0
 80073a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f857 	bl	8007458 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d03c      	beq.n	800742a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	623b      	str	r3, [r7, #32]
   return(result);
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f023 0301 	bic.w	r3, r3, #1
 80073f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007402:	61fa      	str	r2, [r7, #28]
 8007404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	69b9      	ldr	r1, [r7, #24]
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	617b      	str	r3, [r7, #20]
   return(result);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e012      	b.n	8007450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3758      	adds	r7, #88	@ 0x58
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007468:	e04f      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d04b      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007472:	f7fa fc01 	bl	8001c78 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <UART_WaitOnFlagUntilTimeout+0x30>
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e04e      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d037      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0xb2>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b80      	cmp	r3, #128	@ 0x80
 800749e:	d034      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b40      	cmp	r3, #64	@ 0x40
 80074a4:	d031      	beq.n	800750a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d110      	bne.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2208      	movs	r2, #8
 80074ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f839 	bl	8007534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2208      	movs	r2, #8
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e029      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e4:	d111      	bne.n	800750a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f81f 	bl	8007534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e00f      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4013      	ands	r3, r2
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	429a      	cmp	r2, r3
 8007518:	bf0c      	ite	eq
 800751a:	2301      	moveq	r3, #1
 800751c:	2300      	movne	r3, #0
 800751e:	b2db      	uxtb	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	429a      	cmp	r2, r3
 8007526:	d0a0      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b095      	sub	sp, #84	@ 0x54
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800755a:	643b      	str	r3, [r7, #64]	@ 0x40
 800755c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007560:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	61fb      	str	r3, [r7, #28]
   return(result);
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	4b1e      	ldr	r3, [pc, #120]	@ (80075fc <UART_EndRxTransfer+0xc8>)
 8007582:	4013      	ands	r3, r2
 8007584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800758e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007590:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d118      	bne.n	80075dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 0310 	bic.w	r3, r3, #16
 80075be:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6979      	ldr	r1, [r7, #20]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	613b      	str	r3, [r7, #16]
   return(result);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075f0:	bf00      	nop
 80075f2:	3754      	adds	r7, #84	@ 0x54
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	effffffe 	.word	0xeffffffe

08007600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_UARTEx_DisableFifoMode+0x16>
 8007612:	2302      	movs	r3, #2
 8007614:	e027      	b.n	8007666 <HAL_UARTEx_DisableFifoMode+0x66>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2224      	movs	r2, #36	@ 0x24
 8007622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007686:	2302      	movs	r3, #2
 8007688:	e02d      	b.n	80076e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2224      	movs	r2, #36	@ 0x24
 8007696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f850 	bl	800776c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007702:	2302      	movs	r3, #2
 8007704:	e02d      	b.n	8007762 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2224      	movs	r2, #36	@ 0x24
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0201 	bic.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f812 	bl	800776c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007778:	2b00      	cmp	r3, #0
 800777a:	d108      	bne.n	800778e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800778c:	e031      	b.n	80077f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800778e:	2310      	movs	r3, #16
 8007790:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007792:	2310      	movs	r3, #16
 8007794:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	0e5b      	lsrs	r3, r3, #25
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	0f5b      	lsrs	r3, r3, #29
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	7b3a      	ldrb	r2, [r7, #12]
 80077ba:	4911      	ldr	r1, [pc, #68]	@ (8007800 <UARTEx_SetNbDataToProcess+0x94>)
 80077bc:	5c8a      	ldrb	r2, [r1, r2]
 80077be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077c2:	7b3a      	ldrb	r2, [r7, #12]
 80077c4:	490f      	ldr	r1, [pc, #60]	@ (8007804 <UARTEx_SetNbDataToProcess+0x98>)
 80077c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	7b7a      	ldrb	r2, [r7, #13]
 80077d8:	4909      	ldr	r1, [pc, #36]	@ (8007800 <UARTEx_SetNbDataToProcess+0x94>)
 80077da:	5c8a      	ldrb	r2, [r1, r2]
 80077dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077e0:	7b7a      	ldrb	r2, [r7, #13]
 80077e2:	4908      	ldr	r1, [pc, #32]	@ (8007804 <UARTEx_SetNbDataToProcess+0x98>)
 80077e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077f2:	bf00      	nop
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	0800bdd4 	.word	0x0800bdd4
 8007804:	0800bddc 	.word	0x0800bddc

08007808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007808:	b084      	sub	sp, #16
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	f107 001c 	add.w	r0, r7, #28
 8007816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800781a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800781e:	2b01      	cmp	r3, #1
 8007820:	d121      	bne.n	8007866 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007826:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	4b2c      	ldr	r3, [pc, #176]	@ (80078e4 <USB_CoreInit+0xdc>)
 8007834:	4013      	ands	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007846:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800784a:	2b01      	cmp	r3, #1
 800784c:	d105      	bne.n	800785a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fafa 	bl	8008e54 <USB_CoreReset>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	e01b      	b.n	800789e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 faee 	bl	8008e54 <USB_CoreReset>
 8007878:	4603      	mov	r3, r0
 800787a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800787c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007890:	e005      	b.n	800789e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800789e:	7fbb      	ldrb	r3, [r7, #30]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d116      	bne.n	80078d2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078b2:	4b0d      	ldr	r3, [pc, #52]	@ (80078e8 <USB_CoreInit+0xe0>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f043 0206 	orr.w	r2, r3, #6
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f043 0220 	orr.w	r2, r3, #32
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078de:	b004      	add	sp, #16
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	ffbdffbf 	.word	0xffbdffbf
 80078e8:	03ee0000 	.word	0x03ee0000

080078ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d165      	bne.n	80079cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4a41      	ldr	r2, [pc, #260]	@ (8007a08 <USB_SetTurnaroundTime+0x11c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d906      	bls.n	8007916 <USB_SetTurnaroundTime+0x2a>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4a40      	ldr	r2, [pc, #256]	@ (8007a0c <USB_SetTurnaroundTime+0x120>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d202      	bcs.n	8007916 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007910:	230f      	movs	r3, #15
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	e062      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	4a3c      	ldr	r2, [pc, #240]	@ (8007a0c <USB_SetTurnaroundTime+0x120>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d306      	bcc.n	800792c <USB_SetTurnaroundTime+0x40>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4a3b      	ldr	r2, [pc, #236]	@ (8007a10 <USB_SetTurnaroundTime+0x124>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d202      	bcs.n	800792c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007926:	230e      	movs	r3, #14
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	e057      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4a38      	ldr	r2, [pc, #224]	@ (8007a10 <USB_SetTurnaroundTime+0x124>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d306      	bcc.n	8007942 <USB_SetTurnaroundTime+0x56>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4a37      	ldr	r2, [pc, #220]	@ (8007a14 <USB_SetTurnaroundTime+0x128>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d202      	bcs.n	8007942 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800793c:	230d      	movs	r3, #13
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	e04c      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	4a33      	ldr	r2, [pc, #204]	@ (8007a14 <USB_SetTurnaroundTime+0x128>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d306      	bcc.n	8007958 <USB_SetTurnaroundTime+0x6c>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4a32      	ldr	r2, [pc, #200]	@ (8007a18 <USB_SetTurnaroundTime+0x12c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d802      	bhi.n	8007958 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007952:	230c      	movs	r3, #12
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	e041      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a18 <USB_SetTurnaroundTime+0x12c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d906      	bls.n	800796e <USB_SetTurnaroundTime+0x82>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4a2e      	ldr	r2, [pc, #184]	@ (8007a1c <USB_SetTurnaroundTime+0x130>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d802      	bhi.n	800796e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007968:	230b      	movs	r3, #11
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	e036      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	4a2a      	ldr	r2, [pc, #168]	@ (8007a1c <USB_SetTurnaroundTime+0x130>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d906      	bls.n	8007984 <USB_SetTurnaroundTime+0x98>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4a29      	ldr	r2, [pc, #164]	@ (8007a20 <USB_SetTurnaroundTime+0x134>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d802      	bhi.n	8007984 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800797e:	230a      	movs	r3, #10
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e02b      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4a26      	ldr	r2, [pc, #152]	@ (8007a20 <USB_SetTurnaroundTime+0x134>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d906      	bls.n	800799a <USB_SetTurnaroundTime+0xae>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4a25      	ldr	r2, [pc, #148]	@ (8007a24 <USB_SetTurnaroundTime+0x138>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d202      	bcs.n	800799a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007994:	2309      	movs	r3, #9
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e020      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4a21      	ldr	r2, [pc, #132]	@ (8007a24 <USB_SetTurnaroundTime+0x138>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d306      	bcc.n	80079b0 <USB_SetTurnaroundTime+0xc4>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4a20      	ldr	r2, [pc, #128]	@ (8007a28 <USB_SetTurnaroundTime+0x13c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d802      	bhi.n	80079b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80079aa:	2308      	movs	r3, #8
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	e015      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <USB_SetTurnaroundTime+0x13c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d906      	bls.n	80079c6 <USB_SetTurnaroundTime+0xda>
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <USB_SetTurnaroundTime+0x140>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d202      	bcs.n	80079c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079c0:	2307      	movs	r3, #7
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	e00a      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079c6:	2306      	movs	r3, #6
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e007      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079d2:	2309      	movs	r3, #9
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e001      	b.n	80079dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079d8:	2309      	movs	r3, #9
 80079da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	029b      	lsls	r3, r3, #10
 80079f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80079f4:	431a      	orrs	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	00d8acbf 	.word	0x00d8acbf
 8007a0c:	00e4e1c0 	.word	0x00e4e1c0
 8007a10:	00f42400 	.word	0x00f42400
 8007a14:	01067380 	.word	0x01067380
 8007a18:	011a499f 	.word	0x011a499f
 8007a1c:	01312cff 	.word	0x01312cff
 8007a20:	014ca43f 	.word	0x014ca43f
 8007a24:	016e3600 	.word	0x016e3600
 8007a28:	01a6ab1f 	.word	0x01a6ab1f
 8007a2c:	01e84800 	.word	0x01e84800

08007a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f023 0201 	bic.w	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d115      	bne.n	8007ac2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007aa2:	200a      	movs	r0, #10
 8007aa4:	f7fa f8f4 	bl	8001c90 <HAL_Delay>
      ms += 10U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	330a      	adds	r3, #10
 8007aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 f93f 	bl	8008d32 <USB_GetMode>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d01e      	beq.n	8007af8 <USB_SetCurrentMode+0x84>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2bc7      	cmp	r3, #199	@ 0xc7
 8007abe:	d9f0      	bls.n	8007aa2 <USB_SetCurrentMode+0x2e>
 8007ac0:	e01a      	b.n	8007af8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d115      	bne.n	8007af4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ad4:	200a      	movs	r0, #10
 8007ad6:	f7fa f8db 	bl	8001c90 <HAL_Delay>
      ms += 10U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	330a      	adds	r3, #10
 8007ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 f926 	bl	8008d32 <USB_GetMode>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <USB_SetCurrentMode+0x84>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2bc7      	cmp	r3, #199	@ 0xc7
 8007af0:	d9f0      	bls.n	8007ad4 <USB_SetCurrentMode+0x60>
 8007af2:	e001      	b.n	8007af8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e005      	b.n	8007b04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2bc8      	cmp	r3, #200	@ 0xc8
 8007afc:	d101      	bne.n	8007b02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b086      	sub	sp, #24
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	e009      	b.n	8007b40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	3340      	adds	r3, #64	@ 0x40
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b0e      	cmp	r3, #14
 8007b44:	d9f2      	bls.n	8007b2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d11c      	bne.n	8007b88 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b5c:	f043 0302 	orr.w	r3, r3, #2
 8007b60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b66:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e005      	b.n	8007b94 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ba0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10d      	bne.n	8007bc4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f968 	bl	8007e88 <USB_SetDevSpeed>
 8007bb8:	e008      	b.n	8007bcc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bba:	2101      	movs	r1, #1
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f963 	bl	8007e88 <USB_SetDevSpeed>
 8007bc2:	e003      	b.n	8007bcc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f95e 	bl	8007e88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bcc:	2110      	movs	r1, #16
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f8fa 	bl	8007dc8 <USB_FlushTxFifo>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f924 	bl	8007e2c <USB_FlushRxFifo>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c00:	461a      	mov	r2, r3
 8007c02:	2300      	movs	r3, #0
 8007c04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	e043      	b.n	8007ca0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c2e:	d118      	bne.n	8007c62 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10a      	bne.n	8007c4c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c42:	461a      	mov	r2, r3
 8007c44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	e013      	b.n	8007c74 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	e008      	b.n	8007c74 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2300      	movs	r3, #0
 8007c72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c92:	461a      	mov	r2, r3
 8007c94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]
 8007ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d3b5      	bcc.n	8007c18 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	e043      	b.n	8007d3a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cc8:	d118      	bne.n	8007cfc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	e013      	b.n	8007d0e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	e008      	b.n	8007d0e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3301      	adds	r3, #1
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d3e:	461a      	mov	r2, r3
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d3b5      	bcc.n	8007cb2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f043 0210 	orr.w	r2, r3, #16
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699a      	ldr	r2, [r3, #24]
 8007d80:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc0 <USB_DevInit+0x2b4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f043 0208 	orr.w	r2, r3, #8
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	4b06      	ldr	r3, [pc, #24]	@ (8007dc4 <USB_DevInit+0x2b8>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dbc:	b004      	add	sp, #16
 8007dbe:	4770      	bx	lr
 8007dc0:	803c3800 	.word	0x803c3800
 8007dc4:	40000004 	.word	0x40000004

08007dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007de2:	d901      	bls.n	8007de8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e01b      	b.n	8007e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	daf2      	bge.n	8007dd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	019b      	lsls	r3, r3, #6
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e0c:	d901      	bls.n	8007e12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e006      	b.n	8007e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d0f0      	beq.n	8007e00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e44:	d901      	bls.n	8007e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e018      	b.n	8007e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	daf2      	bge.n	8007e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2210      	movs	r2, #16
 8007e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e68:	d901      	bls.n	8007e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e006      	b.n	8007e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0310 	and.w	r3, r3, #16
 8007e76:	2b10      	cmp	r3, #16
 8007e78:	d0f0      	beq.n	8007e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 0306 	and.w	r3, r3, #6
 8007ed2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]
 8007ede:	e00a      	b.n	8007ef6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d002      	beq.n	8007eec <USB_GetDevSpeed+0x32>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b06      	cmp	r3, #6
 8007eea:	d102      	bne.n	8007ef2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007eec:	2302      	movs	r3, #2
 8007eee:	75fb      	strb	r3, [r7, #23]
 8007ef0:	e001      	b.n	8007ef6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ef2:	230f      	movs	r3, #15
 8007ef4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d139      	bne.n	8007f94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	2101      	movs	r1, #1
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	68f9      	ldr	r1, [r7, #12]
 8007f3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d153      	bne.n	8008000 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	791b      	ldrb	r3, [r3, #4]
 8007f72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	059b      	lsls	r3, r3, #22
 8007f7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	0159      	lsls	r1, r3, #5
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	440b      	add	r3, r1
 8007f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4b20      	ldr	r3, [pc, #128]	@ (8008010 <USB_ActivateEndpoint+0x10c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	600b      	str	r3, [r1, #0]
 8007f92:	e035      	b.n	8008000 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	68f9      	ldr	r1, [r7, #12]
 8007fae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d119      	bne.n	8008000 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	791b      	ldrb	r3, [r3, #4]
 8007fe6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	431a      	orrs	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	0159      	lsls	r1, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	440b      	add	r3, r1
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4b05      	ldr	r3, [pc, #20]	@ (8008010 <USB_ActivateEndpoint+0x10c>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	10008000 	.word	0x10008000

08008014 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d161      	bne.n	80080f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008046:	d11f      	bne.n	8008088 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	440a      	add	r2, r1
 800805e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008062:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008066:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	0151      	lsls	r1, r2, #5
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	440a      	add	r2, r1
 800807e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800808e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	2101      	movs	r1, #1
 800809a:	fa01 f303 	lsl.w	r3, r1, r3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	43db      	mvns	r3, r3
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080a8:	4013      	ands	r3, r2
 80080aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b2:	69da      	ldr	r2, [r3, #28]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 030f 	and.w	r3, r3, #15
 80080bc:	2101      	movs	r1, #1
 80080be:	fa01 f303 	lsl.w	r3, r1, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	43db      	mvns	r3, r3
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080cc:	4013      	ands	r3, r2
 80080ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	0159      	lsls	r1, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	440b      	add	r3, r1
 80080e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ea:	4619      	mov	r1, r3
 80080ec:	4b35      	ldr	r3, [pc, #212]	@ (80081c4 <USB_DeactivateEndpoint+0x1b0>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	600b      	str	r3, [r1, #0]
 80080f2:	e060      	b.n	80081b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800810a:	d11f      	bne.n	800814c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008126:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800812a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800814a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	2101      	movs	r1, #1
 800815e:	fa01 f303 	lsl.w	r3, r1, r3
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	43db      	mvns	r3, r3
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800816c:	4013      	ands	r3, r2
 800816e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	2101      	movs	r1, #1
 8008182:	fa01 f303 	lsl.w	r3, r1, r3
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	43db      	mvns	r3, r3
 800818a:	68f9      	ldr	r1, [r7, #12]
 800818c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008190:	4013      	ands	r3, r2
 8008192:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	0159      	lsls	r1, r3, #5
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	440b      	add	r3, r1
 80081aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ae:	4619      	mov	r1, r3
 80081b0:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <USB_DeactivateEndpoint+0x1b4>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	ec337800 	.word	0xec337800
 80081c8:	eff37800 	.word	0xeff37800

080081cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	@ 0x28
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	f040 8185 	bne.w	80084f8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d132      	bne.n	800825c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	0159      	lsls	r1, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	440b      	add	r3, r1
 800820c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008210:	4619      	mov	r1, r3
 8008212:	4ba7      	ldr	r3, [pc, #668]	@ (80084b0 <USB_EPStartXfer+0x2e4>)
 8008214:	4013      	ands	r3, r2
 8008216:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	440a      	add	r2, r1
 800822e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	0159      	lsls	r1, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	440b      	add	r3, r1
 800824e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008252:	4619      	mov	r1, r3
 8008254:	4b97      	ldr	r3, [pc, #604]	@ (80084b4 <USB_EPStartXfer+0x2e8>)
 8008256:	4013      	ands	r3, r2
 8008258:	610b      	str	r3, [r1, #16]
 800825a:	e097      	b.n	800838c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008268:	691a      	ldr	r2, [r3, #16]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	0159      	lsls	r1, r3, #5
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	440b      	add	r3, r1
 8008272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008276:	4619      	mov	r1, r3
 8008278:	4b8e      	ldr	r3, [pc, #568]	@ (80084b4 <USB_EPStartXfer+0x2e8>)
 800827a:	4013      	ands	r3, r2
 800827c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	0159      	lsls	r1, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	440b      	add	r3, r1
 8008294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008298:	4619      	mov	r1, r3
 800829a:	4b85      	ldr	r3, [pc, #532]	@ (80084b0 <USB_EPStartXfer+0x2e4>)
 800829c:	4013      	ands	r3, r2
 800829e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d11a      	bne.n	80082dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d903      	bls.n	80082ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082d8:	6113      	str	r3, [r2, #16]
 80082da:	e044      	b.n	8008366 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	691a      	ldr	r2, [r3, #16]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	1e5a      	subs	r2, r3, #1
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	8afb      	ldrh	r3, [r7, #22]
 8008302:	04d9      	lsls	r1, r3, #19
 8008304:	4b6c      	ldr	r3, [pc, #432]	@ (80084b8 <USB_EPStartXfer+0x2ec>)
 8008306:	400b      	ands	r3, r1
 8008308:	69b9      	ldr	r1, [r7, #24]
 800830a:	0148      	lsls	r0, r1, #5
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	4401      	add	r1, r0
 8008310:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008314:	4313      	orrs	r3, r2
 8008316:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d122      	bne.n	8008366 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800833a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800833e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834c:	691a      	ldr	r2, [r3, #16]
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	075b      	lsls	r3, r3, #29
 8008352:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008356:	69b9      	ldr	r1, [r7, #24]
 8008358:	0148      	lsls	r0, r1, #5
 800835a:	69f9      	ldr	r1, [r7, #28]
 800835c:	4401      	add	r1, r0
 800835e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008362:	4313      	orrs	r3, r2
 8008364:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800837c:	69b9      	ldr	r1, [r7, #24]
 800837e:	0148      	lsls	r0, r1, #5
 8008380:	69f9      	ldr	r1, [r7, #28]
 8008382:	4401      	add	r1, r0
 8008384:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008388:	4313      	orrs	r3, r2
 800838a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d14b      	bne.n	800842a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a6:	461a      	mov	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	791b      	ldrb	r3, [r3, #4]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d128      	bne.n	8008408 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d110      	bne.n	80083e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	e00f      	b.n	8008408 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008406:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008422:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	e169      	b.n	80086fe <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008444:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008448:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	791b      	ldrb	r3, [r3, #4]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d015      	beq.n	800847e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 8151 	beq.w	80086fe <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	2101      	movs	r1, #1
 800846e:	fa01 f303 	lsl.w	r3, r1, r3
 8008472:	69f9      	ldr	r1, [r7, #28]
 8008474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008478:	4313      	orrs	r3, r2
 800847a:	634b      	str	r3, [r1, #52]	@ 0x34
 800847c:	e13f      	b.n	80086fe <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800848a:	2b00      	cmp	r3, #0
 800848c:	d116      	bne.n	80084bc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	0151      	lsls	r1, r2, #5
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	440a      	add	r2, r1
 80084a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	e015      	b.n	80084dc <USB_EPStartXfer+0x310>
 80084b0:	e007ffff 	.word	0xe007ffff
 80084b4:	fff80000 	.word	0xfff80000
 80084b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	68d9      	ldr	r1, [r3, #12]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	781a      	ldrb	r2, [r3, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	b298      	uxth	r0, r3
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	4603      	mov	r3, r0
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f9b9 	bl	8008868 <USB_WritePacket>
 80084f6:	e102      	b.n	80086fe <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	0159      	lsls	r1, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	440b      	add	r3, r1
 800850e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008512:	4619      	mov	r1, r3
 8008514:	4b7c      	ldr	r3, [pc, #496]	@ (8008708 <USB_EPStartXfer+0x53c>)
 8008516:	4013      	ands	r3, r2
 8008518:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	0159      	lsls	r1, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	440b      	add	r3, r1
 8008530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008534:	4619      	mov	r1, r3
 8008536:	4b75      	ldr	r3, [pc, #468]	@ (800870c <USB_EPStartXfer+0x540>)
 8008538:	4013      	ands	r3, r2
 800853a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d12f      	bne.n	80085a2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008570:	69b9      	ldr	r1, [r7, #24]
 8008572:	0148      	lsls	r0, r1, #5
 8008574:	69f9      	ldr	r1, [r7, #28]
 8008576:	4401      	add	r1, r0
 8008578:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800857c:	4313      	orrs	r3, r2
 800857e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800859a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800859e:	6113      	str	r3, [r2, #16]
 80085a0:	e05f      	b.n	8008662 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d123      	bne.n	80085f2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b6:	691a      	ldr	r2, [r3, #16]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	0148      	lsls	r0, r1, #5
 80085c4:	69f9      	ldr	r1, [r7, #28]
 80085c6:	4401      	add	r1, r0
 80085c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085cc:	4313      	orrs	r3, r2
 80085ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085ee:	6113      	str	r3, [r2, #16]
 80085f0:	e037      	b.n	8008662 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	4413      	add	r3, r2
 80085fc:	1e5a      	subs	r2, r3, #1
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	8afa      	ldrh	r2, [r7, #22]
 800860e:	fb03 f202 	mul.w	r2, r3, r2
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008622:	691a      	ldr	r2, [r3, #16]
 8008624:	8afb      	ldrh	r3, [r7, #22]
 8008626:	04d9      	lsls	r1, r3, #19
 8008628:	4b39      	ldr	r3, [pc, #228]	@ (8008710 <USB_EPStartXfer+0x544>)
 800862a:	400b      	ands	r3, r1
 800862c:	69b9      	ldr	r1, [r7, #24]
 800862e:	0148      	lsls	r0, r1, #5
 8008630:	69f9      	ldr	r1, [r7, #28]
 8008632:	4401      	add	r1, r0
 8008634:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008638:	4313      	orrs	r3, r2
 800863a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008648:	691a      	ldr	r2, [r3, #16]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008652:	69b9      	ldr	r1, [r7, #24]
 8008654:	0148      	lsls	r0, r1, #5
 8008656:	69f9      	ldr	r1, [r7, #28]
 8008658:	4401      	add	r1, r0
 800865a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800865e:	4313      	orrs	r3, r2
 8008660:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d10d      	bne.n	8008684 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	68d9      	ldr	r1, [r3, #12]
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008680:	460a      	mov	r2, r1
 8008682:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	791b      	ldrb	r3, [r3, #4]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d128      	bne.n	80086de <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008698:	2b00      	cmp	r3, #0
 800869a:	d110      	bne.n	80086be <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	e00f      	b.n	80086de <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086f8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80086fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3720      	adds	r7, #32
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	fff80000 	.word	0xfff80000
 800870c:	e007ffff 	.word	0xe007ffff
 8008710:	1ff80000 	.word	0x1ff80000

08008714 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d14a      	bne.n	80087c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800874a:	f040 8086 	bne.w	800885a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	440a      	add	r2, r1
 8008768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800876c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008770:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d902      	bls.n	80087ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
          break;
 80087aa:	e056      	b.n	800885a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087c4:	d0e7      	beq.n	8008796 <USB_EPStopXfer+0x82>
 80087c6:	e048      	b.n	800885a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087e0:	d13b      	bne.n	800885a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008800:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008804:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	7812      	ldrb	r2, [r2, #0]
 800881a:	0151      	lsls	r1, r2, #5
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	440a      	add	r2, r1
 8008820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008828:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008836:	4293      	cmp	r3, r2
 8008838:	d902      	bls.n	8008840 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
          break;
 800883e:	e00c      	b.n	800885a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008858:	d0e7      	beq.n	800882a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	@ 0x24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4611      	mov	r1, r2
 8008874:	461a      	mov	r2, r3
 8008876:	460b      	mov	r3, r1
 8008878:	71fb      	strb	r3, [r7, #7]
 800887a:	4613      	mov	r3, r2
 800887c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d123      	bne.n	80088d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800888e:	88bb      	ldrh	r3, [r7, #4]
 8008890:	3303      	adds	r3, #3
 8008892:	089b      	lsrs	r3, r3, #2
 8008894:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008896:	2300      	movs	r3, #0
 8008898:	61bb      	str	r3, [r7, #24]
 800889a:	e018      	b.n	80088ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	031a      	lsls	r2, r3, #12
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088a8:	461a      	mov	r2, r3
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	3301      	adds	r3, #1
 80088b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3301      	adds	r3, #1
 80088ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	3301      	adds	r3, #1
 80088c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61bb      	str	r3, [r7, #24]
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d3e2      	bcc.n	800889c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3724      	adds	r7, #36	@ 0x24
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b08b      	sub	sp, #44	@ 0x2c
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	089b      	lsrs	r3, r3, #2
 80088fe:	b29b      	uxth	r3, r3
 8008900:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800890a:	2300      	movs	r3, #0
 800890c:	623b      	str	r3, [r7, #32]
 800890e:	e014      	b.n	800893a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891a:	601a      	str	r2, [r3, #0]
    pDest++;
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	3301      	adds	r3, #1
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	3301      	adds	r3, #1
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	3301      	adds	r3, #1
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	3301      	adds	r3, #1
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	3301      	adds	r3, #1
 8008938:	623b      	str	r3, [r7, #32]
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	429a      	cmp	r2, r3
 8008940:	d3e6      	bcc.n	8008910 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008942:	8bfb      	ldrh	r3, [r7, #30]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01e      	beq.n	8008986 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008952:	461a      	mov	r2, r3
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	6812      	ldr	r2, [r2, #0]
 800895a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	b2da      	uxtb	r2, r3
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	701a      	strb	r2, [r3, #0]
      i++;
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	3301      	adds	r3, #1
 8008972:	623b      	str	r3, [r7, #32]
      pDest++;
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	3301      	adds	r3, #1
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800897a:	8bfb      	ldrh	r3, [r7, #30]
 800897c:	3b01      	subs	r3, #1
 800897e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008980:	8bfb      	ldrh	r3, [r7, #30]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ea      	bne.n	800895c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008988:	4618      	mov	r0, r3
 800898a:	372c      	adds	r7, #44	@ 0x2c
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d12c      	bne.n	8008a0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	db12      	blt.n	80089e8 <USB_EPSetStall+0x54>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00f      	beq.n	80089e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	0151      	lsls	r1, r2, #5
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	440a      	add	r2, r1
 80089de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	e02b      	b.n	8008a62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	db12      	blt.n	8008a42 <USB_EPSetStall+0xae>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00f      	beq.n	8008a42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	0151      	lsls	r1, r2, #5
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	440a      	add	r2, r1
 8008a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d128      	bne.n	8008ade <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008aaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d003      	beq.n	8008abc <USB_EPClearStall+0x4c>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	791b      	ldrb	r3, [r3, #4]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d138      	bne.n	8008b2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e027      	b.n	8008b2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008afc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	791b      	ldrb	r3, [r3, #4]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d003      	beq.n	8008b0e <USB_EPClearStall+0x9e>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	791b      	ldrb	r3, [r3, #4]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d10f      	bne.n	8008b2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b76:	4313      	orrs	r3, r2
 8008b78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ba2:	f023 0303 	bic.w	r3, r3, #3
 8008ba6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bb6:	f023 0302 	bic.w	r3, r3, #2
 8008bba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bf8:	f043 0302 	orr.w	r3, r3, #2
 8008bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4013      	ands	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c24:	68fb      	ldr	r3, [r7, #12]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	4013      	ands	r3, r2
 8008c54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	0c1b      	lsrs	r3, r3, #16
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	4013      	ands	r3, r2
 8008c88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	b29b      	uxth	r3, r3
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b087      	sub	sp, #28
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	fa22 f303 	lsr.w	r3, r2, r3
 8008d06:	01db      	lsls	r3, r3, #7
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4013      	ands	r3, r2
 8008d22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d24:	68bb      	ldr	r3, [r7, #8]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	f003 0301 	and.w	r3, r3, #1
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4b09      	ldr	r3, [pc, #36]	@ (8008d94 <USB_ActivateSetup+0x44>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	fffff800 	.word	0xfffff800

08008d98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	460b      	mov	r3, r1
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	333c      	adds	r3, #60	@ 0x3c
 8008dae:	3304      	adds	r3, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	4a26      	ldr	r2, [pc, #152]	@ (8008e50 <USB_EP0_OutStart+0xb8>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d90a      	bls.n	8008dd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dcc:	d101      	bne.n	8008dd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e037      	b.n	8008e42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd8:	461a      	mov	r2, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e00:	f043 0318 	orr.w	r3, r3, #24
 8008e04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e14:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e1a:	7afb      	ldrb	r3, [r7, #11]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d10f      	bne.n	8008e40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e26:	461a      	mov	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e3a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	4f54300a 	.word	0x4f54300a

08008e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e6c:	d901      	bls.n	8008e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e01b      	b.n	8008eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	daf2      	bge.n	8008e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f043 0201 	orr.w	r2, r3, #1
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e96:	d901      	bls.n	8008e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e006      	b.n	8008eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d0f0      	beq.n	8008e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
	...

08008eb8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008ec4:	2010      	movs	r0, #16
 8008ec6:	f002 f9d9 	bl	800b27c <USBD_static_malloc>
 8008eca:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d109      	bne.n	8008ee6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	32b0      	adds	r2, #176	@ 0xb0
 8008edc:	2100      	movs	r1, #0
 8008ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e048      	b.n	8008f78 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	32b0      	adds	r2, #176	@ 0xb0
 8008ef0:	68f9      	ldr	r1, [r7, #12]
 8008ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	32b0      	adds	r2, #176	@ 0xb0
 8008f00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7c1b      	ldrb	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10d      	bne.n	8008f2e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008f12:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <USBD_HID_Init+0xc8>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	f003 020f 	and.w	r2, r3, #15
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	3326      	adds	r3, #38	@ 0x26
 8008f28:	2207      	movs	r2, #7
 8008f2a:	801a      	strh	r2, [r3, #0]
 8008f2c:	e00c      	b.n	8008f48 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008f2e:	4b14      	ldr	r3, [pc, #80]	@ (8008f80 <USBD_HID_Init+0xc8>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	f003 020f 	and.w	r2, r3, #15
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	3326      	adds	r3, #38	@ 0x26
 8008f44:	220a      	movs	r2, #10
 8008f46:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008f48:	4b0d      	ldr	r3, [pc, #52]	@ (8008f80 <USBD_HID_Init+0xc8>)
 8008f4a:	7819      	ldrb	r1, [r3, #0]
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	2203      	movs	r2, #3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f002 f882 	bl	800b05a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008f56:	4b0a      	ldr	r3, [pc, #40]	@ (8008f80 <USBD_HID_Init+0xc8>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	f003 020f 	and.w	r2, r3, #15
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	3324      	adds	r3, #36	@ 0x24
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	24000273 	.word	0x24000273

08008f84 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008f90:	4b1f      	ldr	r3, [pc, #124]	@ (8009010 <USBD_HID_DeInit+0x8c>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f002 f885 	bl	800b0a6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009010 <USBD_HID_DeInit+0x8c>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f003 020f 	and.w	r2, r3, #15
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	440b      	add	r3, r1
 8008fb0:	3324      	adds	r3, #36	@ 0x24
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008fb6:	4b16      	ldr	r3, [pc, #88]	@ (8009010 <USBD_HID_DeInit+0x8c>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	f003 020f 	and.w	r2, r3, #15
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	3326      	adds	r3, #38	@ 0x26
 8008fcc:	2200      	movs	r2, #0
 8008fce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	32b0      	adds	r2, #176	@ 0xb0
 8008fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d011      	beq.n	8009006 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	32b0      	adds	r2, #176	@ 0xb0
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f002 f951 	bl	800b298 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	32b0      	adds	r2, #176	@ 0xb0
 8009000:	2100      	movs	r1, #0
 8009002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	24000273 	.word	0x24000273

08009014 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	32b0      	adds	r2, #176	@ 0xb0
 8009028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	e0e8      	b.n	8009212 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009048:	2b00      	cmp	r3, #0
 800904a:	d046      	beq.n	80090da <USBD_HID_Setup+0xc6>
 800904c:	2b20      	cmp	r3, #32
 800904e:	f040 80d8 	bne.w	8009202 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	3b02      	subs	r3, #2
 8009058:	2b09      	cmp	r3, #9
 800905a:	d836      	bhi.n	80090ca <USBD_HID_Setup+0xb6>
 800905c:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <USBD_HID_Setup+0x50>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	080090bb 	.word	0x080090bb
 8009068:	0800909b 	.word	0x0800909b
 800906c:	080090cb 	.word	0x080090cb
 8009070:	080090cb 	.word	0x080090cb
 8009074:	080090cb 	.word	0x080090cb
 8009078:	080090cb 	.word	0x080090cb
 800907c:	080090cb 	.word	0x080090cb
 8009080:	080090cb 	.word	0x080090cb
 8009084:	080090a9 	.word	0x080090a9
 8009088:	0800908d 	.word	0x0800908d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	601a      	str	r2, [r3, #0]
          break;
 8009098:	e01e      	b.n	80090d8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f001 fc0f 	bl	800a8c4 <USBD_CtlSendData>
          break;
 80090a6:	e017      	b.n	80090d8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	885b      	ldrh	r3, [r3, #2]
 80090ac:	0a1b      	lsrs	r3, r3, #8
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	605a      	str	r2, [r3, #4]
          break;
 80090b8:	e00e      	b.n	80090d8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3304      	adds	r3, #4
 80090be:	2201      	movs	r2, #1
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fbfe 	bl	800a8c4 <USBD_CtlSendData>
          break;
 80090c8:	e006      	b.n	80090d8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 fb7c 	bl	800a7ca <USBD_CtlError>
          ret = USBD_FAIL;
 80090d2:	2303      	movs	r3, #3
 80090d4:	75fb      	strb	r3, [r7, #23]
          break;
 80090d6:	bf00      	nop
      }
      break;
 80090d8:	e09a      	b.n	8009210 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b0b      	cmp	r3, #11
 80090e0:	f200 8086 	bhi.w	80091f0 <USBD_HID_Setup+0x1dc>
 80090e4:	a201      	add	r2, pc, #4	@ (adr r2, 80090ec <USBD_HID_Setup+0xd8>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	0800911d 	.word	0x0800911d
 80090f0:	080091ff 	.word	0x080091ff
 80090f4:	080091f1 	.word	0x080091f1
 80090f8:	080091f1 	.word	0x080091f1
 80090fc:	080091f1 	.word	0x080091f1
 8009100:	080091f1 	.word	0x080091f1
 8009104:	08009147 	.word	0x08009147
 8009108:	080091f1 	.word	0x080091f1
 800910c:	080091f1 	.word	0x080091f1
 8009110:	080091f1 	.word	0x080091f1
 8009114:	0800919f 	.word	0x0800919f
 8009118:	080091c9 	.word	0x080091c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b03      	cmp	r3, #3
 8009126:	d107      	bne.n	8009138 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009128:	f107 030a 	add.w	r3, r7, #10
 800912c:	2202      	movs	r2, #2
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fbc7 	bl	800a8c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009136:	e063      	b.n	8009200 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 fb45 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	75fb      	strb	r3, [r7, #23]
          break;
 8009144:	e05c      	b.n	8009200 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	0a1b      	lsrs	r3, r3, #8
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b22      	cmp	r3, #34	@ 0x22
 8009150:	d108      	bne.n	8009164 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	88db      	ldrh	r3, [r3, #6]
 8009156:	2b3f      	cmp	r3, #63	@ 0x3f
 8009158:	bf28      	it	cs
 800915a:	233f      	movcs	r3, #63	@ 0x3f
 800915c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800915e:	4b2f      	ldr	r3, [pc, #188]	@ (800921c <USBD_HID_Setup+0x208>)
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	e015      	b.n	8009190 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	885b      	ldrh	r3, [r3, #2]
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b21      	cmp	r3, #33	@ 0x21
 800916e:	d108      	bne.n	8009182 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009170:	4b2b      	ldr	r3, [pc, #172]	@ (8009220 <USBD_HID_Setup+0x20c>)
 8009172:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	88db      	ldrh	r3, [r3, #6]
 8009178:	2b09      	cmp	r3, #9
 800917a:	bf28      	it	cs
 800917c:	2309      	movcs	r3, #9
 800917e:	82bb      	strh	r3, [r7, #20]
 8009180:	e006      	b.n	8009190 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fb20 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	75fb      	strb	r3, [r7, #23]
            break;
 800918e:	e037      	b.n	8009200 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009190:	8abb      	ldrh	r3, [r7, #20]
 8009192:	461a      	mov	r2, r3
 8009194:	6939      	ldr	r1, [r7, #16]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 fb94 	bl	800a8c4 <USBD_CtlSendData>
          break;
 800919c:	e030      	b.n	8009200 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d107      	bne.n	80091ba <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3308      	adds	r3, #8
 80091ae:	2201      	movs	r2, #1
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 fb86 	bl	800a8c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091b8:	e022      	b.n	8009200 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 fb04 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 80091c2:	2303      	movs	r3, #3
 80091c4:	75fb      	strb	r3, [r7, #23]
          break;
 80091c6:	e01b      	b.n	8009200 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d106      	bne.n	80091e2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	885b      	ldrh	r3, [r3, #2]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091e0:	e00e      	b.n	8009200 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 faf0 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	75fb      	strb	r3, [r7, #23]
          break;
 80091ee:	e007      	b.n	8009200 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fae9 	bl	800a7ca <USBD_CtlError>
          ret = USBD_FAIL;
 80091f8:	2303      	movs	r3, #3
 80091fa:	75fb      	strb	r3, [r7, #23]
          break;
 80091fc:	e000      	b.n	8009200 <USBD_HID_Setup+0x1ec>
          break;
 80091fe:	bf00      	nop
      }
      break;
 8009200:	e006      	b.n	8009210 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 fae0 	bl	800a7ca <USBD_CtlError>
      ret = USBD_FAIL;
 800920a:	2303      	movs	r3, #3
 800920c:	75fb      	strb	r3, [r7, #23]
      break;
 800920e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	24000234 	.word	0x24000234
 8009220:	2400021c 	.word	0x2400021c

08009224 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	32b0      	adds	r2, #176	@ 0xb0
 800923c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009240:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009248:	2303      	movs	r3, #3
 800924a:	e014      	b.n	8009276 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b03      	cmp	r3, #3
 8009256:	d10d      	bne.n	8009274 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	7b1b      	ldrb	r3, [r3, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2201      	movs	r2, #1
 8009264:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8009266:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <USBD_HID_SendReport+0x5c>)
 8009268:	7819      	ldrb	r1, [r3, #0]
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f001 ffc1 	bl	800b1f6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	24000273 	.word	0x24000273

08009284 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800928c:	2181      	movs	r1, #129	@ 0x81
 800928e:	4809      	ldr	r0, [pc, #36]	@ (80092b4 <USBD_HID_GetFSCfgDesc+0x30>)
 8009290:	f000 fc3b 	bl	8009b0a <USBD_GetEpDesc>
 8009294:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	220a      	movs	r2, #10
 80092a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2222      	movs	r2, #34	@ 0x22
 80092a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80092a8:	4b02      	ldr	r3, [pc, #8]	@ (80092b4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	240001f8 	.word	0x240001f8

080092b8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80092c0:	2181      	movs	r1, #129	@ 0x81
 80092c2:	4809      	ldr	r0, [pc, #36]	@ (80092e8 <USBD_HID_GetHSCfgDesc+0x30>)
 80092c4:	f000 fc21 	bl	8009b0a <USBD_GetEpDesc>
 80092c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2207      	movs	r2, #7
 80092d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2222      	movs	r2, #34	@ 0x22
 80092da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80092dc:	4b02      	ldr	r3, [pc, #8]	@ (80092e8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	240001f8 	.word	0x240001f8

080092ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80092f4:	2181      	movs	r1, #129	@ 0x81
 80092f6:	4809      	ldr	r0, [pc, #36]	@ (800931c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80092f8:	f000 fc07 	bl	8009b0a <USBD_GetEpDesc>
 80092fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	220a      	movs	r2, #10
 8009308:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2222      	movs	r2, #34	@ 0x22
 800930e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009310:	4b02      	ldr	r3, [pc, #8]	@ (800931c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	240001f8 	.word	0x240001f8

08009320 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32b0      	adds	r2, #176	@ 0xb0
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	2200      	movs	r2, #0
 800933c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	220a      	movs	r2, #10
 8009358:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800935a:	4b03      	ldr	r3, [pc, #12]	@ (8009368 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	24000228 	.word	0x24000228

0800936c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009380:	2303      	movs	r3, #3
 8009382:	e01f      	b.n	80093c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	79fa      	ldrb	r2, [r7, #7]
 80093b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f001 fde1 	bl	800af80 <USBD_LL_Init>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e025      	b.n	8009430 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	32ae      	adds	r2, #174	@ 0xae
 80093f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00f      	beq.n	8009420 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	32ae      	adds	r2, #174	@ 0xae
 800940a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	f107 020e 	add.w	r2, r7, #14
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	4602      	mov	r2, r0
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 fdef 	bl	800b024 <USBD_LL_Start>
 8009446:	4603      	mov	r3, r0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d009      	beq.n	8009494 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	4611      	mov	r1, r2
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	4611      	mov	r1, r2
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80094c4:	2303      	movs	r3, #3
 80094c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 f936 	bl	800a756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009506:	f003 031f 	and.w	r3, r3, #31
 800950a:	2b02      	cmp	r3, #2
 800950c:	d01a      	beq.n	8009544 <USBD_LL_SetupStage+0x72>
 800950e:	2b02      	cmp	r3, #2
 8009510:	d822      	bhi.n	8009558 <USBD_LL_SetupStage+0x86>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <USBD_LL_SetupStage+0x4a>
 8009516:	2b01      	cmp	r3, #1
 8009518:	d00a      	beq.n	8009530 <USBD_LL_SetupStage+0x5e>
 800951a:	e01d      	b.n	8009558 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb63 	bl	8009bf0 <USBD_StdDevReq>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]
      break;
 800952e:	e020      	b.n	8009572 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fbcb 	bl	8009cd4 <USBD_StdItfReq>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
      break;
 8009542:	e016      	b.n	8009572 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fc2d 	bl	8009dac <USBD_StdEPReq>
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]
      break;
 8009556:	e00c      	b.n	8009572 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800955e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009562:	b2db      	uxtb	r3, r3
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 fdbc 	bl	800b0e4 <USBD_LL_StallEP>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
      break;
 8009570:	bf00      	nop
  }

  return ret;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	460b      	mov	r3, r1
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800958e:	7afb      	ldrb	r3, [r7, #11]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d16e      	bne.n	8009672 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800959a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	f040 8098 	bne.w	80096d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d913      	bls.n	80095dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	1ad2      	subs	r2, r2, r3
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	4293      	cmp	r3, r2
 80095cc:	bf28      	it	cs
 80095ce:	4613      	movcs	r3, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f001 f9a1 	bl	800a91c <USBD_CtlContinueRx>
 80095da:	e07d      	b.n	80096d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095e2:	f003 031f 	and.w	r3, r3, #31
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d014      	beq.n	8009614 <USBD_LL_DataOutStage+0x98>
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d81d      	bhi.n	800962a <USBD_LL_DataOutStage+0xae>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <USBD_LL_DataOutStage+0x7c>
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d003      	beq.n	80095fe <USBD_LL_DataOutStage+0x82>
 80095f6:	e018      	b.n	800962a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	75bb      	strb	r3, [r7, #22]
            break;
 80095fc:	e018      	b.n	8009630 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009604:	b2db      	uxtb	r3, r3
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 fa64 	bl	8009ad6 <USBD_CoreFindIF>
 800960e:	4603      	mov	r3, r0
 8009610:	75bb      	strb	r3, [r7, #22]
            break;
 8009612:	e00d      	b.n	8009630 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4619      	mov	r1, r3
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fa66 	bl	8009af0 <USBD_CoreFindEP>
 8009624:	4603      	mov	r3, r0
 8009626:	75bb      	strb	r3, [r7, #22]
            break;
 8009628:	e002      	b.n	8009630 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	75bb      	strb	r3, [r7, #22]
            break;
 800962e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009630:	7dbb      	ldrb	r3, [r7, #22]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d119      	bne.n	800966a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b03      	cmp	r3, #3
 8009640:	d113      	bne.n	800966a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009642:	7dba      	ldrb	r2, [r7, #22]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	32ae      	adds	r2, #174	@ 0xae
 8009648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009652:	7dba      	ldrb	r2, [r7, #22]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800965a:	7dba      	ldrb	r2, [r7, #22]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	32ae      	adds	r2, #174	@ 0xae
 8009660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f001 f967 	bl	800a93e <USBD_CtlSendStatus>
 8009670:	e032      	b.n	80096d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009672:	7afb      	ldrb	r3, [r7, #11]
 8009674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009678:	b2db      	uxtb	r3, r3
 800967a:	4619      	mov	r1, r3
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 fa37 	bl	8009af0 <USBD_CoreFindEP>
 8009682:	4603      	mov	r3, r0
 8009684:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009686:	7dbb      	ldrb	r3, [r7, #22]
 8009688:	2bff      	cmp	r3, #255	@ 0xff
 800968a:	d025      	beq.n	80096d8 <USBD_LL_DataOutStage+0x15c>
 800968c:	7dbb      	ldrb	r3, [r7, #22]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d122      	bne.n	80096d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d117      	bne.n	80096ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800969e:	7dba      	ldrb	r2, [r7, #22]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	32ae      	adds	r2, #174	@ 0xae
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00f      	beq.n	80096ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80096ae:	7dba      	ldrb	r2, [r7, #22]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80096b6:	7dba      	ldrb	r2, [r7, #22]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	32ae      	adds	r2, #174	@ 0xae
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	7afa      	ldrb	r2, [r7, #11]
 80096c4:	4611      	mov	r1, r2
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	4798      	blx	r3
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	e000      	b.n	80096da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	460b      	mov	r3, r1
 80096ec:	607a      	str	r2, [r7, #4]
 80096ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d16f      	bne.n	80097d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3314      	adds	r3, #20
 80096fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009702:	2b02      	cmp	r3, #2
 8009704:	d15a      	bne.n	80097bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d914      	bls.n	800973c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	461a      	mov	r2, r3
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f001 f8e6 	bl	800a8fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800972e:	2300      	movs	r3, #0
 8009730:	2200      	movs	r2, #0
 8009732:	2100      	movs	r1, #0
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f001 fd7f 	bl	800b238 <USBD_LL_PrepareReceive>
 800973a:	e03f      	b.n	80097bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	429a      	cmp	r2, r3
 8009746:	d11c      	bne.n	8009782 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009750:	429a      	cmp	r2, r3
 8009752:	d316      	bcc.n	8009782 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800975e:	429a      	cmp	r2, r3
 8009760:	d20f      	bcs.n	8009782 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f001 f8c7 	bl	800a8fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009774:	2300      	movs	r3, #0
 8009776:	2200      	movs	r2, #0
 8009778:	2100      	movs	r1, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f001 fd5c 	bl	800b238 <USBD_LL_PrepareReceive>
 8009780:	e01c      	b.n	80097bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b03      	cmp	r3, #3
 800978c:	d10f      	bne.n	80097ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097ae:	2180      	movs	r1, #128	@ 0x80
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f001 fc97 	bl	800b0e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f001 f8d4 	bl	800a964 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d03a      	beq.n	800983c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fe42 	bl	8009450 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80097d4:	e032      	b.n	800983c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	4619      	mov	r1, r3
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 f985 	bl	8009af0 <USBD_CoreFindEP>
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	2bff      	cmp	r3, #255	@ 0xff
 80097ee:	d025      	beq.n	800983c <USBD_LL_DataInStage+0x15a>
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d122      	bne.n	800983c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d11c      	bne.n	800983c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009802:	7dfa      	ldrb	r2, [r7, #23]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	32ae      	adds	r2, #174	@ 0xae
 8009808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d014      	beq.n	800983c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009812:	7dfa      	ldrb	r2, [r7, #23]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800981a:	7dfa      	ldrb	r2, [r7, #23]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	32ae      	adds	r2, #174	@ 0xae
 8009820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	7afa      	ldrb	r2, [r7, #11]
 8009828:	4611      	mov	r1, r2
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	4798      	blx	r3
 800982e:	4603      	mov	r3, r0
 8009830:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009832:	7dbb      	ldrb	r3, [r7, #22]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009838:	7dbb      	ldrb	r3, [r7, #22]
 800983a:	e000      	b.n	800983e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b084      	sub	sp, #16
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d014      	beq.n	80098ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00e      	beq.n	80098ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	6852      	ldr	r2, [r2, #4]
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	4611      	mov	r1, r2
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80098a8:	2303      	movs	r3, #3
 80098aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098ac:	2340      	movs	r3, #64	@ 0x40
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 fbd1 	bl	800b05a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2240      	movs	r2, #64	@ 0x40
 80098c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098c8:	2340      	movs	r3, #64	@ 0x40
 80098ca:	2200      	movs	r2, #0
 80098cc:	2180      	movs	r1, #128	@ 0x80
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 fbc3 	bl	800b05a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2240      	movs	r2, #64	@ 0x40
 80098de:	621a      	str	r2, [r3, #32]

  return ret;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b04      	cmp	r3, #4
 800991c:	d006      	beq.n	800992c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009924:	b2da      	uxtb	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2204      	movs	r2, #4
 8009930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b04      	cmp	r3, #4
 8009954:	d106      	bne.n	8009964 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800995c:	b2da      	uxtb	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b03      	cmp	r3, #3
 8009984:	d110      	bne.n	80099a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b082      	sub	sp, #8
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	32ae      	adds	r2, #174	@ 0xae
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e01c      	b.n	8009a0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d115      	bne.n	8009a0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	32ae      	adds	r2, #174	@ 0xae
 80099ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	32ae      	adds	r2, #174	@ 0xae
 80099fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	4611      	mov	r1, r2
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32ae      	adds	r2, #174	@ 0xae
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e01c      	b.n	8009a72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d115      	bne.n	8009a70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	32ae      	adds	r2, #174	@ 0xae
 8009a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	32ae      	adds	r2, #174	@ 0xae
 8009a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00e      	beq.n	8009acc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	6852      	ldr	r2, [r2, #4]
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	4611      	mov	r1, r2
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ae2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009afc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d91f      	bls.n	8009b70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b36:	e013      	b.n	8009b60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009b38:	f107 030a 	add.w	r3, r7, #10
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6978      	ldr	r0, [r7, #20]
 8009b40:	f000 f81b 	bl	8009b7a <USBD_GetNextDesc>
 8009b44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	785b      	ldrb	r3, [r3, #1]
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	d108      	bne.n	8009b60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	789b      	ldrb	r3, [r3, #2]
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d008      	beq.n	8009b6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	885b      	ldrh	r3, [r3, #2]
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	897b      	ldrh	r3, [r7, #10]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d8e5      	bhi.n	8009b38 <USBD_GetEpDesc+0x2e>
 8009b6c:	e000      	b.n	8009b70 <USBD_GetEpDesc+0x66>
          break;
 8009b6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b70:	693b      	ldr	r3, [r7, #16]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b085      	sub	sp, #20
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	7812      	ldrb	r2, [r2, #0]
 8009b90:	4413      	add	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b087      	sub	sp, #28
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bd0:	8a3b      	ldrh	r3, [r7, #16]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	b21a      	sxth	r2, r3
 8009bd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b21b      	sxth	r3, r3
 8009bde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009be0:	89fb      	ldrh	r3, [r7, #14]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c06:	2b40      	cmp	r3, #64	@ 0x40
 8009c08:	d005      	beq.n	8009c16 <USBD_StdDevReq+0x26>
 8009c0a:	2b40      	cmp	r3, #64	@ 0x40
 8009c0c:	d857      	bhi.n	8009cbe <USBD_StdDevReq+0xce>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00f      	beq.n	8009c32 <USBD_StdDevReq+0x42>
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d153      	bne.n	8009cbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	32ae      	adds	r2, #174	@ 0xae
 8009c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	4798      	blx	r3
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c30:	e04a      	b.n	8009cc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d83b      	bhi.n	8009cb2 <USBD_StdDevReq+0xc2>
 8009c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c40 <USBD_StdDevReq+0x50>)
 8009c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009ca9 	.word	0x08009ca9
 8009c48:	08009cb3 	.word	0x08009cb3
 8009c4c:	08009c9f 	.word	0x08009c9f
 8009c50:	08009cb3 	.word	0x08009cb3
 8009c54:	08009c73 	.word	0x08009c73
 8009c58:	08009c69 	.word	0x08009c69
 8009c5c:	08009cb3 	.word	0x08009cb3
 8009c60:	08009c8b 	.word	0x08009c8b
 8009c64:	08009c7d 	.word	0x08009c7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa3c 	bl	800a0e8 <USBD_GetDescriptor>
          break;
 8009c70:	e024      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fbcb 	bl	800a410 <USBD_SetAddress>
          break;
 8009c7a:	e01f      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fc0a 	bl	800a498 <USBD_SetConfig>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73fb      	strb	r3, [r7, #15]
          break;
 8009c88:	e018      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fcad 	bl	800a5ec <USBD_GetConfig>
          break;
 8009c92:	e013      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fcde 	bl	800a658 <USBD_GetStatus>
          break;
 8009c9c:	e00e      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fd0d 	bl	800a6c0 <USBD_SetFeature>
          break;
 8009ca6:	e009      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fd31 	bl	800a712 <USBD_ClrFeature>
          break;
 8009cb0:	e004      	b.n	8009cbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fd88 	bl	800a7ca <USBD_CtlError>
          break;
 8009cba:	bf00      	nop
      }
      break;
 8009cbc:	e004      	b.n	8009cc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fd82 	bl	800a7ca <USBD_CtlError>
      break;
 8009cc6:	bf00      	nop
  }

  return ret;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop

08009cd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cea:	2b40      	cmp	r3, #64	@ 0x40
 8009cec:	d005      	beq.n	8009cfa <USBD_StdItfReq+0x26>
 8009cee:	2b40      	cmp	r3, #64	@ 0x40
 8009cf0:	d852      	bhi.n	8009d98 <USBD_StdItfReq+0xc4>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <USBD_StdItfReq+0x26>
 8009cf6:	2b20      	cmp	r3, #32
 8009cf8:	d14e      	bne.n	8009d98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	3b01      	subs	r3, #1
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d840      	bhi.n	8009d8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	889b      	ldrh	r3, [r3, #4]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d836      	bhi.n	8009d80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	889b      	ldrh	r3, [r3, #4]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fedb 	bl	8009ad6 <USBD_CoreFindIF>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2bff      	cmp	r3, #255	@ 0xff
 8009d28:	d01d      	beq.n	8009d66 <USBD_StdItfReq+0x92>
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d11a      	bne.n	8009d66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d30:	7bba      	ldrb	r2, [r7, #14]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32ae      	adds	r2, #174	@ 0xae
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00f      	beq.n	8009d60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d40:	7bba      	ldrb	r2, [r7, #14]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d48:	7bba      	ldrb	r2, [r7, #14]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	32ae      	adds	r2, #174	@ 0xae
 8009d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d5e:	e004      	b.n	8009d6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d64:	e001      	b.n	8009d6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d66:	2303      	movs	r3, #3
 8009d68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	88db      	ldrh	r3, [r3, #6]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d110      	bne.n	8009d94 <USBD_StdItfReq+0xc0>
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10d      	bne.n	8009d94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fde0 	bl	800a93e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d7e:	e009      	b.n	8009d94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fd21 	bl	800a7ca <USBD_CtlError>
          break;
 8009d88:	e004      	b.n	8009d94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fd1c 	bl	800a7ca <USBD_CtlError>
          break;
 8009d92:	e000      	b.n	8009d96 <USBD_StdItfReq+0xc2>
          break;
 8009d94:	bf00      	nop
      }
      break;
 8009d96:	e004      	b.n	8009da2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fd15 	bl	800a7ca <USBD_CtlError>
      break;
 8009da0:	bf00      	nop
  }

  return ret;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	889b      	ldrh	r3, [r3, #4]
 8009dbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dc8:	2b40      	cmp	r3, #64	@ 0x40
 8009dca:	d007      	beq.n	8009ddc <USBD_StdEPReq+0x30>
 8009dcc:	2b40      	cmp	r3, #64	@ 0x40
 8009dce:	f200 817f 	bhi.w	800a0d0 <USBD_StdEPReq+0x324>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d02a      	beq.n	8009e2c <USBD_StdEPReq+0x80>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	f040 817a 	bne.w	800a0d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7ff fe85 	bl	8009af0 <USBD_CoreFindEP>
 8009de6:	4603      	mov	r3, r0
 8009de8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dea:	7b7b      	ldrb	r3, [r7, #13]
 8009dec:	2bff      	cmp	r3, #255	@ 0xff
 8009dee:	f000 8174 	beq.w	800a0da <USBD_StdEPReq+0x32e>
 8009df2:	7b7b      	ldrb	r3, [r7, #13]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 8170 	bne.w	800a0da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009dfa:	7b7a      	ldrb	r2, [r7, #13]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e02:	7b7a      	ldrb	r2, [r7, #13]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	32ae      	adds	r2, #174	@ 0xae
 8009e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 8163 	beq.w	800a0da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e14:	7b7a      	ldrb	r2, [r7, #13]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	32ae      	adds	r2, #174	@ 0xae
 8009e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	4798      	blx	r3
 8009e26:	4603      	mov	r3, r0
 8009e28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e2a:	e156      	b.n	800a0da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d008      	beq.n	8009e46 <USBD_StdEPReq+0x9a>
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	f300 8145 	bgt.w	800a0c4 <USBD_StdEPReq+0x318>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 809b 	beq.w	8009f76 <USBD_StdEPReq+0x1ca>
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d03c      	beq.n	8009ebe <USBD_StdEPReq+0x112>
 8009e44:	e13e      	b.n	800a0c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d002      	beq.n	8009e58 <USBD_StdEPReq+0xac>
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d016      	beq.n	8009e84 <USBD_StdEPReq+0xd8>
 8009e56:	e02c      	b.n	8009eb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00d      	beq.n	8009e7a <USBD_StdEPReq+0xce>
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b80      	cmp	r3, #128	@ 0x80
 8009e62:	d00a      	beq.n	8009e7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f93b 	bl	800b0e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e6e:	2180      	movs	r1, #128	@ 0x80
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f937 	bl	800b0e4 <USBD_LL_StallEP>
 8009e76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e78:	e020      	b.n	8009ebc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fca4 	bl	800a7ca <USBD_CtlError>
              break;
 8009e82:	e01b      	b.n	8009ebc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	885b      	ldrh	r3, [r3, #2]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10e      	bne.n	8009eaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00b      	beq.n	8009eaa <USBD_StdEPReq+0xfe>
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	2b80      	cmp	r3, #128	@ 0x80
 8009e96:	d008      	beq.n	8009eaa <USBD_StdEPReq+0xfe>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	88db      	ldrh	r3, [r3, #6]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d104      	bne.n	8009eaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 f91d 	bl	800b0e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fd47 	bl	800a93e <USBD_CtlSendStatus>

              break;
 8009eb0:	e004      	b.n	8009ebc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fc88 	bl	800a7ca <USBD_CtlError>
              break;
 8009eba:	bf00      	nop
          }
          break;
 8009ebc:	e107      	b.n	800a0ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d002      	beq.n	8009ed0 <USBD_StdEPReq+0x124>
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d016      	beq.n	8009efc <USBD_StdEPReq+0x150>
 8009ece:	e04b      	b.n	8009f68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00d      	beq.n	8009ef2 <USBD_StdEPReq+0x146>
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	2b80      	cmp	r3, #128	@ 0x80
 8009eda:	d00a      	beq.n	8009ef2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 f8ff 	bl	800b0e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ee6:	2180      	movs	r1, #128	@ 0x80
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f8fb 	bl	800b0e4 <USBD_LL_StallEP>
 8009eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ef0:	e040      	b.n	8009f74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fc68 	bl	800a7ca <USBD_CtlError>
              break;
 8009efa:	e03b      	b.n	8009f74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	885b      	ldrh	r3, [r3, #2]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d136      	bne.n	8009f72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 f905 	bl	800b122 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fd10 	bl	800a93e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff fde4 	bl	8009af0 <USBD_CoreFindEP>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f2c:	7b7b      	ldrb	r3, [r7, #13]
 8009f2e:	2bff      	cmp	r3, #255	@ 0xff
 8009f30:	d01f      	beq.n	8009f72 <USBD_StdEPReq+0x1c6>
 8009f32:	7b7b      	ldrb	r3, [r7, #13]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d11c      	bne.n	8009f72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f38:	7b7a      	ldrb	r2, [r7, #13]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f40:	7b7a      	ldrb	r2, [r7, #13]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	32ae      	adds	r2, #174	@ 0xae
 8009f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d010      	beq.n	8009f72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f50:	7b7a      	ldrb	r2, [r7, #13]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	32ae      	adds	r2, #174	@ 0xae
 8009f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	4798      	blx	r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f66:	e004      	b.n	8009f72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fc2d 	bl	800a7ca <USBD_CtlError>
              break;
 8009f70:	e000      	b.n	8009f74 <USBD_StdEPReq+0x1c8>
              break;
 8009f72:	bf00      	nop
          }
          break;
 8009f74:	e0ab      	b.n	800a0ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d002      	beq.n	8009f88 <USBD_StdEPReq+0x1dc>
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d032      	beq.n	8009fec <USBD_StdEPReq+0x240>
 8009f86:	e097      	b.n	800a0b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <USBD_StdEPReq+0x1f2>
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	2b80      	cmp	r3, #128	@ 0x80
 8009f92:	d004      	beq.n	8009f9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fc17 	bl	800a7ca <USBD_CtlError>
                break;
 8009f9c:	e091      	b.n	800a0c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	da0b      	bge.n	8009fbe <USBD_StdEPReq+0x212>
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	3310      	adds	r3, #16
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	4413      	add	r3, r2
 8009fba:	3304      	adds	r3, #4
 8009fbc:	e00b      	b.n	8009fd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fc6d 	bl	800a8c4 <USBD_CtlSendData>
              break;
 8009fea:	e06a      	b.n	800a0c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da11      	bge.n	800a018 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	f003 020f 	and.w	r2, r3, #15
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	3324      	adds	r3, #36	@ 0x24
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d117      	bne.n	800a03e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fbda 	bl	800a7ca <USBD_CtlError>
                  break;
 800a016:	e054      	b.n	800a0c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	f003 020f 	and.w	r2, r3, #15
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4613      	mov	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fbc7 	bl	800a7ca <USBD_CtlError>
                  break;
 800a03c:	e041      	b.n	800a0c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a03e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a042:	2b00      	cmp	r3, #0
 800a044:	da0b      	bge.n	800a05e <USBD_StdEPReq+0x2b2>
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a04c:	4613      	mov	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	3310      	adds	r3, #16
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	4413      	add	r3, r2
 800a05a:	3304      	adds	r3, #4
 800a05c:	e00b      	b.n	800a076 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <USBD_StdEPReq+0x2d8>
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	2b80      	cmp	r3, #128	@ 0x80
 800a082:	d103      	bne.n	800a08c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	e00e      	b.n	800a0aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 f865 	bl	800b160 <USBD_LL_IsStallEP>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fc07 	bl	800a8c4 <USBD_CtlSendData>
              break;
 800a0b6:	e004      	b.n	800a0c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fb85 	bl	800a7ca <USBD_CtlError>
              break;
 800a0c0:	bf00      	nop
          }
          break;
 800a0c2:	e004      	b.n	800a0ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fb7f 	bl	800a7ca <USBD_CtlError>
          break;
 800a0cc:	bf00      	nop
      }
      break;
 800a0ce:	e005      	b.n	800a0dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fb79 	bl	800a7ca <USBD_CtlError>
      break;
 800a0d8:	e000      	b.n	800a0dc <USBD_StdEPReq+0x330>
      break;
 800a0da:	bf00      	nop
  }

  return ret;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	885b      	ldrh	r3, [r3, #2]
 800a102:	0a1b      	lsrs	r3, r3, #8
 800a104:	b29b      	uxth	r3, r3
 800a106:	3b01      	subs	r3, #1
 800a108:	2b0e      	cmp	r3, #14
 800a10a:	f200 8152 	bhi.w	800a3b2 <USBD_GetDescriptor+0x2ca>
 800a10e:	a201      	add	r2, pc, #4	@ (adr r2, 800a114 <USBD_GetDescriptor+0x2c>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a185 	.word	0x0800a185
 800a118:	0800a19d 	.word	0x0800a19d
 800a11c:	0800a1dd 	.word	0x0800a1dd
 800a120:	0800a3b3 	.word	0x0800a3b3
 800a124:	0800a3b3 	.word	0x0800a3b3
 800a128:	0800a353 	.word	0x0800a353
 800a12c:	0800a37f 	.word	0x0800a37f
 800a130:	0800a3b3 	.word	0x0800a3b3
 800a134:	0800a3b3 	.word	0x0800a3b3
 800a138:	0800a3b3 	.word	0x0800a3b3
 800a13c:	0800a3b3 	.word	0x0800a3b3
 800a140:	0800a3b3 	.word	0x0800a3b3
 800a144:	0800a3b3 	.word	0x0800a3b3
 800a148:	0800a3b3 	.word	0x0800a3b3
 800a14c:	0800a151 	.word	0x0800a151
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a172:	e126      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fb27 	bl	800a7ca <USBD_CtlError>
        err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
      break;
 800a182:	e11e      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7c12      	ldrb	r2, [r2, #16]
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
      break;
 800a19a:	e112      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	7c1b      	ldrb	r3, [r3, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10d      	bne.n	800a1c0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	f107 0208 	add.w	r2, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1be:	e100      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c8:	f107 0208 	add.w	r2, r7, #8
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4798      	blx	r3
 800a1d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	701a      	strb	r2, [r3, #0]
      break;
 800a1da:	e0f2      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b05      	cmp	r3, #5
 800a1e4:	f200 80ac 	bhi.w	800a340 <USBD_GetDescriptor+0x258>
 800a1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f0 <USBD_GetDescriptor+0x108>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a209 	.word	0x0800a209
 800a1f4:	0800a23d 	.word	0x0800a23d
 800a1f8:	0800a271 	.word	0x0800a271
 800a1fc:	0800a2a5 	.word	0x0800a2a5
 800a200:	0800a2d9 	.word	0x0800a2d9
 800a204:	0800a30d 	.word	0x0800a30d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	7c12      	ldrb	r2, [r2, #16]
 800a220:	f107 0108 	add.w	r1, r7, #8
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22a:	e091      	b.n	800a350 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 facb 	bl	800a7ca <USBD_CtlError>
            err++;
 800a234:	7afb      	ldrb	r3, [r7, #11]
 800a236:	3301      	adds	r3, #1
 800a238:	72fb      	strb	r3, [r7, #11]
          break;
 800a23a:	e089      	b.n	800a350 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7c12      	ldrb	r2, [r2, #16]
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a25e:	e077      	b.n	800a350 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fab1 	bl	800a7ca <USBD_CtlError>
            err++;
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	3301      	adds	r3, #1
 800a26c:	72fb      	strb	r3, [r7, #11]
          break;
 800a26e:	e06f      	b.n	800a350 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7c12      	ldrb	r2, [r2, #16]
 800a288:	f107 0108 	add.w	r1, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a292:	e05d      	b.n	800a350 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa97 	bl	800a7ca <USBD_CtlError>
            err++;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a2:	e055      	b.n	800a350 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	7c12      	ldrb	r2, [r2, #16]
 800a2bc:	f107 0108 	add.w	r1, r7, #8
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
 800a2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2c6:	e043      	b.n	800a350 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa7d 	bl	800a7ca <USBD_CtlError>
            err++;
 800a2d0:	7afb      	ldrb	r3, [r7, #11]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2d6:	e03b      	b.n	800a350 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	7c12      	ldrb	r2, [r2, #16]
 800a2f0:	f107 0108 	add.w	r1, r7, #8
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4798      	blx	r3
 800a2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fa:	e029      	b.n	800a350 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa63 	bl	800a7ca <USBD_CtlError>
            err++;
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	3301      	adds	r3, #1
 800a308:	72fb      	strb	r3, [r7, #11]
          break;
 800a30a:	e021      	b.n	800a350 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7c12      	ldrb	r2, [r2, #16]
 800a324:	f107 0108 	add.w	r1, r7, #8
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a32e:	e00f      	b.n	800a350 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa49 	bl	800a7ca <USBD_CtlError>
            err++;
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	3301      	adds	r3, #1
 800a33c:	72fb      	strb	r3, [r7, #11]
          break;
 800a33e:	e007      	b.n	800a350 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa41 	bl	800a7ca <USBD_CtlError>
          err++;
 800a348:	7afb      	ldrb	r3, [r7, #11]
 800a34a:	3301      	adds	r3, #1
 800a34c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a34e:	bf00      	nop
      }
      break;
 800a350:	e037      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	7c1b      	ldrb	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d109      	bne.n	800a36e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a362:	f107 0208 	add.w	r2, r7, #8
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
 800a36a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a36c:	e029      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa2a 	bl	800a7ca <USBD_CtlError>
        err++;
 800a376:	7afb      	ldrb	r3, [r7, #11]
 800a378:	3301      	adds	r3, #1
 800a37a:	72fb      	strb	r3, [r7, #11]
      break;
 800a37c:	e021      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7c1b      	ldrb	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10d      	bne.n	800a3a2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38e:	f107 0208 	add.w	r2, r7, #8
 800a392:	4610      	mov	r0, r2
 800a394:	4798      	blx	r3
 800a396:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	2207      	movs	r2, #7
 800a39e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3a0:	e00f      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa10 	bl	800a7ca <USBD_CtlError>
        err++;
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b0:	e007      	b.n	800a3c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fa08 	bl	800a7ca <USBD_CtlError>
      err++;
 800a3ba:	7afb      	ldrb	r3, [r7, #11]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	72fb      	strb	r3, [r7, #11]
      break;
 800a3c0:	bf00      	nop
  }

  if (err != 0U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d11e      	bne.n	800a406 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	88db      	ldrh	r3, [r3, #6]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d016      	beq.n	800a3fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a3d0:	893b      	ldrh	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00e      	beq.n	800a3f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	88da      	ldrh	r2, [r3, #6]
 800a3da:	893b      	ldrh	r3, [r7, #8]
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	bf28      	it	cs
 800a3e0:	4613      	movcs	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3e6:	893b      	ldrh	r3, [r7, #8]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fa69 	bl	800a8c4 <USBD_CtlSendData>
 800a3f2:	e009      	b.n	800a408 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f9e7 	bl	800a7ca <USBD_CtlError>
 800a3fc:	e004      	b.n	800a408 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fa9d 	bl	800a93e <USBD_CtlSendStatus>
 800a404:	e000      	b.n	800a408 <USBD_GetDescriptor+0x320>
    return;
 800a406:	bf00      	nop
  }
}
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop

0800a410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	889b      	ldrh	r3, [r3, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d131      	bne.n	800a486 <USBD_SetAddress+0x76>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d12d      	bne.n	800a486 <USBD_SetAddress+0x76>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	885b      	ldrh	r3, [r3, #2]
 800a42e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a430:	d829      	bhi.n	800a486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	885b      	ldrh	r3, [r3, #2]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a43c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d104      	bne.n	800a454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f9bc 	bl	800a7ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a452:	e01d      	b.n	800a490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7bfa      	ldrb	r2, [r7, #15]
 800a458:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fea9 	bl	800b1b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fa69 	bl	800a93e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2202      	movs	r2, #2
 800a476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	e009      	b.n	800a490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a484:	e004      	b.n	800a490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f99e 	bl	800a7ca <USBD_CtlError>
  }
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	885b      	ldrh	r3, [r3, #2]
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	4b4e      	ldr	r3, [pc, #312]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a4ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d905      	bls.n	800a4c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f985 	bl	800a7ca <USBD_CtlError>
    return USBD_FAIL;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e08c      	b.n	800a5de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d002      	beq.n	800a4d6 <USBD_SetConfig+0x3e>
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d029      	beq.n	800a528 <USBD_SetConfig+0x90>
 800a4d4:	e075      	b.n	800a5c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4d6:	4b44      	ldr	r3, [pc, #272]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d020      	beq.n	800a520 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a4de:	4b42      	ldr	r3, [pc, #264]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4e8:	4b3f      	ldr	r3, [pc, #252]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7fe ffb9 	bl	8009466 <USBD_SetClassConfig>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f962 	bl	800a7ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2202      	movs	r2, #2
 800a50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a50e:	e065      	b.n	800a5dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fa14 	bl	800a93e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2203      	movs	r2, #3
 800a51a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a51e:	e05d      	b.n	800a5dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fa0c 	bl	800a93e <USBD_CtlSendStatus>
      break;
 800a526:	e059      	b.n	800a5dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a528:	4b2f      	ldr	r3, [pc, #188]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d112      	bne.n	800a556 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a538:	4b2b      	ldr	r3, [pc, #172]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a542:	4b29      	ldr	r3, [pc, #164]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fe ffa8 	bl	800949e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f9f5 	bl	800a93e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a554:	e042      	b.n	800a5dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a556:	4b24      	ldr	r3, [pc, #144]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d02a      	beq.n	800a5ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7fe ff96 	bl	800949e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a572:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a57c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fe ff6f 	bl	8009466 <USBD_SetClassConfig>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00f      	beq.n	800a5b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f918 	bl	800a7ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7fe ff7b 	bl	800949e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5b0:	e014      	b.n	800a5dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f9c3 	bl	800a93e <USBD_CtlSendStatus>
      break;
 800a5b8:	e010      	b.n	800a5dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f9bf 	bl	800a93e <USBD_CtlSendStatus>
      break;
 800a5c0:	e00c      	b.n	800a5dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f900 	bl	800a7ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5ca:	4b07      	ldr	r3, [pc, #28]	@ (800a5e8 <USBD_SetConfig+0x150>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7fe ff64 	bl	800949e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5da:	bf00      	nop
  }

  return ret;
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	240007a0 	.word	0x240007a0

0800a5ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	88db      	ldrh	r3, [r3, #6]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d004      	beq.n	800a608 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f8e2 	bl	800a7ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a606:	e023      	b.n	800a650 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b02      	cmp	r3, #2
 800a612:	dc02      	bgt.n	800a61a <USBD_GetConfig+0x2e>
 800a614:	2b00      	cmp	r3, #0
 800a616:	dc03      	bgt.n	800a620 <USBD_GetConfig+0x34>
 800a618:	e015      	b.n	800a646 <USBD_GetConfig+0x5a>
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d00b      	beq.n	800a636 <USBD_GetConfig+0x4a>
 800a61e:	e012      	b.n	800a646 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	3308      	adds	r3, #8
 800a62a:	2201      	movs	r2, #1
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f948 	bl	800a8c4 <USBD_CtlSendData>
        break;
 800a634:	e00c      	b.n	800a650 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3304      	adds	r3, #4
 800a63a:	2201      	movs	r2, #1
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f940 	bl	800a8c4 <USBD_CtlSendData>
        break;
 800a644:	e004      	b.n	800a650 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f8be 	bl	800a7ca <USBD_CtlError>
        break;
 800a64e:	bf00      	nop
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d81e      	bhi.n	800a6ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	88db      	ldrh	r3, [r3, #6]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d004      	beq.n	800a682 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f8a5 	bl	800a7ca <USBD_CtlError>
        break;
 800a680:	e01a      	b.n	800a6b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f043 0202 	orr.w	r2, r3, #2
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	330c      	adds	r3, #12
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f90c 	bl	800a8c4 <USBD_CtlSendData>
      break;
 800a6ac:	e004      	b.n	800a6b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f88a 	bl	800a7ca <USBD_CtlError>
      break;
 800a6b6:	bf00      	nop
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	885b      	ldrh	r3, [r3, #2]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d107      	bne.n	800a6e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f92f 	bl	800a93e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a6e0:	e013      	b.n	800a70a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d10b      	bne.n	800a702 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	889b      	ldrh	r3, [r3, #4]
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f91f 	bl	800a93e <USBD_CtlSendStatus>
}
 800a700:	e003      	b.n	800a70a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f860 	bl	800a7ca <USBD_CtlError>
}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b082      	sub	sp, #8
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a722:	b2db      	uxtb	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	2b02      	cmp	r3, #2
 800a728:	d80b      	bhi.n	800a742 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d10c      	bne.n	800a74c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f8ff 	bl	800a93e <USBD_CtlSendStatus>
      }
      break;
 800a740:	e004      	b.n	800a74c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f840 	bl	800a7ca <USBD_CtlError>
      break;
 800a74a:	e000      	b.n	800a74e <USBD_ClrFeature+0x3c>
      break;
 800a74c:	bf00      	nop
  }
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff fa16 	bl	8009bb2 <SWAPBYTE>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3301      	adds	r3, #1
 800a798:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff fa09 	bl	8009bb2 <SWAPBYTE>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff f9fc 	bl	8009bb2 <SWAPBYTE>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	80da      	strh	r2, [r3, #6]
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7d4:	2180      	movs	r1, #128	@ 0x80
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fc84 	bl	800b0e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fc80 	bl	800b0e4 <USBD_LL_StallEP>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d042      	beq.n	800a888 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a806:	6938      	ldr	r0, [r7, #16]
 800a808:	f000 f842 	bl	800a890 <USBD_GetLen>
 800a80c:	4603      	mov	r3, r0
 800a80e:	3301      	adds	r3, #1
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a816:	d808      	bhi.n	800a82a <USBD_GetString+0x3e>
 800a818:	6938      	ldr	r0, [r7, #16]
 800a81a:	f000 f839 	bl	800a890 <USBD_GetLen>
 800a81e:	4603      	mov	r3, r0
 800a820:	3301      	adds	r3, #1
 800a822:	b29b      	uxth	r3, r3
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	b29a      	uxth	r2, r3
 800a828:	e001      	b.n	800a82e <USBD_GetString+0x42>
 800a82a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	4413      	add	r3, r2
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	7812      	ldrb	r2, [r2, #0]
 800a83c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	3301      	adds	r3, #1
 800a842:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	4413      	add	r3, r2
 800a84a:	2203      	movs	r2, #3
 800a84c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	3301      	adds	r3, #1
 800a852:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a854:	e013      	b.n	800a87e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	4413      	add	r3, r2
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	7812      	ldrb	r2, [r2, #0]
 800a860:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	3301      	adds	r3, #1
 800a866:	613b      	str	r3, [r7, #16]
    idx++;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
 800a86a:	3301      	adds	r3, #1
 800a86c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	4413      	add	r3, r2
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
    idx++;
 800a878:	7dfb      	ldrb	r3, [r7, #23]
 800a87a:	3301      	adds	r3, #1
 800a87c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e7      	bne.n	800a856 <USBD_GetString+0x6a>
 800a886:	e000      	b.n	800a88a <USBD_GetString+0x9e>
    return;
 800a888:	bf00      	nop
  }
}
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a8a0:	e005      	b.n	800a8ae <USBD_GetLen+0x1e>
  {
    len++;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1f5      	bne.n	800a8a2 <USBD_GetLen+0x12>
  }

  return len;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fc83 	bl	800b1f6 <USBD_LL_Transmit>

  return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	2100      	movs	r1, #0
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 fc72 	bl	800b1f6 <USBD_LL_Transmit>

  return USBD_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	2100      	movs	r1, #0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 fc82 	bl	800b238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2204      	movs	r2, #4
 800a94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a94e:	2300      	movs	r3, #0
 800a950:	2200      	movs	r2, #0
 800a952:	2100      	movs	r1, #0
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc4e 	bl	800b1f6 <USBD_LL_Transmit>

  return USBD_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2205      	movs	r2, #5
 800a970:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a974:	2300      	movs	r3, #0
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fc5c 	bl	800b238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a990:	2201      	movs	r2, #1
 800a992:	490f      	ldr	r1, [pc, #60]	@ (800a9d0 <MX_USB_DEVICE_Init+0x44>)
 800a994:	480f      	ldr	r0, [pc, #60]	@ (800a9d4 <MX_USB_DEVICE_Init+0x48>)
 800a996:	f7fe fce9 	bl	800936c <USBD_Init>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9a0:	f7f6 ff18 	bl	80017d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800a9a4:	490c      	ldr	r1, [pc, #48]	@ (800a9d8 <MX_USB_DEVICE_Init+0x4c>)
 800a9a6:	480b      	ldr	r0, [pc, #44]	@ (800a9d4 <MX_USB_DEVICE_Init+0x48>)
 800a9a8:	f7fe fd10 	bl	80093cc <USBD_RegisterClass>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9b2:	f7f6 ff0f 	bl	80017d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a9b6:	4807      	ldr	r0, [pc, #28]	@ (800a9d4 <MX_USB_DEVICE_Init+0x48>)
 800a9b8:	f7fe fd3e 	bl	8009438 <USBD_Start>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a9c2:	f7f6 ff07 	bl	80017d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a9c6:	f7f8 ff79 	bl	80038bc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9ca:	bf00      	nop
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	24000274 	.word	0x24000274
 800a9d4:	240007a4 	.word	0x240007a4
 800a9d8:	240001c0 	.word	0x240001c0

0800a9dc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	6039      	str	r1, [r7, #0]
 800a9e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2212      	movs	r2, #18
 800a9ec:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a9ee:	4b03      	ldr	r3, [pc, #12]	@ (800a9fc <USBD_HS_DeviceDescriptor+0x20>)
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	24000294 	.word	0x24000294

0800aa00 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	6039      	str	r1, [r7, #0]
 800aa0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2204      	movs	r2, #4
 800aa10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa12:	4b03      	ldr	r3, [pc, #12]	@ (800aa20 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	240002a8 	.word	0x240002a8

0800aa24 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	6039      	str	r1, [r7, #0]
 800aa2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d105      	bne.n	800aa42 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4907      	ldr	r1, [pc, #28]	@ (800aa58 <USBD_HS_ProductStrDescriptor+0x34>)
 800aa3a:	4808      	ldr	r0, [pc, #32]	@ (800aa5c <USBD_HS_ProductStrDescriptor+0x38>)
 800aa3c:	f7ff fed6 	bl	800a7ec <USBD_GetString>
 800aa40:	e004      	b.n	800aa4c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	4904      	ldr	r1, [pc, #16]	@ (800aa58 <USBD_HS_ProductStrDescriptor+0x34>)
 800aa46:	4805      	ldr	r0, [pc, #20]	@ (800aa5c <USBD_HS_ProductStrDescriptor+0x38>)
 800aa48:	f7ff fed0 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa4c:	4b02      	ldr	r3, [pc, #8]	@ (800aa58 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	24000a80 	.word	0x24000a80
 800aa5c:	0800bd64 	.word	0x0800bd64

0800aa60 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	6039      	str	r1, [r7, #0]
 800aa6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	4904      	ldr	r1, [pc, #16]	@ (800aa80 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800aa70:	4804      	ldr	r0, [pc, #16]	@ (800aa84 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800aa72:	f7ff febb 	bl	800a7ec <USBD_GetString>
  return USBD_StrDesc;
 800aa76:	4b02      	ldr	r3, [pc, #8]	@ (800aa80 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	24000a80 	.word	0x24000a80
 800aa84:	0800bd7c 	.word	0x0800bd7c

0800aa88 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	6039      	str	r1, [r7, #0]
 800aa92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	221a      	movs	r2, #26
 800aa98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa9a:	f000 f843 	bl	800ab24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aa9e:	4b02      	ldr	r3, [pc, #8]	@ (800aaa8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	240002ac 	.word	0x240002ac

0800aaac <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	6039      	str	r1, [r7, #0]
 800aab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d105      	bne.n	800aaca <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	4907      	ldr	r1, [pc, #28]	@ (800aae0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800aac2:	4808      	ldr	r0, [pc, #32]	@ (800aae4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800aac4:	f7ff fe92 	bl	800a7ec <USBD_GetString>
 800aac8:	e004      	b.n	800aad4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	4904      	ldr	r1, [pc, #16]	@ (800aae0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800aace:	4805      	ldr	r0, [pc, #20]	@ (800aae4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800aad0:	f7ff fe8c 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad4:	4b02      	ldr	r3, [pc, #8]	@ (800aae0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	24000a80 	.word	0x24000a80
 800aae4:	0800bd90 	.word	0x0800bd90

0800aae8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	6039      	str	r1, [r7, #0]
 800aaf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d105      	bne.n	800ab06 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4907      	ldr	r1, [pc, #28]	@ (800ab1c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aafe:	4808      	ldr	r0, [pc, #32]	@ (800ab20 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab00:	f7ff fe74 	bl	800a7ec <USBD_GetString>
 800ab04:	e004      	b.n	800ab10 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	4904      	ldr	r1, [pc, #16]	@ (800ab1c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab0a:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab0c:	f7ff fe6e 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab10:	4b02      	ldr	r3, [pc, #8]	@ (800ab1c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	24000a80 	.word	0x24000a80
 800ab20:	0800bd9c 	.word	0x0800bd9c

0800ab24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab68 <Get_SerialNum+0x44>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab30:	4b0e      	ldr	r3, [pc, #56]	@ (800ab6c <Get_SerialNum+0x48>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab36:	4b0e      	ldr	r3, [pc, #56]	@ (800ab70 <Get_SerialNum+0x4c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4413      	add	r3, r2
 800ab42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	4909      	ldr	r1, [pc, #36]	@ (800ab74 <Get_SerialNum+0x50>)
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 f814 	bl	800ab7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab54:	2204      	movs	r2, #4
 800ab56:	4908      	ldr	r1, [pc, #32]	@ (800ab78 <Get_SerialNum+0x54>)
 800ab58:	68b8      	ldr	r0, [r7, #8]
 800ab5a:	f000 f80f 	bl	800ab7c <IntToUnicode>
  }
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	1ff1e800 	.word	0x1ff1e800
 800ab6c:	1ff1e804 	.word	0x1ff1e804
 800ab70:	1ff1e808 	.word	0x1ff1e808
 800ab74:	240002ae 	.word	0x240002ae
 800ab78:	240002be 	.word	0x240002be

0800ab7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab8e:	2300      	movs	r3, #0
 800ab90:	75fb      	strb	r3, [r7, #23]
 800ab92:	e027      	b.n	800abe4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	0f1b      	lsrs	r3, r3, #28
 800ab98:	2b09      	cmp	r3, #9
 800ab9a:	d80b      	bhi.n	800abb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	0f1b      	lsrs	r3, r3, #28
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	7dfb      	ldrb	r3, [r7, #23]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	4619      	mov	r1, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	440b      	add	r3, r1
 800abac:	3230      	adds	r2, #48	@ 0x30
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	e00a      	b.n	800abca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	0f1b      	lsrs	r3, r3, #28
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	4619      	mov	r1, r3
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	440b      	add	r3, r1
 800abc4:	3237      	adds	r2, #55	@ 0x37
 800abc6:	b2d2      	uxtb	r2, r2
 800abc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	011b      	lsls	r3, r3, #4
 800abce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	3301      	adds	r3, #1
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	4413      	add	r3, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	3301      	adds	r3, #1
 800abe2:	75fb      	strb	r3, [r7, #23]
 800abe4:	7dfa      	ldrb	r2, [r7, #23]
 800abe6:	79fb      	ldrb	r3, [r7, #7]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d3d3      	bcc.n	800ab94 <IntToUnicode+0x18>
  }
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	371c      	adds	r7, #28
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
	...

0800abfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b0bc      	sub	sp, #240	@ 0xf0
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	605a      	str	r2, [r3, #4]
 800ac0e:	609a      	str	r2, [r3, #8]
 800ac10:	60da      	str	r2, [r3, #12]
 800ac12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac14:	f107 0320 	add.w	r3, r7, #32
 800ac18:	22b8      	movs	r2, #184	@ 0xb8
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fb91 	bl	800b344 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a58      	ldr	r2, [pc, #352]	@ (800ad88 <HAL_PCD_MspInit+0x18c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	f040 80a9 	bne.w	800ad80 <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ac2e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ac32:	f04f 0300 	mov.w	r3, #0
 800ac36:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ac3a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800ac3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac42:	f107 0320 	add.w	r3, r7, #32
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7f9 fdae 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800ac52:	f7f6 fdbf 	bl	80017d4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ac56:	f7f8 fe31 	bl	80038bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac5a:	4b4c      	ldr	r3, [pc, #304]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac60:	4a4a      	ldr	r2, [pc, #296]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac62:	f043 0304 	orr.w	r3, r3, #4
 800ac66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac6a:	4b48      	ldr	r3, [pc, #288]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	61fb      	str	r3, [r7, #28]
 800ac76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac78:	4b44      	ldr	r3, [pc, #272]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac7e:	4a43      	ldr	r2, [pc, #268]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac80:	f043 0301 	orr.w	r3, r3, #1
 800ac84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ac88:	4b40      	ldr	r3, [pc, #256]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	61bb      	str	r3, [r7, #24]
 800ac94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac96:	4b3d      	ldr	r3, [pc, #244]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac9c:	4a3b      	ldr	r2, [pc, #236]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ac9e:	f043 0302 	orr.w	r3, r3, #2
 800aca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800aca6:	4b39      	ldr	r3, [pc, #228]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800aca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acac:	f003 0302 	and.w	r3, r3, #2
 800acb0:	617b      	str	r3, [r7, #20]
 800acb2:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800acb4:	230d      	movs	r3, #13
 800acb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acba:	2302      	movs	r3, #2
 800acbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acc6:	2302      	movs	r3, #2
 800acc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800accc:	230a      	movs	r3, #10
 800acce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800acd2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800acd6:	4619      	mov	r1, r3
 800acd8:	482d      	ldr	r0, [pc, #180]	@ (800ad90 <HAL_PCD_MspInit+0x194>)
 800acda:	f7f7 f985 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800acde:	2328      	movs	r3, #40	@ 0x28
 800ace0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ace4:	2302      	movs	r3, #2
 800ace6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acea:	2300      	movs	r3, #0
 800acec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acf0:	2302      	movs	r3, #2
 800acf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800acf6:	230a      	movs	r3, #10
 800acf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acfc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ad00:	4619      	mov	r1, r3
 800ad02:	4824      	ldr	r0, [pc, #144]	@ (800ad94 <HAL_PCD_MspInit+0x198>)
 800ad04:	f7f7 f970 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800ad08:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800ad0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad10:	2302      	movs	r3, #2
 800ad12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800ad22:	230a      	movs	r3, #10
 800ad24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad28:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	481a      	ldr	r0, [pc, #104]	@ (800ad98 <HAL_PCD_MspInit+0x19c>)
 800ad30:	f7f7 f95a 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ad34:	4b15      	ldr	r3, [pc, #84]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ad36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad3a:	4a14      	ldr	r2, [pc, #80]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ad3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ad44:	4b11      	ldr	r3, [pc, #68]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ad46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800ad52:	4b0e      	ldr	r3, [pc, #56]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ad54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad58:	4a0c      	ldr	r2, [pc, #48]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ad5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ad62:	4b0a      	ldr	r3, [pc, #40]	@ (800ad8c <HAL_PCD_MspInit+0x190>)
 800ad64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ad70:	2200      	movs	r2, #0
 800ad72:	2100      	movs	r1, #0
 800ad74:	204d      	movs	r0, #77	@ 0x4d
 800ad76:	f7f7 f88a 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ad7a:	204d      	movs	r0, #77	@ 0x4d
 800ad7c:	f7f7 f8a1 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ad80:	bf00      	nop
 800ad82:	37f0      	adds	r7, #240	@ 0xf0
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	40040000 	.word	0x40040000
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	58020800 	.word	0x58020800
 800ad94:	58020000 	.word	0x58020000
 800ad98:	58020400 	.word	0x58020400

0800ad9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f7fe fb8d 	bl	80094d2 <USBD_LL_SetupStage>
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4613      	mov	r3, r2
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	440b      	add	r3, r1
 800ade0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	4619      	mov	r1, r3
 800adea:	f7fe fbc7 	bl	800957c <USBD_LL_DataOutStage>
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	460b      	mov	r3, r1
 800ae00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae08:	78fa      	ldrb	r2, [r7, #3]
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	3320      	adds	r3, #32
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	f7fe fc60 	bl	80096e2 <USBD_LL_DataInStage>
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fe fd9a 	bl	8009972 <USBD_LL_SOF>
}
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	79db      	ldrb	r3, [r3, #7]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
 800ae5e:	e008      	b.n	800ae72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	79db      	ldrb	r3, [r3, #7]
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d102      	bne.n	800ae6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	e001      	b.n	800ae72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae6e:	f7f6 fcb1 	bl	80017d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae78:	7bfa      	ldrb	r2, [r7, #15]
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fe fd34 	bl	80098ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe fcdc 	bl	8009846 <USBD_LL_Reset>
}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fd2f 	bl	800990a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aebe:	f043 0301 	orr.w	r3, r3, #1
 800aec2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7adb      	ldrb	r3, [r3, #11]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aecc:	4b04      	ldr	r3, [pc, #16]	@ (800aee0 <HAL_PCD_SuspendCallback+0x48>)
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	4a03      	ldr	r2, [pc, #12]	@ (800aee0 <HAL_PCD_SuspendCallback+0x48>)
 800aed2:	f043 0306 	orr.w	r3, r3, #6
 800aed6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aed8:	bf00      	nop
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	e000ed00 	.word	0xe000ed00

0800aee4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe fd25 	bl	8009942 <USBD_LL_Resume>
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af12:	78fa      	ldrb	r2, [r7, #3]
 800af14:	4611      	mov	r1, r2
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe fd7d 	bl	8009a16 <USBD_LL_IsoOUTIncomplete>
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af36:	78fa      	ldrb	r2, [r7, #3]
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fd39 	bl	80099b2 <USBD_LL_IsoINIncomplete>
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fd8f 	bl	8009a7a <USBD_LL_DevConnected>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe fd8c 	bl	8009a90 <USBD_LL_DevDisconnected>
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d140      	bne.n	800b012 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800af90:	4a22      	ldr	r2, [pc, #136]	@ (800b01c <USBD_LL_Init+0x9c>)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a20      	ldr	r2, [pc, #128]	@ (800b01c <USBD_LL_Init+0x9c>)
 800af9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800afa0:	4b1e      	ldr	r3, [pc, #120]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afa2:	4a1f      	ldr	r2, [pc, #124]	@ (800b020 <USBD_LL_Init+0xa0>)
 800afa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800afa6:	4b1d      	ldr	r3, [pc, #116]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afa8:	2209      	movs	r2, #9
 800afaa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800afac:	4b1b      	ldr	r3, [pc, #108]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afae:	2200      	movs	r2, #0
 800afb0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800afb2:	4b1a      	ldr	r3, [pc, #104]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800afb8:	4b18      	ldr	r3, [pc, #96]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afba:	2201      	movs	r2, #1
 800afbc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800afbe:	4b17      	ldr	r3, [pc, #92]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800afc4:	4b15      	ldr	r3, [pc, #84]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800afca:	4b14      	ldr	r3, [pc, #80]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afcc:	2200      	movs	r2, #0
 800afce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800afd0:	4b12      	ldr	r3, [pc, #72]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800afd6:	4b11      	ldr	r3, [pc, #68]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afd8:	2200      	movs	r2, #0
 800afda:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800afdc:	4b0f      	ldr	r3, [pc, #60]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afde:	2200      	movs	r2, #0
 800afe0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800afe2:	480e      	ldr	r0, [pc, #56]	@ (800b01c <USBD_LL_Init+0x9c>)
 800afe4:	f7f7 f9a8 	bl	8002338 <HAL_PCD_Init>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800afee:	f7f6 fbf1 	bl	80017d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800aff2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aff6:	4809      	ldr	r0, [pc, #36]	@ (800b01c <USBD_LL_Init+0x9c>)
 800aff8:	f7f8 fbe5 	bl	80037c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800affc:	2280      	movs	r2, #128	@ 0x80
 800affe:	2100      	movs	r1, #0
 800b000:	4806      	ldr	r0, [pc, #24]	@ (800b01c <USBD_LL_Init+0x9c>)
 800b002:	f7f8 fb99 	bl	8003738 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b006:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b00a:	2101      	movs	r1, #1
 800b00c:	4803      	ldr	r0, [pc, #12]	@ (800b01c <USBD_LL_Init+0x9c>)
 800b00e:	f7f8 fb93 	bl	8003738 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	24000c80 	.word	0x24000c80
 800b020:	40040000 	.word	0x40040000

0800b024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7f7 fa88 	bl	8002550 <HAL_PCD_Start>
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f930 	bl	800b2ac <USBD_Get_USB_Status>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b050:	7bbb      	ldrb	r3, [r7, #14]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	4608      	mov	r0, r1
 800b064:	4611      	mov	r1, r2
 800b066:	461a      	mov	r2, r3
 800b068:	4603      	mov	r3, r0
 800b06a:	70fb      	strb	r3, [r7, #3]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70bb      	strb	r3, [r7, #2]
 800b070:	4613      	mov	r3, r2
 800b072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b082:	78bb      	ldrb	r3, [r7, #2]
 800b084:	883a      	ldrh	r2, [r7, #0]
 800b086:	78f9      	ldrb	r1, [r7, #3]
 800b088:	f7f7 ff89 	bl	8002f9e <HAL_PCD_EP_Open>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	4618      	mov	r0, r3
 800b094:	f000 f90a 	bl	800b2ac <USBD_Get_USB_Status>
 800b098:	4603      	mov	r3, r0
 800b09a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0c0:	78fa      	ldrb	r2, [r7, #3]
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7f7 ffd4 	bl	8003072 <HAL_PCD_EP_Close>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f8eb 	bl	800b2ac <USBD_Get_USB_Status>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7f8 f874 	bl	80031f0 <HAL_PCD_EP_SetStall>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f8cc 	bl	800b2ac <USBD_Get_USB_Status>
 800b114:	4603      	mov	r3, r0
 800b116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b118:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	460b      	mov	r3, r1
 800b12c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f7f8 f8b8 	bl	80032b6 <HAL_PCD_EP_ClrStall>
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 f8ad 	bl	800b2ac <USBD_Get_USB_Status>
 800b152:	4603      	mov	r3, r0
 800b154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b156:	7bbb      	ldrb	r3, [r7, #14]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	da0b      	bge.n	800b194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b17c:	78fb      	ldrb	r3, [r7, #3]
 800b17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b182:	68f9      	ldr	r1, [r7, #12]
 800b184:	4613      	mov	r3, r2
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	440b      	add	r3, r1
 800b18e:	3316      	adds	r3, #22
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	e00b      	b.n	800b1ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b19a:	68f9      	ldr	r1, [r7, #12]
 800b19c:	4613      	mov	r3, r2
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b1aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1d2:	78fa      	ldrb	r2, [r7, #3]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7f7 febd 	bl	8002f56 <HAL_PCD_SetAddress>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f862 	bl	800b2ac <USBD_Get_USB_Status>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b086      	sub	sp, #24
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	603b      	str	r3, [r7, #0]
 800b202:	460b      	mov	r3, r1
 800b204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b214:	7af9      	ldrb	r1, [r7, #11]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	f7f7 ffaf 	bl	800317c <HAL_PCD_EP_Transmit>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	4618      	mov	r0, r3
 800b226:	f000 f841 	bl	800b2ac <USBD_Get_USB_Status>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b22e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	607a      	str	r2, [r7, #4]
 800b242:	603b      	str	r3, [r7, #0]
 800b244:	460b      	mov	r3, r1
 800b246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b256:	7af9      	ldrb	r1, [r7, #11]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	f7f7 ff53 	bl	8003106 <HAL_PCD_EP_Receive>
 800b260:	4603      	mov	r3, r0
 800b262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 f820 	bl	800b2ac <USBD_Get_USB_Status>
 800b26c:	4603      	mov	r3, r0
 800b26e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b270:	7dbb      	ldrb	r3, [r7, #22]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b284:	4b03      	ldr	r3, [pc, #12]	@ (800b294 <USBD_static_malloc+0x18>)
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	24001164 	.word	0x24001164

0800b298 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	d817      	bhi.n	800b2f0 <USBD_Get_USB_Status+0x44>
 800b2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c8 <USBD_Get_USB_Status+0x1c>)
 800b2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c6:	bf00      	nop
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b2df 	.word	0x0800b2df
 800b2d0:	0800b2e5 	.word	0x0800b2e5
 800b2d4:	0800b2eb 	.word	0x0800b2eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
    break;
 800b2dc:	e00b      	b.n	800b2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e2:	e008      	b.n	800b2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e8:	e005      	b.n	800b2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ee:	e002      	b.n	800b2f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f4:	bf00      	nop
  }
  return usb_status;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <siprintf>:
 800b304:	b40e      	push	{r1, r2, r3}
 800b306:	b500      	push	{lr}
 800b308:	b09c      	sub	sp, #112	@ 0x70
 800b30a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b30c:	9002      	str	r0, [sp, #8]
 800b30e:	9006      	str	r0, [sp, #24]
 800b310:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b314:	4809      	ldr	r0, [pc, #36]	@ (800b33c <siprintf+0x38>)
 800b316:	9107      	str	r1, [sp, #28]
 800b318:	9104      	str	r1, [sp, #16]
 800b31a:	4909      	ldr	r1, [pc, #36]	@ (800b340 <siprintf+0x3c>)
 800b31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b320:	9105      	str	r1, [sp, #20]
 800b322:	6800      	ldr	r0, [r0, #0]
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	a902      	add	r1, sp, #8
 800b328:	f000 f994 	bl	800b654 <_svfiprintf_r>
 800b32c:	9b02      	ldr	r3, [sp, #8]
 800b32e:	2200      	movs	r2, #0
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	b01c      	add	sp, #112	@ 0x70
 800b334:	f85d eb04 	ldr.w	lr, [sp], #4
 800b338:	b003      	add	sp, #12
 800b33a:	4770      	bx	lr
 800b33c:	240002c8 	.word	0x240002c8
 800b340:	ffff0208 	.word	0xffff0208

0800b344 <memset>:
 800b344:	4402      	add	r2, r0
 800b346:	4603      	mov	r3, r0
 800b348:	4293      	cmp	r3, r2
 800b34a:	d100      	bne.n	800b34e <memset+0xa>
 800b34c:	4770      	bx	lr
 800b34e:	f803 1b01 	strb.w	r1, [r3], #1
 800b352:	e7f9      	b.n	800b348 <memset+0x4>

0800b354 <__errno>:
 800b354:	4b01      	ldr	r3, [pc, #4]	@ (800b35c <__errno+0x8>)
 800b356:	6818      	ldr	r0, [r3, #0]
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	240002c8 	.word	0x240002c8

0800b360 <__libc_init_array>:
 800b360:	b570      	push	{r4, r5, r6, lr}
 800b362:	4d0d      	ldr	r5, [pc, #52]	@ (800b398 <__libc_init_array+0x38>)
 800b364:	4c0d      	ldr	r4, [pc, #52]	@ (800b39c <__libc_init_array+0x3c>)
 800b366:	1b64      	subs	r4, r4, r5
 800b368:	10a4      	asrs	r4, r4, #2
 800b36a:	2600      	movs	r6, #0
 800b36c:	42a6      	cmp	r6, r4
 800b36e:	d109      	bne.n	800b384 <__libc_init_array+0x24>
 800b370:	4d0b      	ldr	r5, [pc, #44]	@ (800b3a0 <__libc_init_array+0x40>)
 800b372:	4c0c      	ldr	r4, [pc, #48]	@ (800b3a4 <__libc_init_array+0x44>)
 800b374:	f000 fc66 	bl	800bc44 <_init>
 800b378:	1b64      	subs	r4, r4, r5
 800b37a:	10a4      	asrs	r4, r4, #2
 800b37c:	2600      	movs	r6, #0
 800b37e:	42a6      	cmp	r6, r4
 800b380:	d105      	bne.n	800b38e <__libc_init_array+0x2e>
 800b382:	bd70      	pop	{r4, r5, r6, pc}
 800b384:	f855 3b04 	ldr.w	r3, [r5], #4
 800b388:	4798      	blx	r3
 800b38a:	3601      	adds	r6, #1
 800b38c:	e7ee      	b.n	800b36c <__libc_init_array+0xc>
 800b38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b392:	4798      	blx	r3
 800b394:	3601      	adds	r6, #1
 800b396:	e7f2      	b.n	800b37e <__libc_init_array+0x1e>
 800b398:	0800be20 	.word	0x0800be20
 800b39c:	0800be20 	.word	0x0800be20
 800b3a0:	0800be20 	.word	0x0800be20
 800b3a4:	0800be24 	.word	0x0800be24

0800b3a8 <__retarget_lock_acquire_recursive>:
 800b3a8:	4770      	bx	lr

0800b3aa <__retarget_lock_release_recursive>:
 800b3aa:	4770      	bx	lr

0800b3ac <_free_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	2900      	cmp	r1, #0
 800b3b2:	d041      	beq.n	800b438 <_free_r+0x8c>
 800b3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3b8:	1f0c      	subs	r4, r1, #4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	bfb8      	it	lt
 800b3be:	18e4      	addlt	r4, r4, r3
 800b3c0:	f000 f8e0 	bl	800b584 <__malloc_lock>
 800b3c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b43c <_free_r+0x90>)
 800b3c6:	6813      	ldr	r3, [r2, #0]
 800b3c8:	b933      	cbnz	r3, 800b3d8 <_free_r+0x2c>
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	6014      	str	r4, [r2, #0]
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d4:	f000 b8dc 	b.w	800b590 <__malloc_unlock>
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	d908      	bls.n	800b3ee <_free_r+0x42>
 800b3dc:	6820      	ldr	r0, [r4, #0]
 800b3de:	1821      	adds	r1, r4, r0
 800b3e0:	428b      	cmp	r3, r1
 800b3e2:	bf01      	itttt	eq
 800b3e4:	6819      	ldreq	r1, [r3, #0]
 800b3e6:	685b      	ldreq	r3, [r3, #4]
 800b3e8:	1809      	addeq	r1, r1, r0
 800b3ea:	6021      	streq	r1, [r4, #0]
 800b3ec:	e7ed      	b.n	800b3ca <_free_r+0x1e>
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	b10b      	cbz	r3, 800b3f8 <_free_r+0x4c>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d9fa      	bls.n	800b3ee <_free_r+0x42>
 800b3f8:	6811      	ldr	r1, [r2, #0]
 800b3fa:	1850      	adds	r0, r2, r1
 800b3fc:	42a0      	cmp	r0, r4
 800b3fe:	d10b      	bne.n	800b418 <_free_r+0x6c>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	4401      	add	r1, r0
 800b404:	1850      	adds	r0, r2, r1
 800b406:	4283      	cmp	r3, r0
 800b408:	6011      	str	r1, [r2, #0]
 800b40a:	d1e0      	bne.n	800b3ce <_free_r+0x22>
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	6053      	str	r3, [r2, #4]
 800b412:	4408      	add	r0, r1
 800b414:	6010      	str	r0, [r2, #0]
 800b416:	e7da      	b.n	800b3ce <_free_r+0x22>
 800b418:	d902      	bls.n	800b420 <_free_r+0x74>
 800b41a:	230c      	movs	r3, #12
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	e7d6      	b.n	800b3ce <_free_r+0x22>
 800b420:	6820      	ldr	r0, [r4, #0]
 800b422:	1821      	adds	r1, r4, r0
 800b424:	428b      	cmp	r3, r1
 800b426:	bf04      	itt	eq
 800b428:	6819      	ldreq	r1, [r3, #0]
 800b42a:	685b      	ldreq	r3, [r3, #4]
 800b42c:	6063      	str	r3, [r4, #4]
 800b42e:	bf04      	itt	eq
 800b430:	1809      	addeq	r1, r1, r0
 800b432:	6021      	streq	r1, [r4, #0]
 800b434:	6054      	str	r4, [r2, #4]
 800b436:	e7ca      	b.n	800b3ce <_free_r+0x22>
 800b438:	bd38      	pop	{r3, r4, r5, pc}
 800b43a:	bf00      	nop
 800b43c:	240012bc 	.word	0x240012bc

0800b440 <sbrk_aligned>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	4e0f      	ldr	r6, [pc, #60]	@ (800b480 <sbrk_aligned+0x40>)
 800b444:	460c      	mov	r4, r1
 800b446:	6831      	ldr	r1, [r6, #0]
 800b448:	4605      	mov	r5, r0
 800b44a:	b911      	cbnz	r1, 800b452 <sbrk_aligned+0x12>
 800b44c:	f000 fba6 	bl	800bb9c <_sbrk_r>
 800b450:	6030      	str	r0, [r6, #0]
 800b452:	4621      	mov	r1, r4
 800b454:	4628      	mov	r0, r5
 800b456:	f000 fba1 	bl	800bb9c <_sbrk_r>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d103      	bne.n	800b466 <sbrk_aligned+0x26>
 800b45e:	f04f 34ff 	mov.w	r4, #4294967295
 800b462:	4620      	mov	r0, r4
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	1cc4      	adds	r4, r0, #3
 800b468:	f024 0403 	bic.w	r4, r4, #3
 800b46c:	42a0      	cmp	r0, r4
 800b46e:	d0f8      	beq.n	800b462 <sbrk_aligned+0x22>
 800b470:	1a21      	subs	r1, r4, r0
 800b472:	4628      	mov	r0, r5
 800b474:	f000 fb92 	bl	800bb9c <_sbrk_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	d1f2      	bne.n	800b462 <sbrk_aligned+0x22>
 800b47c:	e7ef      	b.n	800b45e <sbrk_aligned+0x1e>
 800b47e:	bf00      	nop
 800b480:	240012b8 	.word	0x240012b8

0800b484 <_malloc_r>:
 800b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b488:	1ccd      	adds	r5, r1, #3
 800b48a:	f025 0503 	bic.w	r5, r5, #3
 800b48e:	3508      	adds	r5, #8
 800b490:	2d0c      	cmp	r5, #12
 800b492:	bf38      	it	cc
 800b494:	250c      	movcc	r5, #12
 800b496:	2d00      	cmp	r5, #0
 800b498:	4606      	mov	r6, r0
 800b49a:	db01      	blt.n	800b4a0 <_malloc_r+0x1c>
 800b49c:	42a9      	cmp	r1, r5
 800b49e:	d904      	bls.n	800b4aa <_malloc_r+0x26>
 800b4a0:	230c      	movs	r3, #12
 800b4a2:	6033      	str	r3, [r6, #0]
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b580 <_malloc_r+0xfc>
 800b4ae:	f000 f869 	bl	800b584 <__malloc_lock>
 800b4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	bb44      	cbnz	r4, 800b50c <_malloc_r+0x88>
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f7ff ffbf 	bl	800b440 <sbrk_aligned>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	d158      	bne.n	800b57a <_malloc_r+0xf6>
 800b4c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b4cc:	4627      	mov	r7, r4
 800b4ce:	2f00      	cmp	r7, #0
 800b4d0:	d143      	bne.n	800b55a <_malloc_r+0xd6>
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	d04b      	beq.n	800b56e <_malloc_r+0xea>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	4639      	mov	r1, r7
 800b4da:	4630      	mov	r0, r6
 800b4dc:	eb04 0903 	add.w	r9, r4, r3
 800b4e0:	f000 fb5c 	bl	800bb9c <_sbrk_r>
 800b4e4:	4581      	cmp	r9, r0
 800b4e6:	d142      	bne.n	800b56e <_malloc_r+0xea>
 800b4e8:	6821      	ldr	r1, [r4, #0]
 800b4ea:	1a6d      	subs	r5, r5, r1
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f7ff ffa6 	bl	800b440 <sbrk_aligned>
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d03a      	beq.n	800b56e <_malloc_r+0xea>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	442b      	add	r3, r5
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b502:	685a      	ldr	r2, [r3, #4]
 800b504:	bb62      	cbnz	r2, 800b560 <_malloc_r+0xdc>
 800b506:	f8c8 7000 	str.w	r7, [r8]
 800b50a:	e00f      	b.n	800b52c <_malloc_r+0xa8>
 800b50c:	6822      	ldr	r2, [r4, #0]
 800b50e:	1b52      	subs	r2, r2, r5
 800b510:	d420      	bmi.n	800b554 <_malloc_r+0xd0>
 800b512:	2a0b      	cmp	r2, #11
 800b514:	d917      	bls.n	800b546 <_malloc_r+0xc2>
 800b516:	1961      	adds	r1, r4, r5
 800b518:	42a3      	cmp	r3, r4
 800b51a:	6025      	str	r5, [r4, #0]
 800b51c:	bf18      	it	ne
 800b51e:	6059      	strne	r1, [r3, #4]
 800b520:	6863      	ldr	r3, [r4, #4]
 800b522:	bf08      	it	eq
 800b524:	f8c8 1000 	streq.w	r1, [r8]
 800b528:	5162      	str	r2, [r4, r5]
 800b52a:	604b      	str	r3, [r1, #4]
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 f82f 	bl	800b590 <__malloc_unlock>
 800b532:	f104 000b 	add.w	r0, r4, #11
 800b536:	1d23      	adds	r3, r4, #4
 800b538:	f020 0007 	bic.w	r0, r0, #7
 800b53c:	1ac2      	subs	r2, r0, r3
 800b53e:	bf1c      	itt	ne
 800b540:	1a1b      	subne	r3, r3, r0
 800b542:	50a3      	strne	r3, [r4, r2]
 800b544:	e7af      	b.n	800b4a6 <_malloc_r+0x22>
 800b546:	6862      	ldr	r2, [r4, #4]
 800b548:	42a3      	cmp	r3, r4
 800b54a:	bf0c      	ite	eq
 800b54c:	f8c8 2000 	streq.w	r2, [r8]
 800b550:	605a      	strne	r2, [r3, #4]
 800b552:	e7eb      	b.n	800b52c <_malloc_r+0xa8>
 800b554:	4623      	mov	r3, r4
 800b556:	6864      	ldr	r4, [r4, #4]
 800b558:	e7ae      	b.n	800b4b8 <_malloc_r+0x34>
 800b55a:	463c      	mov	r4, r7
 800b55c:	687f      	ldr	r7, [r7, #4]
 800b55e:	e7b6      	b.n	800b4ce <_malloc_r+0x4a>
 800b560:	461a      	mov	r2, r3
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	42a3      	cmp	r3, r4
 800b566:	d1fb      	bne.n	800b560 <_malloc_r+0xdc>
 800b568:	2300      	movs	r3, #0
 800b56a:	6053      	str	r3, [r2, #4]
 800b56c:	e7de      	b.n	800b52c <_malloc_r+0xa8>
 800b56e:	230c      	movs	r3, #12
 800b570:	6033      	str	r3, [r6, #0]
 800b572:	4630      	mov	r0, r6
 800b574:	f000 f80c 	bl	800b590 <__malloc_unlock>
 800b578:	e794      	b.n	800b4a4 <_malloc_r+0x20>
 800b57a:	6005      	str	r5, [r0, #0]
 800b57c:	e7d6      	b.n	800b52c <_malloc_r+0xa8>
 800b57e:	bf00      	nop
 800b580:	240012bc 	.word	0x240012bc

0800b584 <__malloc_lock>:
 800b584:	4801      	ldr	r0, [pc, #4]	@ (800b58c <__malloc_lock+0x8>)
 800b586:	f7ff bf0f 	b.w	800b3a8 <__retarget_lock_acquire_recursive>
 800b58a:	bf00      	nop
 800b58c:	240012b4 	.word	0x240012b4

0800b590 <__malloc_unlock>:
 800b590:	4801      	ldr	r0, [pc, #4]	@ (800b598 <__malloc_unlock+0x8>)
 800b592:	f7ff bf0a 	b.w	800b3aa <__retarget_lock_release_recursive>
 800b596:	bf00      	nop
 800b598:	240012b4 	.word	0x240012b4

0800b59c <__ssputs_r>:
 800b59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a0:	688e      	ldr	r6, [r1, #8]
 800b5a2:	461f      	mov	r7, r3
 800b5a4:	42be      	cmp	r6, r7
 800b5a6:	680b      	ldr	r3, [r1, #0]
 800b5a8:	4682      	mov	sl, r0
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	4690      	mov	r8, r2
 800b5ae:	d82d      	bhi.n	800b60c <__ssputs_r+0x70>
 800b5b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5b8:	d026      	beq.n	800b608 <__ssputs_r+0x6c>
 800b5ba:	6965      	ldr	r5, [r4, #20]
 800b5bc:	6909      	ldr	r1, [r1, #16]
 800b5be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5c2:	eba3 0901 	sub.w	r9, r3, r1
 800b5c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5ca:	1c7b      	adds	r3, r7, #1
 800b5cc:	444b      	add	r3, r9
 800b5ce:	106d      	asrs	r5, r5, #1
 800b5d0:	429d      	cmp	r5, r3
 800b5d2:	bf38      	it	cc
 800b5d4:	461d      	movcc	r5, r3
 800b5d6:	0553      	lsls	r3, r2, #21
 800b5d8:	d527      	bpl.n	800b62a <__ssputs_r+0x8e>
 800b5da:	4629      	mov	r1, r5
 800b5dc:	f7ff ff52 	bl	800b484 <_malloc_r>
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	b360      	cbz	r0, 800b63e <__ssputs_r+0xa2>
 800b5e4:	6921      	ldr	r1, [r4, #16]
 800b5e6:	464a      	mov	r2, r9
 800b5e8:	f000 fae8 	bl	800bbbc <memcpy>
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5f6:	81a3      	strh	r3, [r4, #12]
 800b5f8:	6126      	str	r6, [r4, #16]
 800b5fa:	6165      	str	r5, [r4, #20]
 800b5fc:	444e      	add	r6, r9
 800b5fe:	eba5 0509 	sub.w	r5, r5, r9
 800b602:	6026      	str	r6, [r4, #0]
 800b604:	60a5      	str	r5, [r4, #8]
 800b606:	463e      	mov	r6, r7
 800b608:	42be      	cmp	r6, r7
 800b60a:	d900      	bls.n	800b60e <__ssputs_r+0x72>
 800b60c:	463e      	mov	r6, r7
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	4632      	mov	r2, r6
 800b612:	4641      	mov	r1, r8
 800b614:	f000 faa8 	bl	800bb68 <memmove>
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	1b9b      	subs	r3, r3, r6
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	4433      	add	r3, r6
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	2000      	movs	r0, #0
 800b626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62a:	462a      	mov	r2, r5
 800b62c:	f000 fad4 	bl	800bbd8 <_realloc_r>
 800b630:	4606      	mov	r6, r0
 800b632:	2800      	cmp	r0, #0
 800b634:	d1e0      	bne.n	800b5f8 <__ssputs_r+0x5c>
 800b636:	6921      	ldr	r1, [r4, #16]
 800b638:	4650      	mov	r0, sl
 800b63a:	f7ff feb7 	bl	800b3ac <_free_r>
 800b63e:	230c      	movs	r3, #12
 800b640:	f8ca 3000 	str.w	r3, [sl]
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e7e9      	b.n	800b626 <__ssputs_r+0x8a>
	...

0800b654 <_svfiprintf_r>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	4698      	mov	r8, r3
 800b65a:	898b      	ldrh	r3, [r1, #12]
 800b65c:	061b      	lsls	r3, r3, #24
 800b65e:	b09d      	sub	sp, #116	@ 0x74
 800b660:	4607      	mov	r7, r0
 800b662:	460d      	mov	r5, r1
 800b664:	4614      	mov	r4, r2
 800b666:	d510      	bpl.n	800b68a <_svfiprintf_r+0x36>
 800b668:	690b      	ldr	r3, [r1, #16]
 800b66a:	b973      	cbnz	r3, 800b68a <_svfiprintf_r+0x36>
 800b66c:	2140      	movs	r1, #64	@ 0x40
 800b66e:	f7ff ff09 	bl	800b484 <_malloc_r>
 800b672:	6028      	str	r0, [r5, #0]
 800b674:	6128      	str	r0, [r5, #16]
 800b676:	b930      	cbnz	r0, 800b686 <_svfiprintf_r+0x32>
 800b678:	230c      	movs	r3, #12
 800b67a:	603b      	str	r3, [r7, #0]
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295
 800b680:	b01d      	add	sp, #116	@ 0x74
 800b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	2340      	movs	r3, #64	@ 0x40
 800b688:	616b      	str	r3, [r5, #20]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b68e:	2320      	movs	r3, #32
 800b690:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b694:	f8cd 800c 	str.w	r8, [sp, #12]
 800b698:	2330      	movs	r3, #48	@ 0x30
 800b69a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b838 <_svfiprintf_r+0x1e4>
 800b69e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6a2:	f04f 0901 	mov.w	r9, #1
 800b6a6:	4623      	mov	r3, r4
 800b6a8:	469a      	mov	sl, r3
 800b6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ae:	b10a      	cbz	r2, 800b6b4 <_svfiprintf_r+0x60>
 800b6b0:	2a25      	cmp	r2, #37	@ 0x25
 800b6b2:	d1f9      	bne.n	800b6a8 <_svfiprintf_r+0x54>
 800b6b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6b8:	d00b      	beq.n	800b6d2 <_svfiprintf_r+0x7e>
 800b6ba:	465b      	mov	r3, fp
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff ff6b 	bl	800b59c <__ssputs_r>
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f000 80a7 	beq.w	800b81a <_svfiprintf_r+0x1c6>
 800b6cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6ce:	445a      	add	r2, fp
 800b6d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f000 809f 	beq.w	800b81a <_svfiprintf_r+0x1c6>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6e6:	f10a 0a01 	add.w	sl, sl, #1
 800b6ea:	9304      	str	r3, [sp, #16]
 800b6ec:	9307      	str	r3, [sp, #28]
 800b6ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6f4:	4654      	mov	r4, sl
 800b6f6:	2205      	movs	r2, #5
 800b6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6fc:	484e      	ldr	r0, [pc, #312]	@ (800b838 <_svfiprintf_r+0x1e4>)
 800b6fe:	f7f4 fe0f 	bl	8000320 <memchr>
 800b702:	9a04      	ldr	r2, [sp, #16]
 800b704:	b9d8      	cbnz	r0, 800b73e <_svfiprintf_r+0xea>
 800b706:	06d0      	lsls	r0, r2, #27
 800b708:	bf44      	itt	mi
 800b70a:	2320      	movmi	r3, #32
 800b70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b710:	0711      	lsls	r1, r2, #28
 800b712:	bf44      	itt	mi
 800b714:	232b      	movmi	r3, #43	@ 0x2b
 800b716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b71a:	f89a 3000 	ldrb.w	r3, [sl]
 800b71e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b720:	d015      	beq.n	800b74e <_svfiprintf_r+0xfa>
 800b722:	9a07      	ldr	r2, [sp, #28]
 800b724:	4654      	mov	r4, sl
 800b726:	2000      	movs	r0, #0
 800b728:	f04f 0c0a 	mov.w	ip, #10
 800b72c:	4621      	mov	r1, r4
 800b72e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b732:	3b30      	subs	r3, #48	@ 0x30
 800b734:	2b09      	cmp	r3, #9
 800b736:	d94b      	bls.n	800b7d0 <_svfiprintf_r+0x17c>
 800b738:	b1b0      	cbz	r0, 800b768 <_svfiprintf_r+0x114>
 800b73a:	9207      	str	r2, [sp, #28]
 800b73c:	e014      	b.n	800b768 <_svfiprintf_r+0x114>
 800b73e:	eba0 0308 	sub.w	r3, r0, r8
 800b742:	fa09 f303 	lsl.w	r3, r9, r3
 800b746:	4313      	orrs	r3, r2
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	46a2      	mov	sl, r4
 800b74c:	e7d2      	b.n	800b6f4 <_svfiprintf_r+0xa0>
 800b74e:	9b03      	ldr	r3, [sp, #12]
 800b750:	1d19      	adds	r1, r3, #4
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	9103      	str	r1, [sp, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	bfbb      	ittet	lt
 800b75a:	425b      	neglt	r3, r3
 800b75c:	f042 0202 	orrlt.w	r2, r2, #2
 800b760:	9307      	strge	r3, [sp, #28]
 800b762:	9307      	strlt	r3, [sp, #28]
 800b764:	bfb8      	it	lt
 800b766:	9204      	strlt	r2, [sp, #16]
 800b768:	7823      	ldrb	r3, [r4, #0]
 800b76a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b76c:	d10a      	bne.n	800b784 <_svfiprintf_r+0x130>
 800b76e:	7863      	ldrb	r3, [r4, #1]
 800b770:	2b2a      	cmp	r3, #42	@ 0x2a
 800b772:	d132      	bne.n	800b7da <_svfiprintf_r+0x186>
 800b774:	9b03      	ldr	r3, [sp, #12]
 800b776:	1d1a      	adds	r2, r3, #4
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	9203      	str	r2, [sp, #12]
 800b77c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b780:	3402      	adds	r4, #2
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b848 <_svfiprintf_r+0x1f4>
 800b788:	7821      	ldrb	r1, [r4, #0]
 800b78a:	2203      	movs	r2, #3
 800b78c:	4650      	mov	r0, sl
 800b78e:	f7f4 fdc7 	bl	8000320 <memchr>
 800b792:	b138      	cbz	r0, 800b7a4 <_svfiprintf_r+0x150>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	eba0 000a 	sub.w	r0, r0, sl
 800b79a:	2240      	movs	r2, #64	@ 0x40
 800b79c:	4082      	lsls	r2, r0
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	9304      	str	r3, [sp, #16]
 800b7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a8:	4824      	ldr	r0, [pc, #144]	@ (800b83c <_svfiprintf_r+0x1e8>)
 800b7aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7ae:	2206      	movs	r2, #6
 800b7b0:	f7f4 fdb6 	bl	8000320 <memchr>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d036      	beq.n	800b826 <_svfiprintf_r+0x1d2>
 800b7b8:	4b21      	ldr	r3, [pc, #132]	@ (800b840 <_svfiprintf_r+0x1ec>)
 800b7ba:	bb1b      	cbnz	r3, 800b804 <_svfiprintf_r+0x1b0>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	3307      	adds	r3, #7
 800b7c0:	f023 0307 	bic.w	r3, r3, #7
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	9303      	str	r3, [sp, #12]
 800b7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ca:	4433      	add	r3, r6
 800b7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ce:	e76a      	b.n	800b6a6 <_svfiprintf_r+0x52>
 800b7d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	e7a8      	b.n	800b72c <_svfiprintf_r+0xd8>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	3401      	adds	r4, #1
 800b7de:	9305      	str	r3, [sp, #20]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	f04f 0c0a 	mov.w	ip, #10
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ec:	3a30      	subs	r2, #48	@ 0x30
 800b7ee:	2a09      	cmp	r2, #9
 800b7f0:	d903      	bls.n	800b7fa <_svfiprintf_r+0x1a6>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0c6      	beq.n	800b784 <_svfiprintf_r+0x130>
 800b7f6:	9105      	str	r1, [sp, #20]
 800b7f8:	e7c4      	b.n	800b784 <_svfiprintf_r+0x130>
 800b7fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7fe:	4604      	mov	r4, r0
 800b800:	2301      	movs	r3, #1
 800b802:	e7f0      	b.n	800b7e6 <_svfiprintf_r+0x192>
 800b804:	ab03      	add	r3, sp, #12
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	462a      	mov	r2, r5
 800b80a:	4b0e      	ldr	r3, [pc, #56]	@ (800b844 <_svfiprintf_r+0x1f0>)
 800b80c:	a904      	add	r1, sp, #16
 800b80e:	4638      	mov	r0, r7
 800b810:	f3af 8000 	nop.w
 800b814:	1c42      	adds	r2, r0, #1
 800b816:	4606      	mov	r6, r0
 800b818:	d1d6      	bne.n	800b7c8 <_svfiprintf_r+0x174>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	065b      	lsls	r3, r3, #25
 800b81e:	f53f af2d 	bmi.w	800b67c <_svfiprintf_r+0x28>
 800b822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b824:	e72c      	b.n	800b680 <_svfiprintf_r+0x2c>
 800b826:	ab03      	add	r3, sp, #12
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	462a      	mov	r2, r5
 800b82c:	4b05      	ldr	r3, [pc, #20]	@ (800b844 <_svfiprintf_r+0x1f0>)
 800b82e:	a904      	add	r1, sp, #16
 800b830:	4638      	mov	r0, r7
 800b832:	f000 f879 	bl	800b928 <_printf_i>
 800b836:	e7ed      	b.n	800b814 <_svfiprintf_r+0x1c0>
 800b838:	0800bde4 	.word	0x0800bde4
 800b83c:	0800bdee 	.word	0x0800bdee
 800b840:	00000000 	.word	0x00000000
 800b844:	0800b59d 	.word	0x0800b59d
 800b848:	0800bdea 	.word	0x0800bdea

0800b84c <_printf_common>:
 800b84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	4616      	mov	r6, r2
 800b852:	4698      	mov	r8, r3
 800b854:	688a      	ldr	r2, [r1, #8]
 800b856:	690b      	ldr	r3, [r1, #16]
 800b858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b85c:	4293      	cmp	r3, r2
 800b85e:	bfb8      	it	lt
 800b860:	4613      	movlt	r3, r2
 800b862:	6033      	str	r3, [r6, #0]
 800b864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b868:	4607      	mov	r7, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	b10a      	cbz	r2, 800b872 <_printf_common+0x26>
 800b86e:	3301      	adds	r3, #1
 800b870:	6033      	str	r3, [r6, #0]
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	0699      	lsls	r1, r3, #26
 800b876:	bf42      	ittt	mi
 800b878:	6833      	ldrmi	r3, [r6, #0]
 800b87a:	3302      	addmi	r3, #2
 800b87c:	6033      	strmi	r3, [r6, #0]
 800b87e:	6825      	ldr	r5, [r4, #0]
 800b880:	f015 0506 	ands.w	r5, r5, #6
 800b884:	d106      	bne.n	800b894 <_printf_common+0x48>
 800b886:	f104 0a19 	add.w	sl, r4, #25
 800b88a:	68e3      	ldr	r3, [r4, #12]
 800b88c:	6832      	ldr	r2, [r6, #0]
 800b88e:	1a9b      	subs	r3, r3, r2
 800b890:	42ab      	cmp	r3, r5
 800b892:	dc26      	bgt.n	800b8e2 <_printf_common+0x96>
 800b894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b898:	6822      	ldr	r2, [r4, #0]
 800b89a:	3b00      	subs	r3, #0
 800b89c:	bf18      	it	ne
 800b89e:	2301      	movne	r3, #1
 800b8a0:	0692      	lsls	r2, r2, #26
 800b8a2:	d42b      	bmi.n	800b8fc <_printf_common+0xb0>
 800b8a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	47c8      	blx	r9
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	d01e      	beq.n	800b8f0 <_printf_common+0xa4>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	6922      	ldr	r2, [r4, #16]
 800b8b6:	f003 0306 	and.w	r3, r3, #6
 800b8ba:	2b04      	cmp	r3, #4
 800b8bc:	bf02      	ittt	eq
 800b8be:	68e5      	ldreq	r5, [r4, #12]
 800b8c0:	6833      	ldreq	r3, [r6, #0]
 800b8c2:	1aed      	subeq	r5, r5, r3
 800b8c4:	68a3      	ldr	r3, [r4, #8]
 800b8c6:	bf0c      	ite	eq
 800b8c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8cc:	2500      	movne	r5, #0
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	bfc4      	itt	gt
 800b8d2:	1a9b      	subgt	r3, r3, r2
 800b8d4:	18ed      	addgt	r5, r5, r3
 800b8d6:	2600      	movs	r6, #0
 800b8d8:	341a      	adds	r4, #26
 800b8da:	42b5      	cmp	r5, r6
 800b8dc:	d11a      	bne.n	800b914 <_printf_common+0xc8>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e008      	b.n	800b8f4 <_printf_common+0xa8>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4652      	mov	r2, sl
 800b8e6:	4641      	mov	r1, r8
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	47c8      	blx	r9
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d103      	bne.n	800b8f8 <_printf_common+0xac>
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f8:	3501      	adds	r5, #1
 800b8fa:	e7c6      	b.n	800b88a <_printf_common+0x3e>
 800b8fc:	18e1      	adds	r1, r4, r3
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	2030      	movs	r0, #48	@ 0x30
 800b902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b906:	4422      	add	r2, r4
 800b908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b90c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b910:	3302      	adds	r3, #2
 800b912:	e7c7      	b.n	800b8a4 <_printf_common+0x58>
 800b914:	2301      	movs	r3, #1
 800b916:	4622      	mov	r2, r4
 800b918:	4641      	mov	r1, r8
 800b91a:	4638      	mov	r0, r7
 800b91c:	47c8      	blx	r9
 800b91e:	3001      	adds	r0, #1
 800b920:	d0e6      	beq.n	800b8f0 <_printf_common+0xa4>
 800b922:	3601      	adds	r6, #1
 800b924:	e7d9      	b.n	800b8da <_printf_common+0x8e>
	...

0800b928 <_printf_i>:
 800b928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b92c:	7e0f      	ldrb	r7, [r1, #24]
 800b92e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b930:	2f78      	cmp	r7, #120	@ 0x78
 800b932:	4691      	mov	r9, r2
 800b934:	4680      	mov	r8, r0
 800b936:	460c      	mov	r4, r1
 800b938:	469a      	mov	sl, r3
 800b93a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b93e:	d807      	bhi.n	800b950 <_printf_i+0x28>
 800b940:	2f62      	cmp	r7, #98	@ 0x62
 800b942:	d80a      	bhi.n	800b95a <_printf_i+0x32>
 800b944:	2f00      	cmp	r7, #0
 800b946:	f000 80d2 	beq.w	800baee <_printf_i+0x1c6>
 800b94a:	2f58      	cmp	r7, #88	@ 0x58
 800b94c:	f000 80b9 	beq.w	800bac2 <_printf_i+0x19a>
 800b950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b958:	e03a      	b.n	800b9d0 <_printf_i+0xa8>
 800b95a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b95e:	2b15      	cmp	r3, #21
 800b960:	d8f6      	bhi.n	800b950 <_printf_i+0x28>
 800b962:	a101      	add	r1, pc, #4	@ (adr r1, 800b968 <_printf_i+0x40>)
 800b964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b968:	0800b9c1 	.word	0x0800b9c1
 800b96c:	0800b9d5 	.word	0x0800b9d5
 800b970:	0800b951 	.word	0x0800b951
 800b974:	0800b951 	.word	0x0800b951
 800b978:	0800b951 	.word	0x0800b951
 800b97c:	0800b951 	.word	0x0800b951
 800b980:	0800b9d5 	.word	0x0800b9d5
 800b984:	0800b951 	.word	0x0800b951
 800b988:	0800b951 	.word	0x0800b951
 800b98c:	0800b951 	.word	0x0800b951
 800b990:	0800b951 	.word	0x0800b951
 800b994:	0800bad5 	.word	0x0800bad5
 800b998:	0800b9ff 	.word	0x0800b9ff
 800b99c:	0800ba8f 	.word	0x0800ba8f
 800b9a0:	0800b951 	.word	0x0800b951
 800b9a4:	0800b951 	.word	0x0800b951
 800b9a8:	0800baf7 	.word	0x0800baf7
 800b9ac:	0800b951 	.word	0x0800b951
 800b9b0:	0800b9ff 	.word	0x0800b9ff
 800b9b4:	0800b951 	.word	0x0800b951
 800b9b8:	0800b951 	.word	0x0800b951
 800b9bc:	0800ba97 	.word	0x0800ba97
 800b9c0:	6833      	ldr	r3, [r6, #0]
 800b9c2:	1d1a      	adds	r2, r3, #4
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6032      	str	r2, [r6, #0]
 800b9c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e09d      	b.n	800bb10 <_printf_i+0x1e8>
 800b9d4:	6833      	ldr	r3, [r6, #0]
 800b9d6:	6820      	ldr	r0, [r4, #0]
 800b9d8:	1d19      	adds	r1, r3, #4
 800b9da:	6031      	str	r1, [r6, #0]
 800b9dc:	0606      	lsls	r6, r0, #24
 800b9de:	d501      	bpl.n	800b9e4 <_printf_i+0xbc>
 800b9e0:	681d      	ldr	r5, [r3, #0]
 800b9e2:	e003      	b.n	800b9ec <_printf_i+0xc4>
 800b9e4:	0645      	lsls	r5, r0, #25
 800b9e6:	d5fb      	bpl.n	800b9e0 <_printf_i+0xb8>
 800b9e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9ec:	2d00      	cmp	r5, #0
 800b9ee:	da03      	bge.n	800b9f8 <_printf_i+0xd0>
 800b9f0:	232d      	movs	r3, #45	@ 0x2d
 800b9f2:	426d      	negs	r5, r5
 800b9f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9f8:	4859      	ldr	r0, [pc, #356]	@ (800bb60 <_printf_i+0x238>)
 800b9fa:	230a      	movs	r3, #10
 800b9fc:	e011      	b.n	800ba22 <_printf_i+0xfa>
 800b9fe:	6821      	ldr	r1, [r4, #0]
 800ba00:	6833      	ldr	r3, [r6, #0]
 800ba02:	0608      	lsls	r0, r1, #24
 800ba04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba08:	d402      	bmi.n	800ba10 <_printf_i+0xe8>
 800ba0a:	0649      	lsls	r1, r1, #25
 800ba0c:	bf48      	it	mi
 800ba0e:	b2ad      	uxthmi	r5, r5
 800ba10:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba12:	4853      	ldr	r0, [pc, #332]	@ (800bb60 <_printf_i+0x238>)
 800ba14:	6033      	str	r3, [r6, #0]
 800ba16:	bf14      	ite	ne
 800ba18:	230a      	movne	r3, #10
 800ba1a:	2308      	moveq	r3, #8
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba22:	6866      	ldr	r6, [r4, #4]
 800ba24:	60a6      	str	r6, [r4, #8]
 800ba26:	2e00      	cmp	r6, #0
 800ba28:	bfa2      	ittt	ge
 800ba2a:	6821      	ldrge	r1, [r4, #0]
 800ba2c:	f021 0104 	bicge.w	r1, r1, #4
 800ba30:	6021      	strge	r1, [r4, #0]
 800ba32:	b90d      	cbnz	r5, 800ba38 <_printf_i+0x110>
 800ba34:	2e00      	cmp	r6, #0
 800ba36:	d04b      	beq.n	800bad0 <_printf_i+0x1a8>
 800ba38:	4616      	mov	r6, r2
 800ba3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ba42:	5dc7      	ldrb	r7, [r0, r7]
 800ba44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba48:	462f      	mov	r7, r5
 800ba4a:	42bb      	cmp	r3, r7
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	d9f4      	bls.n	800ba3a <_printf_i+0x112>
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d10b      	bne.n	800ba6c <_printf_i+0x144>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	07df      	lsls	r7, r3, #31
 800ba58:	d508      	bpl.n	800ba6c <_printf_i+0x144>
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	6861      	ldr	r1, [r4, #4]
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	bfde      	ittt	le
 800ba62:	2330      	movle	r3, #48	@ 0x30
 800ba64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba6c:	1b92      	subs	r2, r2, r6
 800ba6e:	6122      	str	r2, [r4, #16]
 800ba70:	f8cd a000 	str.w	sl, [sp]
 800ba74:	464b      	mov	r3, r9
 800ba76:	aa03      	add	r2, sp, #12
 800ba78:	4621      	mov	r1, r4
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	f7ff fee6 	bl	800b84c <_printf_common>
 800ba80:	3001      	adds	r0, #1
 800ba82:	d14a      	bne.n	800bb1a <_printf_i+0x1f2>
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	b004      	add	sp, #16
 800ba8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	f043 0320 	orr.w	r3, r3, #32
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	4833      	ldr	r0, [pc, #204]	@ (800bb64 <_printf_i+0x23c>)
 800ba98:	2778      	movs	r7, #120	@ 0x78
 800ba9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	6831      	ldr	r1, [r6, #0]
 800baa2:	061f      	lsls	r7, r3, #24
 800baa4:	f851 5b04 	ldr.w	r5, [r1], #4
 800baa8:	d402      	bmi.n	800bab0 <_printf_i+0x188>
 800baaa:	065f      	lsls	r7, r3, #25
 800baac:	bf48      	it	mi
 800baae:	b2ad      	uxthmi	r5, r5
 800bab0:	6031      	str	r1, [r6, #0]
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	bf44      	itt	mi
 800bab6:	f043 0320 	orrmi.w	r3, r3, #32
 800baba:	6023      	strmi	r3, [r4, #0]
 800babc:	b11d      	cbz	r5, 800bac6 <_printf_i+0x19e>
 800babe:	2310      	movs	r3, #16
 800bac0:	e7ac      	b.n	800ba1c <_printf_i+0xf4>
 800bac2:	4827      	ldr	r0, [pc, #156]	@ (800bb60 <_printf_i+0x238>)
 800bac4:	e7e9      	b.n	800ba9a <_printf_i+0x172>
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	f023 0320 	bic.w	r3, r3, #32
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	e7f6      	b.n	800babe <_printf_i+0x196>
 800bad0:	4616      	mov	r6, r2
 800bad2:	e7bd      	b.n	800ba50 <_printf_i+0x128>
 800bad4:	6833      	ldr	r3, [r6, #0]
 800bad6:	6825      	ldr	r5, [r4, #0]
 800bad8:	6961      	ldr	r1, [r4, #20]
 800bada:	1d18      	adds	r0, r3, #4
 800badc:	6030      	str	r0, [r6, #0]
 800bade:	062e      	lsls	r6, r5, #24
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	d501      	bpl.n	800bae8 <_printf_i+0x1c0>
 800bae4:	6019      	str	r1, [r3, #0]
 800bae6:	e002      	b.n	800baee <_printf_i+0x1c6>
 800bae8:	0668      	lsls	r0, r5, #25
 800baea:	d5fb      	bpl.n	800bae4 <_printf_i+0x1bc>
 800baec:	8019      	strh	r1, [r3, #0]
 800baee:	2300      	movs	r3, #0
 800baf0:	6123      	str	r3, [r4, #16]
 800baf2:	4616      	mov	r6, r2
 800baf4:	e7bc      	b.n	800ba70 <_printf_i+0x148>
 800baf6:	6833      	ldr	r3, [r6, #0]
 800baf8:	1d1a      	adds	r2, r3, #4
 800bafa:	6032      	str	r2, [r6, #0]
 800bafc:	681e      	ldr	r6, [r3, #0]
 800bafe:	6862      	ldr	r2, [r4, #4]
 800bb00:	2100      	movs	r1, #0
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7f4 fc0c 	bl	8000320 <memchr>
 800bb08:	b108      	cbz	r0, 800bb0e <_printf_i+0x1e6>
 800bb0a:	1b80      	subs	r0, r0, r6
 800bb0c:	6060      	str	r0, [r4, #4]
 800bb0e:	6863      	ldr	r3, [r4, #4]
 800bb10:	6123      	str	r3, [r4, #16]
 800bb12:	2300      	movs	r3, #0
 800bb14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb18:	e7aa      	b.n	800ba70 <_printf_i+0x148>
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	4649      	mov	r1, r9
 800bb20:	4640      	mov	r0, r8
 800bb22:	47d0      	blx	sl
 800bb24:	3001      	adds	r0, #1
 800bb26:	d0ad      	beq.n	800ba84 <_printf_i+0x15c>
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	079b      	lsls	r3, r3, #30
 800bb2c:	d413      	bmi.n	800bb56 <_printf_i+0x22e>
 800bb2e:	68e0      	ldr	r0, [r4, #12]
 800bb30:	9b03      	ldr	r3, [sp, #12]
 800bb32:	4298      	cmp	r0, r3
 800bb34:	bfb8      	it	lt
 800bb36:	4618      	movlt	r0, r3
 800bb38:	e7a6      	b.n	800ba88 <_printf_i+0x160>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4632      	mov	r2, r6
 800bb3e:	4649      	mov	r1, r9
 800bb40:	4640      	mov	r0, r8
 800bb42:	47d0      	blx	sl
 800bb44:	3001      	adds	r0, #1
 800bb46:	d09d      	beq.n	800ba84 <_printf_i+0x15c>
 800bb48:	3501      	adds	r5, #1
 800bb4a:	68e3      	ldr	r3, [r4, #12]
 800bb4c:	9903      	ldr	r1, [sp, #12]
 800bb4e:	1a5b      	subs	r3, r3, r1
 800bb50:	42ab      	cmp	r3, r5
 800bb52:	dcf2      	bgt.n	800bb3a <_printf_i+0x212>
 800bb54:	e7eb      	b.n	800bb2e <_printf_i+0x206>
 800bb56:	2500      	movs	r5, #0
 800bb58:	f104 0619 	add.w	r6, r4, #25
 800bb5c:	e7f5      	b.n	800bb4a <_printf_i+0x222>
 800bb5e:	bf00      	nop
 800bb60:	0800bdf5 	.word	0x0800bdf5
 800bb64:	0800be06 	.word	0x0800be06

0800bb68 <memmove>:
 800bb68:	4288      	cmp	r0, r1
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	eb01 0402 	add.w	r4, r1, r2
 800bb70:	d902      	bls.n	800bb78 <memmove+0x10>
 800bb72:	4284      	cmp	r4, r0
 800bb74:	4623      	mov	r3, r4
 800bb76:	d807      	bhi.n	800bb88 <memmove+0x20>
 800bb78:	1e43      	subs	r3, r0, #1
 800bb7a:	42a1      	cmp	r1, r4
 800bb7c:	d008      	beq.n	800bb90 <memmove+0x28>
 800bb7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb86:	e7f8      	b.n	800bb7a <memmove+0x12>
 800bb88:	4402      	add	r2, r0
 800bb8a:	4601      	mov	r1, r0
 800bb8c:	428a      	cmp	r2, r1
 800bb8e:	d100      	bne.n	800bb92 <memmove+0x2a>
 800bb90:	bd10      	pop	{r4, pc}
 800bb92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb9a:	e7f7      	b.n	800bb8c <memmove+0x24>

0800bb9c <_sbrk_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	@ (800bbb8 <_sbrk_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f5 fed6 	bl	8001958 <_sbrk>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_sbrk_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_sbrk_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	240012b0 	.word	0x240012b0

0800bbbc <memcpy>:
 800bbbc:	440a      	add	r2, r1
 800bbbe:	4291      	cmp	r1, r2
 800bbc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbc4:	d100      	bne.n	800bbc8 <memcpy+0xc>
 800bbc6:	4770      	bx	lr
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbd2:	4291      	cmp	r1, r2
 800bbd4:	d1f9      	bne.n	800bbca <memcpy+0xe>
 800bbd6:	bd10      	pop	{r4, pc}

0800bbd8 <_realloc_r>:
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	4680      	mov	r8, r0
 800bbde:	4615      	mov	r5, r2
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	b921      	cbnz	r1, 800bbee <_realloc_r+0x16>
 800bbe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	4611      	mov	r1, r2
 800bbea:	f7ff bc4b 	b.w	800b484 <_malloc_r>
 800bbee:	b92a      	cbnz	r2, 800bbfc <_realloc_r+0x24>
 800bbf0:	f7ff fbdc 	bl	800b3ac <_free_r>
 800bbf4:	2400      	movs	r4, #0
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	f000 f81a 	bl	800bc34 <_malloc_usable_size_r>
 800bc00:	4285      	cmp	r5, r0
 800bc02:	4606      	mov	r6, r0
 800bc04:	d802      	bhi.n	800bc0c <_realloc_r+0x34>
 800bc06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc0a:	d8f4      	bhi.n	800bbf6 <_realloc_r+0x1e>
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f7ff fc38 	bl	800b484 <_malloc_r>
 800bc14:	4607      	mov	r7, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d0ec      	beq.n	800bbf4 <_realloc_r+0x1c>
 800bc1a:	42b5      	cmp	r5, r6
 800bc1c:	462a      	mov	r2, r5
 800bc1e:	4621      	mov	r1, r4
 800bc20:	bf28      	it	cs
 800bc22:	4632      	movcs	r2, r6
 800bc24:	f7ff ffca 	bl	800bbbc <memcpy>
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	f7ff fbbe 	bl	800b3ac <_free_r>
 800bc30:	463c      	mov	r4, r7
 800bc32:	e7e0      	b.n	800bbf6 <_realloc_r+0x1e>

0800bc34 <_malloc_usable_size_r>:
 800bc34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc38:	1f18      	subs	r0, r3, #4
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bfbc      	itt	lt
 800bc3e:	580b      	ldrlt	r3, [r1, r0]
 800bc40:	18c0      	addlt	r0, r0, r3
 800bc42:	4770      	bx	lr

0800bc44 <_init>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	bf00      	nop
 800bc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc4a:	bc08      	pop	{r3}
 800bc4c:	469e      	mov	lr, r3
 800bc4e:	4770      	bx	lr

0800bc50 <_fini>:
 800bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc52:	bf00      	nop
 800bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc56:	bc08      	pop	{r3}
 800bc58:	469e      	mov	lr, r3
 800bc5a:	4770      	bx	lr
