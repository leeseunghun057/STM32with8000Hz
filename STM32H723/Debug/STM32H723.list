
STM32H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b238  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800b508  0800b508  0000c508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b798  0800b798  0000c798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b79c  0800b79c  0000c79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  24000000  0800b7a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c00  24000168  0800b908  0000d168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d68  0800b908  0000dd68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY
 10 .debug_info   000194d4  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003695  00000000  00000000  0002666a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001190  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d5c  00000000  00000000  0002ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000106db  00000000  00000000  0002bbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00006558  00000000  00000000  0003c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0004281f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004dc0  00000000  00000000  00042864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  00047624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b4f0 	.word	0x0800b4f0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	0800b4f0 	.word	0x0800b4f0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0d2      	sub	sp, #328	@ 0x148
 80006b4:	af04      	add	r7, sp, #16
 80006b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80006ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80006be:	6018      	str	r0, [r3, #0]
    static uint32_t Last_gpioG_state = 0;
    static uint32_t Last_gpioH_state = 0;
    //static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1100111111010100;
 80006c0:	4bcf      	ldr	r3, [pc, #828]	@ (8000a00 <MatrixScan+0x350>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	43da      	mvns	r2, r3
 80006c6:	f64c 73d4 	movw	r3, #53204	@ 0xcfd4
 80006ca:	4013      	ands	r3, r2
 80006cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100111111011100;
 80006d0:	4bcc      	ldr	r3, [pc, #816]	@ (8000a04 <MatrixScan+0x354>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	43da      	mvns	r2, r3
 80006d6:	f64c 73dc 	movw	r3, #53212	@ 0xcfdc
 80006da:	4013      	ands	r3, r2
 80006dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006e0:	4bc9      	ldr	r3, [pc, #804]	@ (8000a08 <MatrixScan+0x358>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	43da      	mvns	r2, r3
 80006e6:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006ea:	4013      	ands	r3, r2
 80006ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006f0:	4bc6      	ldr	r3, [pc, #792]	@ (8000a0c <MatrixScan+0x35c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111111111;
 80006fc:	4bc4      	ldr	r3, [pc, #784]	@ (8000a10 <MatrixScan+0x360>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	43db      	mvns	r3, r3
 8000702:	b29b      	uxth	r3, r3
 8000704:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 8000708:	4bc2      	ldr	r3, [pc, #776]	@ (8000a14 <MatrixScan+0x364>)
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	43db      	mvns	r3, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 8000714:	4bc0      	ldr	r3, [pc, #768]	@ (8000a18 <MatrixScan+0x368>)
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	43db      	mvns	r3, r3
 800071a:	b29b      	uxth	r3, r3
 800071c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b1111111111111100;
 8000720:	4bbe      	ldr	r3, [pc, #760]	@ (8000a1c <MatrixScan+0x36c>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	43da      	mvns	r2, r3
 8000726:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800072a:	4013      	ands	r3, r2
 800072c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    //uint32_t gpioI_state = (!(GPIOI->IDR)) & 1111111111111111;


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 8000730:	4bbb      	ldr	r3, [pc, #748]	@ (8000a20 <MatrixScan+0x370>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000738:	4053      	eors	r3, r2
 800073a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 800073e:	4bb9      	ldr	r3, [pc, #740]	@ (8000a24 <MatrixScan+0x374>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000746:	4053      	eors	r3, r2
 8000748:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 800074c:	4bb6      	ldr	r3, [pc, #728]	@ (8000a28 <MatrixScan+0x378>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000754:	4053      	eors	r3, r2
 8000756:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 800075a:	4bb4      	ldr	r3, [pc, #720]	@ (8000a2c <MatrixScan+0x37c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000762:	4053      	eors	r3, r2
 8000764:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 8000768:	4bb1      	ldr	r3, [pc, #708]	@ (8000a30 <MatrixScan+0x380>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000770:	4053      	eors	r3, r2
 8000772:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 8000776:	4baf      	ldr	r3, [pc, #700]	@ (8000a34 <MatrixScan+0x384>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800077e:	4053      	eors	r3, r2
 8000780:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 8000784:	4bac      	ldr	r3, [pc, #688]	@ (8000a38 <MatrixScan+0x388>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800078c:	4053      	eors	r3, r2
 800078e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
 8000792:	4baa      	ldr	r3, [pc, #680]	@ (8000a3c <MatrixScan+0x38c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800079a:	4053      	eors	r3, r2
 800079c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    //uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    result.pinState = -1;
 80007a8:	23ff      	movs	r3, #255	@ 0xff
 80007aa:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4


    char message[100];
    sprintf(message, "A = %u | B = %u | C = %u | D = %u | E = %u \n\r", gpioA_state,gpioB_state,gpioC_state,gpioG_state,gpioE_state );
 80007ae:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80007b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80007b6:	9302      	str	r3, [sp, #8]
 80007b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80007c8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80007cc:	499c      	ldr	r1, [pc, #624]	@ (8000a40 <MatrixScan+0x390>)
 80007ce:	f00a f9ef 	bl	800abb0 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80007d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd9a 	bl	8000310 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	4896      	ldr	r0, [pc, #600]	@ (8000a44 <MatrixScan+0x394>)
 80007ea:	f005 fa75 	bl	8005cd8 <HAL_UART_Transmit>
//    char message2[100];
  //  sprintf(message2, "A = %X | B = %X | C = %X | D = %X | E = %X \n\r", gpioA_state,gpioB_state,gpioC_state,gpioD_state,gpioE_state );
    //HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);

    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 80007ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d03a      	beq.n	800086c <MatrixScan+0x1bc>
    {
        int bitPosition = -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        while ( changedPinA )
 80007fe:	e009      	b.n	8000814 <MatrixScan+0x164>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 8000800:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            bitPosition++;
 800080a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800080e:	3301      	adds	r3, #1
 8000810:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        while ( changedPinA )
 8000814:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f1      	bne.n	8000800 <MatrixScan+0x150>
        }

        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 800081c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 8000824:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800082c:	fa22 f303 	lsr.w	r3, r2, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "A | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 800083c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000840:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000844:	f107 0008 	add.w	r0, r7, #8
 8000848:	497f      	ldr	r1, [pc, #508]	@ (8000a48 <MatrixScan+0x398>)
 800084a:	f00a f9b1 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fd5c 	bl	8000310 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f107 0108 	add.w	r1, r7, #8
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	4877      	ldr	r0, [pc, #476]	@ (8000a44 <MatrixScan+0x394>)
 8000866:	f005 fa37 	bl	8005cd8 <HAL_UART_Transmit>
 800086a:	e1e9      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinB != 0 )
 800086c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000870:	2b00      	cmp	r3, #0
 8000872:	d03b      	beq.n	80008ec <MatrixScan+0x23c>
    {
        int bitPosition = -1;
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while ( changedPinB )
 800087c:	e009      	b.n	8000892 <MatrixScan+0x1e2>
        {
            changedPinB >>= 1;
 800087e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000882:	085b      	lsrs	r3, r3, #1
 8000884:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
            bitPosition++;
 8000888:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800088c:	3301      	adds	r3, #1
 800088e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        while ( changedPinB )
 8000892:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f1      	bne.n	800087e <MatrixScan+0x1ce>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 800089a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800089e:	3310      	adds	r3, #16
 80008a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioB_state >> bitPosition) & 1;
 80008a4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80008a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008ac:	fa22 f303 	lsr.w	r3, r2, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "B | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80008bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80008c0:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80008c4:	f107 0008 	add.w	r0, r7, #8
 80008c8:	4960      	ldr	r1, [pc, #384]	@ (8000a4c <MatrixScan+0x39c>)
 80008ca:	f00a f971 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fd1c 	bl	8000310 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f107 0108 	add.w	r1, r7, #8
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	4857      	ldr	r0, [pc, #348]	@ (8000a44 <MatrixScan+0x394>)
 80008e6:	f005 f9f7 	bl	8005cd8 <HAL_UART_Transmit>
 80008ea:	e1a9      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinC != 0 )
 80008ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d03b      	beq.n	800096c <MatrixScan+0x2bc>
    {
        int bitPosition = -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        while ( changedPinC )
 80008fc:	e009      	b.n	8000912 <MatrixScan+0x262>
        {
            changedPinC >>= 1;
 80008fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000902:	085b      	lsrs	r3, r3, #1
 8000904:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            bitPosition++;
 8000908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800090c:	3301      	adds	r3, #1
 800090e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        while ( changedPinC )
 8000912:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f1      	bne.n	80008fe <MatrixScan+0x24e>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 800091a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800091e:	3320      	adds	r3, #32
 8000920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioC_state >> bitPosition) & 1;
 8000924:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800092c:	fa22 f303 	lsr.w	r3, r2, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "C | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 800093c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000940:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000944:	f107 0008 	add.w	r0, r7, #8
 8000948:	4941      	ldr	r1, [pc, #260]	@ (8000a50 <MatrixScan+0x3a0>)
 800094a:	f00a f931 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fcdc 	bl	8000310 <strlen>
 8000958:	4603      	mov	r3, r0
 800095a:	b29a      	uxth	r2, r3
 800095c:	f107 0108 	add.w	r1, r7, #8
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	4837      	ldr	r0, [pc, #220]	@ (8000a44 <MatrixScan+0x394>)
 8000966:	f005 f9b7 	bl	8005cd8 <HAL_UART_Transmit>
 800096a:	e169      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinD != 0 )
 800096c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000970:	2b00      	cmp	r3, #0
 8000972:	d03b      	beq.n	80009ec <MatrixScan+0x33c>
    {
        int bitPosition = -1;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        while ( changedPinD )
 800097c:	e009      	b.n	8000992 <MatrixScan+0x2e2>
        {
            changedPinD >>= 1;
 800097e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000982:	085b      	lsrs	r3, r3, #1
 8000984:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            bitPosition++;
 8000988:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800098c:	3301      	adds	r3, #1
 800098e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        while ( changedPinD )
 8000992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f1      	bne.n	800097e <MatrixScan+0x2ce>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 800099a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800099e:	3330      	adds	r3, #48	@ 0x30
 80009a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioD_state >> bitPosition) & 1;
 80009a4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80009a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80009bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009c0:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 80009c4:	f107 0008 	add.w	r0, r7, #8
 80009c8:	4922      	ldr	r1, [pc, #136]	@ (8000a54 <MatrixScan+0x3a4>)
 80009ca:	f00a f8f1 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fc9c 	bl	8000310 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f107 0108 	add.w	r1, r7, #8
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	4817      	ldr	r0, [pc, #92]	@ (8000a44 <MatrixScan+0x394>)
 80009e6:	f005 f977 	bl	8005cd8 <HAL_UART_Transmit>
 80009ea:	e129      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinE != 0 )
 80009ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d068      	beq.n	8000ac6 <MatrixScan+0x416>
    {
        int bitPosition = -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        while ( changedPinE )
 80009fc:	e036      	b.n	8000a6c <MatrixScan+0x3bc>
 80009fe:	bf00      	nop
 8000a00:	58020000 	.word	0x58020000
 8000a04:	58020400 	.word	0x58020400
 8000a08:	58020800 	.word	0x58020800
 8000a0c:	58020c00 	.word	0x58020c00
 8000a10:	58021000 	.word	0x58021000
 8000a14:	58021400 	.word	0x58021400
 8000a18:	58021800 	.word	0x58021800
 8000a1c:	58021c00 	.word	0x58021c00
 8000a20:	24000220 	.word	0x24000220
 8000a24:	24000224 	.word	0x24000224
 8000a28:	24000228 	.word	0x24000228
 8000a2c:	2400022c 	.word	0x2400022c
 8000a30:	24000230 	.word	0x24000230
 8000a34:	24000234 	.word	0x24000234
 8000a38:	24000238 	.word	0x24000238
 8000a3c:	2400023c 	.word	0x2400023c
 8000a40:	0800b508 	.word	0x0800b508
 8000a44:	24000184 	.word	0x24000184
 8000a48:	0800b538 	.word	0x0800b538
 8000a4c:	0800b560 	.word	0x0800b560
 8000a50:	0800b588 	.word	0x0800b588
 8000a54:	0800b5b0 	.word	0x0800b5b0
        {
            changedPinE >>= 1;
 8000a58:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a5c:	085b      	lsrs	r3, r3, #1
 8000a5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            bitPosition++;
 8000a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a66:	3301      	adds	r3, #1
 8000a68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        while ( changedPinE )
 8000a6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f1      	bne.n	8000a58 <MatrixScan+0x3a8>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a78:	3340      	adds	r3, #64	@ 0x40
 8000a7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000a7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000a86:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a9a:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000a9e:	f107 0008 	add.w	r0, r7, #8
 8000aa2:	4982      	ldr	r1, [pc, #520]	@ (8000cac <MatrixScan+0x5fc>)
 8000aa4:	f00a f884 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fc2f 	bl	8000310 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	f107 0108 	add.w	r1, r7, #8
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	487c      	ldr	r0, [pc, #496]	@ (8000cb0 <MatrixScan+0x600>)
 8000ac0:	f005 f90a 	bl	8005cd8 <HAL_UART_Transmit>
 8000ac4:	e0bc      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinF != 0 )
 8000ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d03b      	beq.n	8000b46 <MatrixScan+0x496>
    {
        int bitPosition = -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        while ( changedPinF )
 8000ad6:	e009      	b.n	8000aec <MatrixScan+0x43c>
        {
            changedPinF >>= 1;
 8000ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            bitPosition++;
 8000ae2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        while ( changedPinF )
 8000aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f1      	bne.n	8000ad8 <MatrixScan+0x428>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000af4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000af8:	3340      	adds	r3, #64	@ 0x40
 8000afa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000afe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000b02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000b06:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000b1a:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000b1e:	f107 0008 	add.w	r0, r7, #8
 8000b22:	4962      	ldr	r1, [pc, #392]	@ (8000cac <MatrixScan+0x5fc>)
 8000b24:	f00a f844 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fbef 	bl	8000310 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f107 0108 	add.w	r1, r7, #8
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	485c      	ldr	r0, [pc, #368]	@ (8000cb0 <MatrixScan+0x600>)
 8000b40:	f005 f8ca 	bl	8005cd8 <HAL_UART_Transmit>
 8000b44:	e07c      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinG != 0 )
 8000b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d03a      	beq.n	8000bc4 <MatrixScan+0x514>
    {
        int bitPosition = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        while ( changedPinG )
 8000b54:	e009      	b.n	8000b6a <MatrixScan+0x4ba>
        {
        	changedPinG >>= 1;
 8000b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
            bitPosition++;
 8000b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b64:	3301      	adds	r3, #1
 8000b66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
        while ( changedPinG )
 8000b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f1      	bne.n	8000b56 <MatrixScan+0x4a6>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b76:	3340      	adds	r3, #64	@ 0x40
 8000b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioG_state >> bitPosition) & 1;
 8000b7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000b94:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000b98:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000b9c:	f107 0008 	add.w	r0, r7, #8
 8000ba0:	4942      	ldr	r1, [pc, #264]	@ (8000cac <MatrixScan+0x5fc>)
 8000ba2:	f00a f805 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fbb0 	bl	8000310 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f107 0108 	add.w	r1, r7, #8
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	483c      	ldr	r0, [pc, #240]	@ (8000cb0 <MatrixScan+0x600>)
 8000bbe:	f005 f88b 	bl	8005cd8 <HAL_UART_Transmit>
 8000bc2:	e03d      	b.n	8000c40 <MatrixScan+0x590>

    }
    else if ( changedPinH != 0 )
 8000bc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d039      	beq.n	8000c40 <MatrixScan+0x590>
    {
        int bitPosition = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        while ( changedPinH )
 8000bd2:	e009      	b.n	8000be8 <MatrixScan+0x538>
        {
        	changedPinH >>= 1;
 8000bd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            bitPosition++;
 8000bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000be2:	3301      	adds	r3, #1
 8000be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        while ( changedPinH )
 8000be8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f1      	bne.n	8000bd4 <MatrixScan+0x524>
        }

        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000bf4:	3340      	adds	r3, #64	@ 0x40
 8000bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        result.pinState = (gpioH_state >> bitPosition) & 1;
 8000bfa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000c02:	fa22 f303 	lsr.w	r3, r2, r3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4

        char message[100];
        sprintf(message, "E | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 8000c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000c16:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000c1a:	f107 0008 	add.w	r0, r7, #8
 8000c1e:	4923      	ldr	r1, [pc, #140]	@ (8000cac <MatrixScan+0x5fc>)
 8000c20:	f009 ffc6 	bl	800abb0 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fb71 	bl	8000310 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	f107 0108 	add.w	r1, r7, #8
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <MatrixScan+0x600>)
 8000c3c:	f005 f84c 	bl	8005cd8 <HAL_UART_Transmit>




    // 이전 상태 업데이트
    Last_gpioA_state = gpioA_state;
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <MatrixScan+0x604>)
 8000c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000c46:	6013      	str	r3, [r2, #0]
    Last_gpioB_state = gpioB_state;
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <MatrixScan+0x608>)
 8000c4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000c4e:	6013      	str	r3, [r2, #0]
    Last_gpioC_state = gpioC_state;
 8000c50:	4a1a      	ldr	r2, [pc, #104]	@ (8000cbc <MatrixScan+0x60c>)
 8000c52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000c56:	6013      	str	r3, [r2, #0]
    Last_gpioD_state = gpioD_state;
 8000c58:	4a19      	ldr	r2, [pc, #100]	@ (8000cc0 <MatrixScan+0x610>)
 8000c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000c5e:	6013      	str	r3, [r2, #0]
    Last_gpioE_state = gpioE_state;
 8000c60:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <MatrixScan+0x614>)
 8000c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c66:	6013      	str	r3, [r2, #0]
    Last_gpioF_state = gpioF_state;
 8000c68:	4a17      	ldr	r2, [pc, #92]	@ (8000cc8 <MatrixScan+0x618>)
 8000c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c6e:	6013      	str	r3, [r2, #0]
    Last_gpioG_state = gpioG_state;
 8000c70:	4a16      	ldr	r2, [pc, #88]	@ (8000ccc <MatrixScan+0x61c>)
 8000c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000c76:	6013      	str	r3, [r2, #0]
    Last_gpioH_state = gpioH_state;
 8000c78:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <MatrixScan+0x620>)
 8000c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000c7e:	6013      	str	r3, [r2, #0]
    // Last_gpioI_state = gpioI_state;

    return result; // 변경된 핀 정보 반환
 8000c80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000c90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c94:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	0800b5d8 	.word	0x0800b5d8
 8000cb0:	24000184 	.word	0x24000184
 8000cb4:	24000220 	.word	0x24000220
 8000cb8:	24000224 	.word	0x24000224
 8000cbc:	24000228 	.word	0x24000228
 8000cc0:	2400022c 	.word	0x2400022c
 8000cc4:	24000230 	.word	0x24000230
 8000cc8:	24000234 	.word	0x24000234
 8000ccc:	24000238 	.word	0x24000238
 8000cd0:	2400023c 	.word	0x2400023c

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09e      	sub	sp, #120	@ 0x78
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000cda:	f000 f9d5 	bl	8001088 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f000 fbcb 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f851 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f90b 	bl	8000f00 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000cea:	f009 faa5 	bl	800a238 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000cee:	f000 f8bb 	bl	8000e68 <MX_UART4_Init>
    {
        //Timer = HAL_GetTick(); // Get Current Time

    	//CheckScanrate();

        if (HAL_GetTick() - LastTimer >= 10000)
 8000cf2:	f000 fc47 	bl	8001584 <HAL_GetTick>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <main+0xa0>)
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d927      	bls.n	8000d56 <main+0x82>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", HAL_GetTick(), Scanrate / 10);
 8000d06:	f000 fc3d 	bl	8001584 <HAL_GetTick>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <main+0xa4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1a      	ldr	r2, [pc, #104]	@ (8000d7c <main+0xa8>)
 8000d12:	fb82 0203 	smull	r0, r2, r2, r3
 8000d16:	1092      	asrs	r2, r2, #2
 8000d18:	17db      	asrs	r3, r3, #31
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	f107 000c 	add.w	r0, r7, #12
 8000d20:	460a      	mov	r2, r1
 8000d22:	4917      	ldr	r1, [pc, #92]	@ (8000d80 <main+0xac>)
 8000d24:	f009 ff44 	bl	800abb0 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff faef 	bl	8000310 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f107 010c 	add.w	r1, r7, #12
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <main+0xb0>)
 8000d40:	f004 ffca 	bl	8005cd8 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 8000d44:	f000 fc1e 	bl	8001584 <HAL_GetTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <main+0xa0>)
 8000d4e:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <main+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <main+0xa4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <main+0xa4>)
 8000d5e:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScan();
 8000d60:	463b      	mov	r3, r7
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fca4 	bl	80006b0 <MatrixScan>
        MatrixScanResult Matrix = MatrixScan();
 8000d68:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc9f 	bl	80006b0 <MatrixScan>
    {
 8000d72:	e7be      	b.n	8000cf2 <main+0x1e>
 8000d74:	2400021c 	.word	0x2400021c
 8000d78:	24000218 	.word	0x24000218
 8000d7c:	66666667 	.word	0x66666667
 8000d80:	0800b6b4 	.word	0x0800b6b4
 8000d84:	24000184 	.word	0x24000184

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09c      	sub	sp, #112	@ 0x70
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	224c      	movs	r2, #76	@ 0x4c
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f009 ff2a 	bl	800abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2220      	movs	r2, #32
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f009 ff24 	bl	800abf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000da8:	2002      	movs	r0, #2
 8000daa:	f002 f9d3 	bl	8003154 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <SystemClock_Config+0xdc>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <SystemClock_Config+0xdc>)
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <SystemClock_Config+0xdc>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dca:	bf00      	nop
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <SystemClock_Config+0xdc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dd8:	d1f8      	bne.n	8000dcc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000dda:	2321      	movs	r3, #33	@ 0x21
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dec:	2302      	movs	r3, #2
 8000dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000df0:	2305      	movs	r3, #5
 8000df2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8000df4:	236e      	movs	r3, #110	@ 0x6e
 8000df6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e04:	2308      	movs	r3, #8
 8000e06:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f9e7 	bl	80031e8 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e20:	f000 f95e 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	233f      	movs	r3, #63	@ 0x3f
 8000e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e30:	2308      	movs	r3, #8
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e34:	2340      	movs	r3, #64	@ 0x40
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e38:	2340      	movs	r3, #64	@ 0x40
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000e42:	2350      	movs	r3, #80	@ 0x50
 8000e44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2103      	movs	r1, #3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fda6 	bl	800399c <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e56:	f000 f943 	bl	80010e0 <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3770      	adds	r7, #112	@ 0x70
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	58024800 	.word	0x58024800

08000e68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e6e:	4a23      	ldr	r2, [pc, #140]	@ (8000efc <MX_UART4_Init+0x94>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eb0:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000eb2:	f004 fec1 	bl	8005c38 <HAL_UART_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f000 f910 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000ec4:	f006 f85b 	bl	8006f7e <HAL_UARTEx_SetTxFifoThreshold>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ece:	f000 f907 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000ed6:	f006 f890 	bl	8006ffa <HAL_UARTEx_SetRxFifoThreshold>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ee0:	f000 f8fe 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_UART4_Init+0x90>)
 8000ee6:	f006 f811 	bl	8006f0c <HAL_UARTEx_DisableFifoMode>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ef0:	f000 f8f6 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	24000184 	.word	0x24000184
 8000efc:	40004c00 	.word	0x40004c00

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	4b56      	ldr	r3, [pc, #344]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	4a54      	ldr	r2, [pc, #336]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f26:	4b52      	ldr	r3, [pc, #328]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	4b4e      	ldr	r3, [pc, #312]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f44:	4b4a      	ldr	r3, [pc, #296]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	4b47      	ldr	r3, [pc, #284]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	4a45      	ldr	r2, [pc, #276]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f62:	4b43      	ldr	r3, [pc, #268]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b3f      	ldr	r3, [pc, #252]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f76:	4a3e      	ldr	r2, [pc, #248]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f80:	4b3b      	ldr	r3, [pc, #236]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b38      	ldr	r3, [pc, #224]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	4a36      	ldr	r2, [pc, #216]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9e:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <MX_GPIO_Init+0x170>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000fca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4825      	ldr	r0, [pc, #148]	@ (8001074 <MX_GPIO_Init+0x174>)
 8000fe0:	f000 fc88 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8000fe4:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 8000fe8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <MX_GPIO_Init+0x178>)
 8000ffa:	f000 fc7b 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8000ffe:	f649 73d4 	movw	r3, #40916	@ 0x9fd4
 8001002:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	481a      	ldr	r0, [pc, #104]	@ (800107c <MX_GPIO_Init+0x17c>)
 8001014:	f000 fc6e 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB3 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001018:	f244 33dc 	movw	r3, #17372	@ 0x43dc
 800101c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <MX_GPIO_Init+0x180>)
 800102e:	f000 fc61 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001038:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	480d      	ldr	r0, [pc, #52]	@ (8001080 <MX_GPIO_Init+0x180>)
 800104a:	f000 fc53 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800104e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001052:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4808      	ldr	r0, [pc, #32]	@ (8001084 <MX_GPIO_Init+0x184>)
 8001064:	f000 fc46 	bl	80018f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	@ 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	58021000 	.word	0x58021000
 8001078:	58020800 	.word	0x58020800
 800107c:	58020000 	.word	0x58020000
 8001080:	58020400 	.word	0x58020400
 8001084:	58020c00 	.word	0x58020c00

08001088 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800109a:	f000 fbb3 	bl	8001804 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800109e:	2301      	movs	r3, #1
 80010a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010aa:	231f      	movs	r3, #31
 80010ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010ae:	2387      	movs	r3, #135	@ 0x87
 80010b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010b6:	2300      	movs	r3, #0
 80010b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010be:	2301      	movs	r3, #1
 80010c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fbd1 	bl	8001874 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010d2:	2004      	movs	r0, #4
 80010d4:	f000 fbae 	bl	8001834 <HAL_MPU_Enable>

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <Error_Handler+0x8>

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_MspInit+0x30>)
 80010f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f8:	4a08      	ldr	r2, [pc, #32]	@ (800111c <HAL_MspInit+0x30>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_MspInit+0x30>)
 8001104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	58024400 	.word	0x58024400

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0b8      	sub	sp, #224	@ 0xe0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	22b8      	movs	r2, #184	@ 0xb8
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f009 fd55 	bl	800abf0 <memset>
  if(huart->Instance==UART4)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <HAL_UART_MspInit+0xc4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d145      	bne.n	80011dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001150:	f04f 0202 	mov.w	r2, #2
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4618      	mov	r0, r3
 8001168:	f002 ffa4 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001172:	f7ff ffb5 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <HAL_UART_MspInit+0xc8>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117c:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <HAL_UART_MspInit+0xc8>)
 800117e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_UART_MspInit+0xc8>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_UART_MspInit+0xc8>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <HAL_UART_MspInit+0xc8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_UART_MspInit+0xc8>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011ca:	2308      	movs	r3, #8
 80011cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <HAL_UART_MspInit+0xcc>)
 80011d8:	f000 fb8c 	bl	80018f4 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80011dc:	bf00      	nop
 80011de:	37e0      	adds	r7, #224	@ 0xe0
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004c00 	.word	0x40004c00
 80011e8:	58024400 	.word	0x58024400
 80011ec:	58020000 	.word	0x58020000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001246:	f000 f989 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <OTG_HS_IRQHandler+0x10>)
 8001256:	f000 fe36 	bl	8001ec6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000728 	.word	0x24000728

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f009 fcb4 	bl	800ac00 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	24050000 	.word	0x24050000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	24000240 	.word	0x24000240
 80012cc:	24000d68 	.word	0x24000d68

080012d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d4:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <SystemInit+0x100>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <SystemInit+0x100>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <SystemInit+0x104>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d807      	bhi.n	8001300 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f0:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <SystemInit+0x104>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 030f 	bic.w	r3, r3, #15
 80012f8:	4a36      	ldr	r2, [pc, #216]	@ (80013d4 <SystemInit+0x104>)
 80012fa:	f043 0307 	orr.w	r3, r3, #7
 80012fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001300:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <SystemInit+0x108>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a34      	ldr	r2, [pc, #208]	@ (80013d8 <SystemInit+0x108>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800130c:	4b32      	ldr	r3, [pc, #200]	@ (80013d8 <SystemInit+0x108>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001312:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <SystemInit+0x108>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4930      	ldr	r1, [pc, #192]	@ (80013d8 <SystemInit+0x108>)
 8001318:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <SystemInit+0x10c>)
 800131a:	4013      	ands	r3, r2
 800131c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <SystemInit+0x104>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <SystemInit+0x104>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 030f 	bic.w	r3, r3, #15
 8001332:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <SystemInit+0x104>)
 8001334:	f043 0307 	orr.w	r3, r3, #7
 8001338:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800133a:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <SystemInit+0x108>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <SystemInit+0x108>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <SystemInit+0x108>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <SystemInit+0x108>)
 800134e:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <SystemInit+0x110>)
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <SystemInit+0x108>)
 8001354:	4a23      	ldr	r2, [pc, #140]	@ (80013e4 <SystemInit+0x114>)
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <SystemInit+0x108>)
 800135a:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <SystemInit+0x118>)
 800135c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <SystemInit+0x108>)
 8001360:	2200      	movs	r2, #0
 8001362:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001364:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <SystemInit+0x108>)
 8001366:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <SystemInit+0x118>)
 8001368:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800136a:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <SystemInit+0x108>)
 800136c:	2200      	movs	r2, #0
 800136e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <SystemInit+0x108>)
 8001372:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <SystemInit+0x118>)
 8001374:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <SystemInit+0x108>)
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <SystemInit+0x108>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <SystemInit+0x108>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001386:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <SystemInit+0x108>)
 800138a:	2200      	movs	r2, #0
 800138c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800138e:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <SystemInit+0x108>)
 8001390:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001394:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d113      	bne.n	80013c4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <SystemInit+0x108>)
 800139e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013a2:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <SystemInit+0x108>)
 80013a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <SystemInit+0x11c>)
 80013ae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013b2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <SystemInit+0x108>)
 80013b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013ba:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <SystemInit+0x108>)
 80013bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00
 80013d4:	52002000 	.word	0x52002000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e0:	02020200 	.word	0x02020200
 80013e4:	01ff0000 	.word	0x01ff0000
 80013e8:	01010280 	.word	0x01010280
 80013ec:	52004000 	.word	0x52004000

080013f0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <ExitRun0Mode+0x2c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <ExitRun0Mode+0x2c>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001400:	bf00      	nop
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <ExitRun0Mode+0x2c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f9      	beq.n	8001402 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	58024800 	.word	0x58024800

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800145c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001424:	f7ff ffe4 	bl	80013f0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001428:	f7ff ff52 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	@ (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	@ (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f009 fbdb 	bl	800ac0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff fc3d 	bl	8000cd4 <main>
  bx  lr
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001460:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001464:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8001468:	0800b7a0 	.word	0x0800b7a0
  ldr r2, =_sbss
 800146c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001470:	24000d68 	.word	0x24000d68

08001474 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC3_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f980 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001484:	f002 fc40 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_Init+0x68>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	4913      	ldr	r1, [pc, #76]	@ (80014e4 <HAL_Init+0x6c>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_Init+0x68>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <HAL_Init+0x6c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	4a0b      	ldr	r2, [pc, #44]	@ (80014e8 <HAL_Init+0x70>)
 80014ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014bc:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_Init+0x74>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c2:	200f      	movs	r0, #15
 80014c4:	f000 f814 	bl	80014f0 <HAL_InitTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e002      	b.n	80014d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014d2:	f7ff fe0b 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	58024400 	.word	0x58024400
 80014e4:	0800b724 	.word	0x0800b724
 80014e8:	24000004 	.word	0x24000004
 80014ec:	24000000 	.word	0x24000000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_InitTick+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e021      	b.n	8001548 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_InitTick+0x64>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f965 	bl	80017ea <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f92f 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_InitTick+0x68>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2400000c 	.word	0x2400000c
 8001554:	24000000 	.word	0x24000000
 8001558:	24000008 	.word	0x24000008

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2400000c 	.word	0x2400000c
 8001580:	24000244 	.word	0x24000244

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	24000244 	.word	0x24000244

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2400000c 	.word	0x2400000c

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	05fa0000 	.word	0x05fa0000

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff40 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff90 	bl	80016d8 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5f 	bl	8001684 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff33 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa4 	bl	8001740 <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001808:	f3bf 8f5f 	dmb	sy
}
 800180c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <HAL_MPU_Disable+0x28>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	4a06      	ldr	r2, [pc, #24]	@ (800182c <HAL_MPU_Disable+0x28>)
 8001814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001818:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_MPU_Disable+0x2c>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	e000ed90 	.word	0xe000ed90

08001834 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800183c:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <HAL_MPU_Enable+0x38>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_MPU_Enable+0x3c>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <HAL_MPU_Enable+0x3c>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001852:	f3bf 8f4f 	dsb	sy
}
 8001856:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001858:	f3bf 8f6f 	isb	sy
}
 800185c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed90 	.word	0xe000ed90
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	785a      	ldrb	r2, [r3, #1]
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001882:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <HAL_MPU_ConfigRegion+0x7c>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001890:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7adb      	ldrb	r3, [r3, #11]
 80018a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7a9b      	ldrb	r3, [r3, #10]
 80018aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7b5b      	ldrb	r3, [r3, #13]
 80018b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7b9b      	ldrb	r3, [r3, #14]
 80018ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7bdb      	ldrb	r3, [r3, #15]
 80018c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7a5b      	ldrb	r3, [r3, #9]
 80018ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7a1b      	ldrb	r3, [r3, #8]
 80018d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018e0:	6113      	str	r3, [r2, #16]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed90 	.word	0xe000ed90

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001902:	4b86      	ldr	r3, [pc, #536]	@ (8001b1c <HAL_GPIO_Init+0x228>)
 8001904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001906:	e18c      	b.n	8001c22 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 817e 	beq.w	8001c1c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_GPIO_Init+0x44>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 0201 	and.w	r2, r3, #1
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d017      	beq.n	80019d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d123      	bne.n	8001a2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	69b9      	ldr	r1, [r7, #24]
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80d8 	beq.w	8001c1c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <HAL_GPIO_Init+0x22c>)
 8001a6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a72:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <HAL_GPIO_Init+0x22c>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a7c:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <HAL_GPIO_Init+0x22c>)
 8001a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <HAL_GPIO_Init+0x230>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b28 <HAL_GPIO_Init+0x234>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d04a      	beq.n	8001b4c <HAL_GPIO_Init+0x258>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <HAL_GPIO_Init+0x238>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d02b      	beq.n	8001b16 <HAL_GPIO_Init+0x222>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <HAL_GPIO_Init+0x23c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d025      	beq.n	8001b12 <HAL_GPIO_Init+0x21e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b34 <HAL_GPIO_Init+0x240>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01f      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <HAL_GPIO_Init+0x244>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x216>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_GPIO_Init+0x248>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x212>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_GPIO_Init+0x24c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x20e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <HAL_GPIO_Init+0x250>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x20a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <HAL_GPIO_Init+0x254>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x206>
 8001af6:	2309      	movs	r3, #9
 8001af8:	e029      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001afa:	230a      	movs	r3, #10
 8001afc:	e027      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e025      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e023      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e021      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e01f      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e01d      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e01b      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e019      	b.n	8001b4e <HAL_GPIO_Init+0x25a>
 8001b1a:	bf00      	nop
 8001b1c:	58000080 	.word	0x58000080
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58000400 	.word	0x58000400
 8001b28:	58020000 	.word	0x58020000
 8001b2c:	58020400 	.word	0x58020400
 8001b30:	58020800 	.word	0x58020800
 8001b34:	58020c00 	.word	0x58020c00
 8001b38:	58021000 	.word	0x58021000
 8001b3c:	58021400 	.word	0x58021400
 8001b40:	58021800 	.word	0x58021800
 8001b44:	58021c00 	.word	0x58021c00
 8001b48:	58022400 	.word	0x58022400
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5e:	4938      	ldr	r1, [pc, #224]	@ (8001c40 <HAL_GPIO_Init+0x34c>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f ae6b 	bne.w	8001908 <HAL_GPIO_Init+0x14>
  }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3724      	adds	r7, #36	@ 0x24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	58000400 	.word	0x58000400

08001c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0fe      	b.n	8001e54 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f008 fc1c 	bl	800a4a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2203      	movs	r2, #3
 8001c74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f005 fb6e 	bl	800735e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7c1a      	ldrb	r2, [r3, #16]
 8001c8a:	f88d 2000 	strb.w	r2, [sp]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c92:	f005 fa3f 	bl	8007114 <USB_CoreInit>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d5      	b.n	8001e54 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 fb66 	bl	8007380 <USB_SetCurrentMode>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0c6      	b.n	8001e54 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e04a      	b.n	8001d62 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	3315      	adds	r3, #21
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	3314      	adds	r3, #20
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	b298      	uxth	r0, r3
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	332e      	adds	r3, #46	@ 0x2e
 8001d08:	4602      	mov	r2, r0
 8001d0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	331c      	adds	r3, #28
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3320      	adds	r3, #32
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3324      	adds	r3, #36	@ 0x24
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d3af      	bcc.n	8001ccc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e044      	b.n	8001dfc <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3b5      	bcc.n	8001d72 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7c1a      	ldrb	r2, [r3, #16]
 8001e0e:	f88d 2000 	strb.w	r2, [sp]
 8001e12:	3304      	adds	r3, #4
 8001e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e16:	f005 faff 	bl	8007418 <USB_DevInit>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e013      	b.n	8001e54 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7b1b      	ldrb	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f001 f956 	bl	80030f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f006 fb42 	bl	80084d6 <USB_DevDisconnect>

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_Start+0x1c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e022      	b.n	8001ebe <HAL_PCD_Start+0x62>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f005 fa49 	bl	800733c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 faf0 	bl	8008494 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ec6:	b590      	push	{r4, r7, lr}
 8001ec8:	b08d      	sub	sp, #52	@ 0x34
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f006 fbae 	bl	800863e <USB_GetMode>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 84b9 	bne.w	800285c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 fb12 	bl	8008518 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 84af 	beq.w	800285a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f006 faff 	bl	8008518 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d107      	bne.n	8001f34 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f002 0202 	and.w	r2, r2, #2
 8001f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f006 faed 	bl	8008518 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d161      	bne.n	800200c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0210 	bic.w	r2, r2, #16
 8001f56:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	0c5b      	lsrs	r3, r3, #17
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d124      	bne.n	8001fce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d035      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6a38      	ldr	r0, [r7, #32]
 8001fa4:	f006 f924 	bl	80081f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb4:	441a      	add	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	441a      	add	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	e016      	b.n	8001ffc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	0c5b      	lsrs	r3, r3, #17
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d110      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6a38      	ldr	r0, [r7, #32]
 8001fe6:	f006 f903 	bl	80081f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff6:	441a      	add	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0210 	orr.w	r2, r2, #16
 800200a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f006 fa81 	bl	8008518 <USB_ReadInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800201c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002020:	f040 80a7 	bne.w	8002172 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f006 fa86 	bl	800853e <USB_ReadDevAllOutEpInterrupt>
 8002032:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002034:	e099      	b.n	800216a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 808e 	beq.w	800215e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f006 faaa 	bl	80085a6 <USB_ReadDevOutEPInterrupt>
 8002052:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	2301      	movs	r3, #1
 800206e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 feb8 	bl	8002de8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2308      	movs	r3, #8
 8002092:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 ff8e 	bl	8002fb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	2310      	movs	r3, #16
 80020b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d030      	beq.n	8002124 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	2b80      	cmp	r3, #128	@ 0x80
 80020cc:	d109      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	78db      	ldrb	r3, [r3, #3]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d108      	bne.n	8002112 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2200      	movs	r2, #0
 8002104:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f008 fb4d 	bl	800a7ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800211e:	461a      	mov	r2, r3
 8002120:	2302      	movs	r3, #2
 8002122:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800213a:	461a      	mov	r2, r3
 800213c:	2320      	movs	r3, #32
 800213e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800215c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	3301      	adds	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800216a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f af62 	bne.w	8002036 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f006 f9ce 	bl	8008518 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002182:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002186:	f040 80db 	bne.w	8002340 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f006 f9ef 	bl	8008572 <USB_ReadDevAllInEpInterrupt>
 8002194:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800219a:	e0cd      	b.n	8002338 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800219c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80c2 	beq.w	800232c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f006 fa15 	bl	80085e2 <USB_ReadDevInEPInterrupt>
 80021b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d057      	beq.n	8002274 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	2201      	movs	r2, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69f9      	ldr	r1, [r7, #28]
 80021e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021e4:	4013      	ands	r3, r2
 80021e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021f4:	461a      	mov	r2, r3
 80021f6:	2301      	movs	r3, #1
 80021f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	799b      	ldrb	r3, [r3, #6]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d132      	bne.n	8002268 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	3320      	adds	r3, #32
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4403      	add	r3, r0
 8002222:	331c      	adds	r3, #28
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4419      	add	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4403      	add	r3, r0
 8002236:	3320      	adds	r3, #32
 8002238:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	2b00      	cmp	r3, #0
 800223e:	d113      	bne.n	8002268 <HAL_PCD_IRQHandler+0x3a2>
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3324      	adds	r3, #36	@ 0x24
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002260:	461a      	mov	r2, r3
 8002262:	2101      	movs	r1, #1
 8002264:	f006 fa1e 	bl	80086a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f008 fa17 	bl	800a6a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800228a:	461a      	mov	r2, r3
 800228c:	2308      	movs	r3, #8
 800228e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022a6:	461a      	mov	r2, r3
 80022a8:	2310      	movs	r3, #16
 80022aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022c2:	461a      	mov	r2, r3
 80022c4:	2340      	movs	r3, #64	@ 0x40
 80022c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d023      	beq.n	800231a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022d4:	6a38      	ldr	r0, [r7, #32]
 80022d6:	f005 f9fd 	bl	80076d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3310      	adds	r3, #16
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	3304      	adds	r3, #4
 80022ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	78db      	ldrb	r3, [r3, #3]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f008 fa64 	bl	800a7d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002314:	461a      	mov	r2, r3
 8002316:	2302      	movs	r3, #2
 8002318:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002324:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fcd2 	bl	8002cd0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	3301      	adds	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233a:	2b00      	cmp	r3, #0
 800233c:	f47f af2e 	bne.w	800219c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f006 f8e7 	bl	8008518 <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002354:	d122      	bne.n	800239c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800237c:	2100      	movs	r1, #0
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fedc 	bl	800313c <HAL_PCDEx_LPM_Callback>
 8002384:	e002      	b.n	800238c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f008 fa02 	bl	800a790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800239a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f006 f8b9 	bl	8008518 <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023b0:	d112      	bne.n	80023d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f008 f9be 	bl	800a744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80023d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f006 f89b 	bl	8008518 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ec:	d121      	bne.n	8002432 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80023fc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002404:	2b00      	cmp	r3, #0
 8002406:	d111      	bne.n	800242c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	f003 020f 	and.w	r2, r3, #15
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002422:	2101      	movs	r1, #1
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fe89 	bl	800313c <HAL_PCDEx_LPM_Callback>
 800242a:	e002      	b.n	8002432 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f008 f989 	bl	800a744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f006 f86e 	bl	8008518 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002446:	f040 80b7 	bne.w	80025b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2110      	movs	r1, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f005 f935 	bl	80076d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800246e:	e046      	b.n	80024fe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800247c:	461a      	mov	r2, r3
 800247e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002482:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	440a      	add	r2, r1
 800249a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800249e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b0:	461a      	mov	r2, r3
 80024b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80024b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80024d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80024f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fa:	3301      	adds	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	791b      	ldrb	r3, [r3, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002506:	4293      	cmp	r3, r2
 8002508:	d3b2      	bcc.n	8002470 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002518:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800251c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7bdb      	ldrb	r3, [r3, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800252c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002536:	f043 030b 	orr.w	r3, r3, #11
 800253a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800254c:	f043 030b 	orr.w	r3, r3, #11
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	e015      	b.n	8002580 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002562:	4619      	mov	r1, r3
 8002564:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002568:	4313      	orrs	r3, r2
 800256a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800257a:	f043 030b 	orr.w	r3, r3, #11
 800257e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800258e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002592:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025a2:	461a      	mov	r2, r3
 80025a4:	f006 f87e 	bl	80086a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80025b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f005 ffab 	bl	8008518 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025cc:	d123      	bne.n	8002616 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f006 f842 	bl	800865c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 f8f2 	bl	80077c6 <USB_GetDevSpeed>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681c      	ldr	r4, [r3, #0]
 80025ee:	f001 fd05 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 80025f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025f8:	461a      	mov	r2, r3
 80025fa:	4620      	mov	r0, r4
 80025fc:	f004 fdfc 	bl	80071f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f008 f876 	bl	800a6f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002614:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f005 ff7c 	bl	8008518 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b08      	cmp	r3, #8
 8002628:	d10a      	bne.n	8002640 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f008 f853 	bl	800a6d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f002 0208 	and.w	r2, r2, #8
 800263e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f005 ff67 	bl	8008518 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002650:	2b80      	cmp	r3, #128	@ 0x80
 8002652:	d123      	bne.n	800269c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002660:	2301      	movs	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
 8002664:	e014      	b.n	8002690 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 faf2 	bl	8002c6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	461a      	mov	r2, r3
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	4293      	cmp	r3, r2
 800269a:	d3e4      	bcc.n	8002666 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 ff39 	bl	8008518 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b0:	d13c      	bne.n	800272c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b6:	e02b      	b.n	8002710 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3318      	adds	r3, #24
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d115      	bne.n	800270a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da12      	bge.n	800270a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3317      	adds	r3, #23
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fab2 	bl	8002c6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	461a      	mov	r2, r3
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	4293      	cmp	r3, r2
 800271a:	d3cd      	bcc.n	80026b8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800272a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f005 fef1 	bl	8008518 <USB_ReadInterrupts>
 8002736:	4603      	mov	r3, r0
 8002738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800273c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002740:	d156      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002742:	2301      	movs	r3, #1
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
 8002746:	e045      	b.n	80027d4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d12e      	bne.n	80027ce <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002770:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	da2b      	bge.n	80027ce <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	0c1a      	lsrs	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002780:	4053      	eors	r3, r2
 8002782:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d121      	bne.n	80027ce <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ca:	6053      	str	r3, [r2, #4]
            break;
 80027cc:	e008      	b.n	80027e0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	3301      	adds	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	791b      	ldrb	r3, [r3, #4]
 80027d8:	461a      	mov	r2, r3
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	4293      	cmp	r3, r2
 80027de:	d3b3      	bcc.n	8002748 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80027ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fe8f 	bl	8008518 <USB_ReadInterrupts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002804:	d10a      	bne.n	800281c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f007 fff4 	bl	800a7f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800281a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f005 fe79 	bl	8008518 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d115      	bne.n	800285c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f007 ffe4 	bl	800a810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	e000      	b.n	800285c <HAL_PCD_IRQHandler+0x996>
      return;
 800285a:	bf00      	nop
    }
  }
}
 800285c:	3734      	adds	r7, #52	@ 0x34
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}

08002862 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_SetAddress+0x1a>
 8002878:	2302      	movs	r3, #2
 800287a:	e012      	b.n	80028a2 <HAL_PCD_SetAddress+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f005 fdd8 	bl	8008448 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	4608      	mov	r0, r1
 80028b4:	4611      	mov	r1, r2
 80028b6:	461a      	mov	r2, r3
 80028b8:	4603      	mov	r3, r0
 80028ba:	70fb      	strb	r3, [r7, #3]
 80028bc:	460b      	mov	r3, r1
 80028be:	803b      	strh	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da0f      	bge.n	80028f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	f003 020f 	and.w	r2, r3, #15
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3310      	adds	r3, #16
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	705a      	strb	r2, [r3, #1]
 80028ee:	e00f      	b.n	8002910 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	b2da      	uxtb	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800291c:	883b      	ldrh	r3, [r7, #0]
 800291e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	78ba      	ldrb	r2, [r7, #2]
 800292a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800293e:	78bb      	ldrb	r3, [r7, #2]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d102      	bne.n	800294a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_PCD_EP_Open+0xae>
 8002954:	2302      	movs	r3, #2
 8002956:	e00e      	b.n	8002976 <HAL_PCD_EP_Open+0xcc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 ff52 	bl	8007810 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002974:	7afb      	ldrb	r3, [r7, #11]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800298a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	da0f      	bge.n	80029b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3310      	adds	r3, #16
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
 80029b0:	e00f      	b.n	80029d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_PCD_EP_Close+0x6e>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e00e      	b.n	8002a0a <HAL_PCD_EP_Close+0x8c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 ff90 	bl	8007920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f003 020f 	and.w	r2, r3, #15
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	3304      	adds	r3, #4
 8002a3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	799b      	ldrb	r3, [r3, #6]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d102      	bne.n	8002a6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	799b      	ldrb	r3, [r3, #6]
 8002a76:	461a      	mov	r2, r3
 8002a78:	6979      	ldr	r1, [r7, #20]
 8002a7a:	f005 f82d 	bl	8007ad8 <USB_EPStartXfer>

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	799b      	ldrb	r3, [r3, #6]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d102      	bne.n	8002ae2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	799b      	ldrb	r3, [r3, #6]
 8002aea:	461a      	mov	r2, r3
 8002aec:	6979      	ldr	r1, [r7, #20]
 8002aee:	f004 fff3 	bl	8007ad8 <USB_EPStartXfer>

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	7912      	ldrb	r2, [r2, #4]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e04f      	b.n	8002bba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0f      	bge.n	8002b42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3310      	adds	r3, #16
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	705a      	strb	r2, [r3, #1]
 8002b40:	e00d      	b.n	8002b5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_PCD_EP_SetStall+0x82>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e01d      	b.n	8002bba <HAL_PCD_EP_SetStall+0xbe>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f005 fb87 	bl	80082a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7999      	ldrb	r1, [r3, #6]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002baa:	461a      	mov	r2, r3
 8002bac:	f005 fd7a 	bl	80086a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	7912      	ldrb	r2, [r2, #4]
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e042      	b.n	8002c66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da0f      	bge.n	8002c08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	3310      	adds	r3, #16
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	705a      	strb	r2, [r3, #1]
 8002c06:	e00f      	b.n	8002c28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_PCD_EP_ClrStall+0x86>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e00e      	b.n	8002c66 <HAL_PCD_EP_ClrStall+0xa4>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68f9      	ldr	r1, [r7, #12]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 fb90 	bl	800837c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	da0c      	bge.n	8002c9c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3310      	adds	r3, #16
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e00c      	b.n	8002cb6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	f003 020f 	and.w	r2, r3, #15
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 f9af 	bl	8008020 <USB_EPStopXfer>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	3310      	adds	r3, #16
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d901      	bls.n	8002d08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e06b      	b.n	8002de0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d902      	bls.n	8002d24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3303      	adds	r3, #3
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d2c:	e02a      	b.n	8002d84 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d902      	bls.n	8002d4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3303      	adds	r3, #3
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68d9      	ldr	r1, [r3, #12]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4603      	mov	r3, r0
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f005 fa04 	bl	8008174 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	441a      	add	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d809      	bhi.n	8002dae <PCD_WriteEmptyTxFifo+0xde>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d203      	bcs.n	8002dae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1bf      	bne.n	8002d2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d811      	bhi.n	8002dde <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	6939      	ldr	r1, [r7, #16]
 8002dd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002dda:	4013      	ands	r3, r2
 8002ddc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	333c      	adds	r3, #60	@ 0x3c
 8002e00:	3304      	adds	r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	799b      	ldrb	r3, [r3, #6]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d17b      	bne.n	8002f16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	4a61      	ldr	r2, [pc, #388]	@ (8002fb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f240 80b9 	bls.w	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80b3 	beq.w	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e50:	6093      	str	r3, [r2, #8]
 8002e52:	e0a7      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	6093      	str	r3, [r2, #8]
 8002e70:	e098      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 8093 	bne.w	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d90f      	bls.n	8002ea6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ea2:	6093      	str	r3, [r2, #8]
 8002ea4:	e07e      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	0159      	lsls	r1, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed2:	1ad2      	subs	r2, r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d114      	bne.n	8002f08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	f005 fbd6 	bl	80086a4 <USB_EP0_OutStart>
 8002ef8:	e006      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	441a      	add	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f007 fbac 	bl	800a66c <HAL_PCD_DataOutStageCallback>
 8002f14:	e046      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4a26      	ldr	r2, [pc, #152]	@ (8002fb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d124      	bne.n	8002f68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3a:	6093      	str	r3, [r2, #8]
 8002f3c:	e032      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f54:	461a      	mov	r2, r3
 8002f56:	2320      	movs	r3, #32
 8002f58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f007 fb83 	bl	800a66c <HAL_PCD_DataOutStageCallback>
 8002f66:	e01d      	b.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d114      	bne.n	8002f98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f90:	461a      	mov	r2, r3
 8002f92:	2100      	movs	r1, #0
 8002f94:	f005 fb86 	bl	80086a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f007 fb64 	bl	800a66c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	4f54300a 	.word	0x4f54300a
 8002fb4:	4f54310a 	.word	0x4f54310a

08002fb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	333c      	adds	r3, #60	@ 0x3c
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a15      	ldr	r2, [pc, #84]	@ (8003040 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d90e      	bls.n	800300c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003004:	461a      	mov	r2, r3
 8003006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800300a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f007 fb1b 	bl	800a648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <PCD_EP_OutSetupPacket_int+0x88>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d90c      	bls.n	8003034 <PCD_EP_OutSetupPacket_int+0x7c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	799b      	ldrb	r3, [r3, #6]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800302c:	461a      	mov	r2, r3
 800302e:	2101      	movs	r1, #1
 8003030:	f005 fb38 	bl	80086a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	4f54300a 	.word	0x4f54300a

08003044 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
 8003050:	4613      	mov	r3, r2
 8003052:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003062:	883b      	ldrh	r3, [r7, #0]
 8003064:	0419      	lsls	r1, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	430a      	orrs	r2, r1
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003070:	e028      	b.n	80030c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4413      	add	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e00d      	b.n	80030a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	3340      	adds	r3, #64	@ 0x40
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	3301      	adds	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3ec      	bcc.n	8003086 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030ac:	883b      	ldrh	r3, [r7, #0]
 80030ae:	0418      	lsls	r0, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	4302      	orrs	r2, r0
 80030bc:	3340      	adds	r3, #64	@ 0x40
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003122:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <HAL_PCDEx_ActivateLPM+0x44>)
 8003124:	4313      	orrs	r3, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	10000003 	.word	0x10000003

0800313c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800315c:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_PWREx_ConfigSupply+0x70>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d00a      	beq.n	800317e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003168:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <HAL_PWREx_ConfigSupply+0x70>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	429a      	cmp	r2, r3
 8003174:	d001      	beq.n	800317a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01f      	b.n	80031ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e01d      	b.n	80031ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f023 0207 	bic.w	r2, r3, #7
 8003186:	490f      	ldr	r1, [pc, #60]	@ (80031c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800318e:	f7fe f9f9 	bl	8001584 <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003194:	e009      	b.n	80031aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003196:	f7fe f9f5 	bl	8001584 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031a4:	d901      	bls.n	80031aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e007      	b.n	80031ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_PWREx_ConfigSupply+0x70>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b6:	d1ee      	bne.n	8003196 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	58024800 	.word	0x58024800

080031c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	58024800 	.word	0x58024800

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	@ 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e3c8      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003208:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003212:	4b86      	ldr	r3, [pc, #536]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	2b10      	cmp	r3, #16
 800321c:	d007      	beq.n	800322e <HAL_RCC_OscConfig+0x46>
 800321e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003220:	2b18      	cmp	r3, #24
 8003222:	d110      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x12c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e3a2      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x76>
 8003250:	4b76      	ldr	r3, [pc, #472]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a75      	ldr	r2, [pc, #468]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b71      	ldr	r3, [pc, #452]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a70      	ldr	r2, [pc, #448]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6e      	ldr	r3, [pc, #440]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6d      	ldr	r2, [pc, #436]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xbc>
 800328a:	4b68      	ldr	r3, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a67      	ldr	r2, [pc, #412]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b65      	ldr	r3, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a64      	ldr	r2, [pc, #400]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 80032a4:	4b61      	ldr	r3, [pc, #388]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a60      	ldr	r2, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b5e      	ldr	r3, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a5d      	ldr	r2, [pc, #372]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f95e 	bl	8001584 <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe f95a 	bl	8001584 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e356      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032de:	4b53      	ldr	r3, [pc, #332]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xe4>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe f94a 	bl	8001584 <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe f946 	bl	8001584 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e342      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003306:	4b49      	ldr	r3, [pc, #292]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x10c>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 808c 	beq.w	800343c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003324:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800332c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332e:	4b3f      	ldr	r3, [pc, #252]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_RCC_OscConfig+0x162>
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	2b18      	cmp	r3, #24
 800333e:	d137      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1c8>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d132      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334a:	4b38      	ldr	r3, [pc, #224]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x17a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e314      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003362:	4b32      	ldr	r3, [pc, #200]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 0219 	bic.w	r2, r3, #25
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	492f      	ldr	r1, [pc, #188]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f906 	bl	8001584 <HAL_GetTick>
 8003378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe f902 	bl	8001584 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e2fe      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338e:	4b27      	ldr	r3, [pc, #156]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	061b      	lsls	r3, r3, #24
 80033a8:	4920      	ldr	r1, [pc, #128]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ae:	e045      	b.n	800343c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d026      	beq.n	8003406 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033b8:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 0219 	bic.w	r2, r3, #25
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4919      	ldr	r1, [pc, #100]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe f8db 	bl	8001584 <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fe f8d7 	bl	8001584 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e2d3      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	490b      	ldr	r1, [pc, #44]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	e01a      	b.n	800343c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003406:	4b09      	ldr	r3, [pc, #36]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a08      	ldr	r2, [pc, #32]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe f8b7 	bl	8001584 <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe f8b3 	bl	8001584 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d903      	bls.n	8003430 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e2af      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
 800342c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003430:	4b96      	ldr	r3, [pc, #600]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ee      	bne.n	800341a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d06a      	beq.n	800351e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003448:	4b90      	ldr	r3, [pc, #576]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003450:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003452:	4b8e      	ldr	r3, [pc, #568]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003456:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d007      	beq.n	800346e <HAL_RCC_OscConfig+0x286>
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b18      	cmp	r3, #24
 8003462:	d11b      	bne.n	800349c <HAL_RCC_OscConfig+0x2b4>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d116      	bne.n	800349c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800346e:	4b87      	ldr	r3, [pc, #540]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x29e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b80      	cmp	r3, #128	@ 0x80
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e282      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003486:	4b81      	ldr	r3, [pc, #516]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	497d      	ldr	r1, [pc, #500]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800349a:	e040      	b.n	800351e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034a4:	4b79      	ldr	r3, [pc, #484]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a78      	ldr	r2, [pc, #480]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe f868 	bl	8001584 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034b8:	f7fe f864 	bl	8001584 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e260      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ca:	4b70      	ldr	r3, [pc, #448]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d6:	4b6d      	ldr	r3, [pc, #436]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	061b      	lsls	r3, r3, #24
 80034e4:	4969      	ldr	r1, [pc, #420]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
 80034ea:	e018      	b.n	800351e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034ec:	4b67      	ldr	r3, [pc, #412]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a66      	ldr	r2, [pc, #408]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80034f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe f844 	bl	8001584 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003500:	f7fe f840 	bl	8001584 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e23c      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003512:	4b5e      	ldr	r3, [pc, #376]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d036      	beq.n	8003598 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b56      	ldr	r3, [pc, #344]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003536:	4a55      	ldr	r2, [pc, #340]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe f821 	bl	8001584 <HAL_GetTick>
 8003542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe f81d 	bl	8001584 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e219      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003558:	4b4c      	ldr	r3, [pc, #304]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x35e>
 8003564:	e018      	b.n	8003598 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b49      	ldr	r3, [pc, #292]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356a:	4a48      	ldr	r2, [pc, #288]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe f807 	bl	8001584 <HAL_GetTick>
 8003576:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fe f803 	bl	8001584 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1ff      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800358c:	4b3f      	ldr	r3, [pc, #252]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d036      	beq.n	8003612 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035ac:	4b37      	ldr	r3, [pc, #220]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a36      	ldr	r2, [pc, #216]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80035b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035b8:	f7fd ffe4 	bl	8001584 <HAL_GetTick>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c0:	f7fd ffe0 	bl	8001584 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1dc      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035d2:	4b2e      	ldr	r3, [pc, #184]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x3d8>
 80035de:	e018      	b.n	8003612 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035e0:	4b2a      	ldr	r3, [pc, #168]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a29      	ldr	r2, [pc, #164]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 80035e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ec:	f7fd ffca 	bl	8001584 <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f4:	f7fd ffc6 	bl	8001584 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1c2      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003606:	4b21      	ldr	r3, [pc, #132]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8086 	beq.w	800372c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCC_OscConfig+0x4a8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1a      	ldr	r2, [pc, #104]	@ (8003690 <HAL_RCC_OscConfig+0x4a8>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800362a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800362c:	f7fd ffaa 	bl	8001584 <HAL_GetTick>
 8003630:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fd ffa6 	bl	8001584 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1a2      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003646:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <HAL_RCC_OscConfig+0x4a8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x480>
 800365a:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a0b      	ldr	r2, [pc, #44]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	e032      	b.n	80036ce <HAL_RCC_OscConfig+0x4e6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d111      	bne.n	8003694 <HAL_RCC_OscConfig+0x4ac>
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a05      	ldr	r2, [pc, #20]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
 800367c:	4b03      	ldr	r3, [pc, #12]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a02      	ldr	r2, [pc, #8]	@ (800368c <HAL_RCC_OscConfig+0x4a4>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	e021      	b.n	80036ce <HAL_RCC_OscConfig+0x4e6>
 800368a:	bf00      	nop
 800368c:	58024400 	.word	0x58024400
 8003690:	58024800 	.word	0x58024800
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d10c      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4ce>
 800369c:	4b83      	ldr	r3, [pc, #524]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a0:	4a82      	ldr	r2, [pc, #520]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a8:	4b80      	ldr	r3, [pc, #512]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	4a7f      	ldr	r2, [pc, #508]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b4:	e00b      	b.n	80036ce <HAL_RCC_OscConfig+0x4e6>
 80036b6:	4b7d      	ldr	r3, [pc, #500]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	4a7c      	ldr	r2, [pc, #496]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c2:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a79      	ldr	r2, [pc, #484]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d015      	beq.n	8003702 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd ff55 	bl	8001584 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd ff51 	bl	8001584 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e14b      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f4:	4b6d      	ldr	r3, [pc, #436]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ee      	beq.n	80036de <HAL_RCC_OscConfig+0x4f6>
 8003700:	e014      	b.n	800372c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fd ff3f 	bl	8001584 <HAL_GetTick>
 8003706:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd ff3b 	bl	8001584 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e135      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003720:	4b62      	ldr	r3, [pc, #392]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ee      	bne.n	800370a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 812a 	beq.w	800398a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003736:	4b5d      	ldr	r3, [pc, #372]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800373e:	2b18      	cmp	r3, #24
 8003740:	f000 80ba 	beq.w	80038b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	2b02      	cmp	r3, #2
 800374a:	f040 8095 	bne.w	8003878 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b57      	ldr	r3, [pc, #348]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a56      	ldr	r2, [pc, #344]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd ff13 	bl	8001584 <HAL_GetTick>
 800375e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd ff0f 	bl	8001584 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e10b      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003774:	4b4d      	ldr	r3, [pc, #308]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003780:	4b4a      	ldr	r3, [pc, #296]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003784:	4b4a      	ldr	r3, [pc, #296]	@ (80038b0 <HAL_RCC_OscConfig+0x6c8>)
 8003786:	4013      	ands	r3, r2
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	430a      	orrs	r2, r1
 8003794:	4945      	ldr	r1, [pc, #276]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	628b      	str	r3, [r1, #40]	@ 0x28
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	3b01      	subs	r3, #1
 80037a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a8:	3b01      	subs	r3, #1
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	3b01      	subs	r3, #1
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80037ca:	4938      	ldr	r1, [pc, #224]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037d0:	4b36      	ldr	r3, [pc, #216]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	4a35      	ldr	r2, [pc, #212]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037dc:	4b33      	ldr	r3, [pc, #204]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e0:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <HAL_RCC_OscConfig+0x6cc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037e8:	00d2      	lsls	r2, r2, #3
 80037ea:	4930      	ldr	r1, [pc, #192]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037f0:	4b2e      	ldr	r3, [pc, #184]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	f023 020c 	bic.w	r2, r3, #12
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	492b      	ldr	r1, [pc, #172]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003802:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	f023 0202 	bic.w	r2, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	4927      	ldr	r1, [pc, #156]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003814:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a24      	ldr	r2, [pc, #144]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800381a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	4a21      	ldr	r2, [pc, #132]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800382a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800382c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003832:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003838:	4b1c      	ldr	r3, [pc, #112]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fe98 	bl	8001584 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fe94 	bl	8001584 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e090      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x670>
 8003876:	e088      	b.n	800398a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0b      	ldr	r2, [pc, #44]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd fe7e 	bl	8001584 <HAL_GetTick>
 8003888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fd fe7a 	bl	8001584 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e076      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389e:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <HAL_RCC_OscConfig+0x6c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x6a4>
 80038aa:	e06e      	b.n	800398a <HAL_RCC_OscConfig+0x7a2>
 80038ac:	58024400 	.word	0x58024400
 80038b0:	fffffc0c 	.word	0xfffffc0c
 80038b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038be:	4b35      	ldr	r3, [pc, #212]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d031      	beq.n	8003930 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0203 	and.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d12a      	bne.n	8003930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d122      	bne.n	8003930 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11a      	bne.n	8003930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	0a5b      	lsrs	r3, r3, #9
 80038fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003906:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d111      	bne.n	8003930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003918:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d108      	bne.n	8003930 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0e1b      	lsrs	r3, r3, #24
 8003922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e02b      	b.n	800398c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003934:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 8003936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800393e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d01f      	beq.n	800398a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800394a:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	4a11      	ldr	r2, [pc, #68]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003956:	f7fd fe15 	bl	8001584 <HAL_GetTick>
 800395a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800395c:	bf00      	nop
 800395e:	f7fd fe11 	bl	8001584 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	4293      	cmp	r3, r2
 8003968:	d0f9      	beq.n	800395e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 800396c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800396e:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <HAL_RCC_OscConfig+0x7b0>)
 8003970:	4013      	ands	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003976:	00d2      	lsls	r2, r2, #3
 8003978:	4906      	ldr	r1, [pc, #24]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 800397a:	4313      	orrs	r3, r2
 800397c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800397e:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <HAL_RCC_OscConfig+0x7ac>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3730      	adds	r7, #48	@ 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	58024400 	.word	0x58024400
 8003998:	ffff0007 	.word	0xffff0007

0800399c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e19c      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b8a      	ldr	r3, [pc, #552]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d910      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b87      	ldr	r3, [pc, #540]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 020f 	bic.w	r2, r3, #15
 80039c6:	4985      	ldr	r1, [pc, #532]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b83      	ldr	r3, [pc, #524]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e184      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	4b7b      	ldr	r3, [pc, #492]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d908      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039fc:	4b78      	ldr	r3, [pc, #480]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4975      	ldr	r1, [pc, #468]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d010      	beq.n	8003a3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	4b70      	ldr	r3, [pc, #448]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	496a      	ldr	r1, [pc, #424]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	4b64      	ldr	r3, [pc, #400]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d908      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a58:	4b61      	ldr	r3, [pc, #388]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	495e      	ldr	r1, [pc, #376]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	4b59      	ldr	r3, [pc, #356]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d908      	bls.n	8003a98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a86:	4b56      	ldr	r3, [pc, #344]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4953      	ldr	r1, [pc, #332]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d908      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f023 020f 	bic.w	r2, r3, #15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4947      	ldr	r1, [pc, #284]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d055      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ad2:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4940      	ldr	r1, [pc, #256]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aec:	4b3c      	ldr	r3, [pc, #240]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d121      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0f6      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b04:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d115      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0ea      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b1c:	4b30      	ldr	r3, [pc, #192]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0de      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0d6      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f023 0207 	bic.w	r2, r3, #7
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4925      	ldr	r1, [pc, #148]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fd19 	bl	8001584 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b56:	f7fd fd15 	bl	8001584 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0be      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d1eb      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	4b14      	ldr	r3, [pc, #80]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d208      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9a:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f023 020f 	bic.w	r2, r3, #15
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	490e      	ldr	r1, [pc, #56]	@ (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d214      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b08      	ldr	r3, [pc, #32]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	4906      	ldr	r1, [pc, #24]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e086      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
 8003bdc:	52002000 	.word	0x52002000
 8003be0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d208      	bcs.n	8003c12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c00:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	4939      	ldr	r1, [pc, #228]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d208      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c2e:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	492e      	ldr	r1, [pc, #184]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d208      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c5c:	4b25      	ldr	r3, [pc, #148]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4922      	ldr	r1, [pc, #136]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d208      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4917      	ldr	r1, [pc, #92]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c9c:	f000 f834 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b14      	ldr	r3, [pc, #80]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	4912      	ldr	r1, [pc, #72]	@ (8003cf8 <HAL_RCC_ClockConfig+0x35c>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cba:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf8 <HAL_RCC_ClockConfig+0x35c>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <HAL_RCC_ClockConfig+0x360>)
 8003cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d00 <HAL_RCC_ClockConfig+0x364>)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_RCC_ClockConfig+0x368>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd fc06 	bl	80014f0 <HAL_InitTick>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	0800b724 	.word	0x0800b724
 8003cfc:	24000004 	.word	0x24000004
 8003d00:	24000000 	.word	0x24000000
 8003d04:	24000008 	.word	0x24000008

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	@ 0x24
 8003d0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0e:	4bb3      	ldr	r3, [pc, #716]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d16:	2b18      	cmp	r3, #24
 8003d18:	f200 8155 	bhi.w	8003fc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003fc7 	.word	0x08003fc7
 8003d2c:	08003fc7 	.word	0x08003fc7
 8003d30:	08003fc7 	.word	0x08003fc7
 8003d34:	08003fc7 	.word	0x08003fc7
 8003d38:	08003fc7 	.word	0x08003fc7
 8003d3c:	08003fc7 	.word	0x08003fc7
 8003d40:	08003fc7 	.word	0x08003fc7
 8003d44:	08003daf 	.word	0x08003daf
 8003d48:	08003fc7 	.word	0x08003fc7
 8003d4c:	08003fc7 	.word	0x08003fc7
 8003d50:	08003fc7 	.word	0x08003fc7
 8003d54:	08003fc7 	.word	0x08003fc7
 8003d58:	08003fc7 	.word	0x08003fc7
 8003d5c:	08003fc7 	.word	0x08003fc7
 8003d60:	08003fc7 	.word	0x08003fc7
 8003d64:	08003db5 	.word	0x08003db5
 8003d68:	08003fc7 	.word	0x08003fc7
 8003d6c:	08003fc7 	.word	0x08003fc7
 8003d70:	08003fc7 	.word	0x08003fc7
 8003d74:	08003fc7 	.word	0x08003fc7
 8003d78:	08003fc7 	.word	0x08003fc7
 8003d7c:	08003fc7 	.word	0x08003fc7
 8003d80:	08003fc7 	.word	0x08003fc7
 8003d84:	08003dbb 	.word	0x08003dbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d88:	4b94      	ldr	r3, [pc, #592]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d94:	4b91      	ldr	r3, [pc, #580]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	08db      	lsrs	r3, r3, #3
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	4a90      	ldr	r2, [pc, #576]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003da6:	e111      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003da8:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003daa:	61bb      	str	r3, [r7, #24]
      break;
 8003dac:	e10e      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003dae:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003db0:	61bb      	str	r3, [r7, #24]
      break;
 8003db2:	e10b      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003db4:	4b8c      	ldr	r3, [pc, #560]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003db6:	61bb      	str	r3, [r7, #24]
      break;
 8003db8:	e108      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dba:	4b88      	ldr	r3, [pc, #544]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003dc4:	4b85      	ldr	r3, [pc, #532]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dd0:	4b82      	ldr	r3, [pc, #520]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003dda:	4b80      	ldr	r3, [pc, #512]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dde:	08db      	lsrs	r3, r3, #3
 8003de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80e1 	beq.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	f000 8083 	beq.w	8003f0c <HAL_RCC_GetSysClockFreq+0x204>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f200 80a1 	bhi.w	8003f50 <HAL_RCC_GetSysClockFreq+0x248>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x114>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d056      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e1a:	e099      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e28:	4b6c      	ldr	r3, [pc, #432]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b62      	ldr	r3, [pc, #392]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e82:	e087      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ff0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	4b51      	ldr	r3, [pc, #324]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eaa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ec6:	e065      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eda:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f0a:	e043      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ff8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f4e:	e021      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f94:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	0a5b      	lsrs	r3, r3, #9
 8003f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	ee17 3a90 	vmov	r3, s15
 8003fbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003fc6:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc8:	61bb      	str	r3, [r7, #24]
      break;
 8003fca:	bf00      	nop
  }

  return sysclockfreq;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	@ 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	03d09000 	.word	0x03d09000
 8003fe4:	003d0900 	.word	0x003d0900
 8003fe8:	017d7840 	.word	0x017d7840
 8003fec:	46000000 	.word	0x46000000
 8003ff0:	4c742400 	.word	0x4c742400
 8003ff4:	4a742400 	.word	0x4a742400
 8003ff8:	4bbebc20 	.word	0x4bbebc20

08003ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004002:	f7ff fe81 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b10      	ldr	r3, [pc, #64]	@ (800404c <HAL_RCC_GetHCLKFreq+0x50>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490f      	ldr	r1, [pc, #60]	@ (8004050 <HAL_RCC_GetHCLKFreq+0x54>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004020:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_RCC_GetHCLKFreq+0x50>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	4a09      	ldr	r2, [pc, #36]	@ (8004050 <HAL_RCC_GetHCLKFreq+0x54>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a07      	ldr	r2, [pc, #28]	@ (8004054 <HAL_RCC_GetHCLKFreq+0x58>)
 8004038:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800403a:	4a07      	ldr	r2, [pc, #28]	@ (8004058 <HAL_RCC_GetHCLKFreq+0x5c>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004040:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <HAL_RCC_GetHCLKFreq+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	58024400 	.word	0x58024400
 8004050:	0800b724 	.word	0x0800b724
 8004054:	24000004 	.word	0x24000004
 8004058:	24000000 	.word	0x24000000

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004060:	f7ff ffcc 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4904      	ldr	r1, [pc, #16]	@ (8004084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58024400 	.word	0x58024400
 8004084:	0800b724 	.word	0x0800b724

08004088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800408c:	f7ff ffb6 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4904      	ldr	r1, [pc, #16]	@ (80040b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	58024400 	.word	0x58024400
 80040b0:	0800b724 	.word	0x0800b724

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b0c6      	sub	sp, #280	@ 0x118
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80040d8:	2500      	movs	r5, #0
 80040da:	ea54 0305 	orrs.w	r3, r4, r5
 80040de:	d049      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80040e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040ea:	d02f      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040f0:	d828      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040f6:	d01a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040fc:	d822      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004106:	d007      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004108:	e01c      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410a:	4bab      	ldr	r3, [pc, #684]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	4aaa      	ldr	r2, [pc, #680]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004116:	e01a      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411c:	3308      	adds	r3, #8
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fc25 	bl	8005970 <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fccc 	bl	8005ad4 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004156:	4b98      	ldr	r3, [pc, #608]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004164:	4a94      	ldr	r2, [pc, #592]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004166:	430b      	orrs	r3, r1
 8004168:	6513      	str	r3, [r2, #80]	@ 0x50
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004180:	f04f 0900 	mov.w	r9, #0
 8004184:	ea58 0309 	orrs.w	r3, r8, r9
 8004188:	d047      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800418a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004190:	2b04      	cmp	r3, #4
 8004192:	d82a      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041b1 	.word	0x080041b1
 80041a0:	080041bf 	.word	0x080041bf
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041f3 	.word	0x080041f3
 80041ac:	080041f3 	.word	0x080041f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b0:	4b81      	ldr	r3, [pc, #516]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	4a80      	ldr	r2, [pc, #512]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041bc:	e01a      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c2:	3308      	adds	r3, #8
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 fbd2 	bl	8005970 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041d2:	e00f      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d8:	3328      	adds	r3, #40	@ 0x28
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fc79 	bl	8005ad4 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041e8:	e004      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80041f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041fc:	4b6e      	ldr	r3, [pc, #440]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004200:	f023 0107 	bic.w	r1, r3, #7
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4a6b      	ldr	r2, [pc, #428]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800420c:	430b      	orrs	r3, r1
 800420e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004210:	e003      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004216:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800421a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004226:	f04f 0b00 	mov.w	fp, #0
 800422a:	ea5a 030b 	orrs.w	r3, sl, fp
 800422e:	d05b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004238:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800423c:	d03b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800423e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004242:	d834      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004248:	d037      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 800424a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800424e:	d82e      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004250:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004254:	d033      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004256:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800425a:	d828      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004260:	d01a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004266:	d822      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800426c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004270:	d007      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004272:	e01c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004274:	4b50      	ldr	r3, [pc, #320]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4a4f      	ldr	r2, [pc, #316]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004280:	e01e      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004286:	3308      	adds	r3, #8
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fb70 	bl	8005970 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004296:	e013      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429c:	3328      	adds	r3, #40	@ 0x28
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 fc17 	bl	8005ad4 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042ac:	e008      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042b4:	e004      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80042be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042c8:	4b3b      	ldr	r3, [pc, #236]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042cc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042d8:	4a37      	ldr	r2, [pc, #220]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042da:	430b      	orrs	r3, r1
 80042dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80042f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80042fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d05d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004310:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004314:	d03b      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004316:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800431a:	d834      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800431c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004320:	d037      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004326:	d82e      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004328:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800432c:	d033      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800432e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004332:	d828      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004338:	d01a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800433a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800433e:	d822      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004348:	d007      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800434a:	e01c      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004358:	e01e      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800435e:	3308      	adds	r3, #8
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f001 fb04 	bl	8005970 <RCCEx_PLL2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800436e:	e013      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	3328      	adds	r3, #40	@ 0x28
 8004376:	2100      	movs	r1, #0
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fbab 	bl	8005ad4 <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004384:	e008      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80043a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80043b0:	4a01      	ldr	r2, [pc, #4]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b6:	e005      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80043b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80043d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80043de:	460b      	mov	r3, r1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d03a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80043e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ea:	2b30      	cmp	r3, #48	@ 0x30
 80043ec:	d01f      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80043ee:	2b30      	cmp	r3, #48	@ 0x30
 80043f0:	d819      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d00c      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d815      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d019      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d111      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004402:	4baa      	ldr	r3, [pc, #680]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	4aa9      	ldr	r2, [pc, #676]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800440c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800440e:	e011      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004414:	3308      	adds	r3, #8
 8004416:	2102      	movs	r1, #2
 8004418:	4618      	mov	r0, r3
 800441a:	f001 faa9 	bl	8005970 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004424:	e006      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800442c:	e002      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800443c:	4b9b      	ldr	r3, [pc, #620]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800443e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004440:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444a:	4a98      	ldr	r2, [pc, #608]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800444c:	430b      	orrs	r3, r1
 800444e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004456:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800446a:	2300      	movs	r3, #0
 800446c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004470:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d051      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800447a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004484:	d035      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800448a:	d82e      	bhi.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 800448c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004490:	d031      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004492:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004496:	d828      	bhi.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449c:	d01a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800449e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044a2:	d822      	bhi.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x436>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ac:	d007      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80044ae:	e01c      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b0:	4b7e      	ldr	r3, [pc, #504]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	4a7d      	ldr	r2, [pc, #500]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044bc:	e01c      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c2:	3308      	adds	r3, #8
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 fa52 	bl	8005970 <RCCEx_PLL2_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044d2:	e011      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d8:	3328      	adds	r3, #40	@ 0x28
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 faf9 	bl	8005ad4 <RCCEx_PLL3_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80044e8:	e006      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044f0:	e002      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80044f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004500:	4b6a      	ldr	r3, [pc, #424]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450e:	4a67      	ldr	r2, [pc, #412]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6513      	str	r3, [r2, #80]	@ 0x50
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800451a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800451e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800452a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004534:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d053      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800453e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004548:	d033      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800454a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800454e:	d82c      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004550:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004554:	d02f      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800455a:	d826      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800455c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004560:	d02b      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004562:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004566:	d820      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800456c:	d012      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800456e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004572:	d81a      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d022      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d115      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004582:	3308      	adds	r3, #8
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f9f2 	bl	8005970 <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004592:	e015      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	3328      	adds	r3, #40	@ 0x28
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fa99 	bl	8005ad4 <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045a8:	e00a      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045b0:	e006      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80045b2:	bf00      	nop
 80045b4:	e004      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80045be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80045c8:	4b38      	ldr	r3, [pc, #224]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d6:	4a35      	ldr	r2, [pc, #212]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	6513      	str	r3, [r2, #80]	@ 0x50
 80045dc:	e003      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80045f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045fc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d058      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800460e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004612:	d033      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004618:	d82c      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461e:	d02f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004624:	d826      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800462a:	d02b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800462c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004630:	d820      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004636:	d012      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800463c:	d81a      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d022      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004646:	d115      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464c:	3308      	adds	r3, #8
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f001 f98d 	bl	8005970 <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800465c:	e015      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800465e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004662:	3328      	adds	r3, #40	@ 0x28
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fa34 	bl	8005ad4 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004672:	e00a      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800467a:	e006      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800467c:	bf00      	nop
 800467e:	e004      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004680:	bf00      	nop
 8004682:	e002      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10e      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800469a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046a2:	4a02      	ldr	r2, [pc, #8]	@ (80046ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046a8:	e006      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80046aa:	bf00      	nop
 80046ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80046c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80046ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d037      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046e2:	d00e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80046e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046e8:	d816      	bhi.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80046ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046f2:	d111      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4bc4      	ldr	r3, [pc, #784]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	4ac3      	ldr	r2, [pc, #780]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004700:	e00f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004706:	3308      	adds	r3, #8
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f930 	bl	8005970 <RCCEx_PLL2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004716:	e004      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800472a:	4bb7      	ldr	r3, [pc, #732]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800472c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004738:	4ab3      	ldr	r2, [pc, #716]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800473a:	430b      	orrs	r3, r1
 800473c:	6513      	str	r3, [r2, #80]	@ 0x50
 800473e:	e003      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004744:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800475e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d039      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476e:	2b03      	cmp	r3, #3
 8004770:	d81c      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004772:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047b5 	.word	0x080047b5
 800477c:	08004789 	.word	0x08004789
 8004780:	08004797 	.word	0x08004797
 8004784:	080047b5 	.word	0x080047b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004788:	4b9f      	ldr	r3, [pc, #636]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	4a9e      	ldr	r2, [pc, #632]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800478e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004794:	e00f      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800479a:	3308      	adds	r3, #8
 800479c:	2102      	movs	r1, #2
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 f8e6 	bl	8005970 <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047aa:	e004      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80047b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047be:	4b92      	ldr	r3, [pc, #584]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c2:	f023 0103 	bic.w	r1, r3, #3
 80047c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80047e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f000 8099 	beq.w	8004930 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fe:	4b83      	ldr	r3, [pc, #524]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a82      	ldr	r2, [pc, #520]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004808:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800480a:	f7fc febb 	bl	8001584 <HAL_GetTick>
 800480e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004812:	e00b      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fc feb6 	bl	8001584 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b64      	cmp	r3, #100	@ 0x64
 8004822:	d903      	bls.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800482a:	e005      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800482c:	4b77      	ldr	r3, [pc, #476]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ed      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800483c:	2b00      	cmp	r3, #0
 800483e:	d173      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004840:	4b71      	ldr	r3, [pc, #452]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004842:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800484c:	4053      	eors	r3, r2
 800484e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d015      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004856:	4b6c      	ldr	r3, [pc, #432]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800485e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004862:	4b69      	ldr	r3, [pc, #420]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004866:	4a68      	ldr	r2, [pc, #416]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800486e:	4b66      	ldr	r3, [pc, #408]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	4a65      	ldr	r2, [pc, #404]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004878:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800487a:	4a63      	ldr	r2, [pc, #396]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004880:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800488a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488e:	d118      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fc fe78 	bl	8001584 <HAL_GetTick>
 8004894:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004898:	e00d      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fc fe73 	bl	8001584 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80048a4:	1ad2      	subs	r2, r2, r3
 80048a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d903      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80048b4:	e005      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048b6:	4b54      	ldr	r3, [pc, #336]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0eb      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80048c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d129      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048da:	d10e      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 80048dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80048ec:	091a      	lsrs	r2, r3, #4
 80048ee:	4b48      	ldr	r3, [pc, #288]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	4a45      	ldr	r2, [pc, #276]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6113      	str	r3, [r2, #16]
 80048f8:	e005      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80048fa:	4b43      	ldr	r3, [pc, #268]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	4a42      	ldr	r2, [pc, #264]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004900:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004904:	6113      	str	r3, [r2, #16]
 8004906:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004908:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800490a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800490e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004916:	4a3c      	ldr	r2, [pc, #240]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6713      	str	r3, [r2, #112]	@ 0x70
 800491c:	e008      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800491e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004926:	e003      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800492c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f002 0301 	and.w	r3, r2, #1
 800493c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004946:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800494a:	460b      	mov	r3, r1
 800494c:	4313      	orrs	r3, r2
 800494e:	f000 808f 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004958:	2b28      	cmp	r3, #40	@ 0x28
 800495a:	d871      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800495c:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004a49 	.word	0x08004a49
 8004968:	08004a41 	.word	0x08004a41
 800496c:	08004a41 	.word	0x08004a41
 8004970:	08004a41 	.word	0x08004a41
 8004974:	08004a41 	.word	0x08004a41
 8004978:	08004a41 	.word	0x08004a41
 800497c:	08004a41 	.word	0x08004a41
 8004980:	08004a41 	.word	0x08004a41
 8004984:	08004a15 	.word	0x08004a15
 8004988:	08004a41 	.word	0x08004a41
 800498c:	08004a41 	.word	0x08004a41
 8004990:	08004a41 	.word	0x08004a41
 8004994:	08004a41 	.word	0x08004a41
 8004998:	08004a41 	.word	0x08004a41
 800499c:	08004a41 	.word	0x08004a41
 80049a0:	08004a41 	.word	0x08004a41
 80049a4:	08004a2b 	.word	0x08004a2b
 80049a8:	08004a41 	.word	0x08004a41
 80049ac:	08004a41 	.word	0x08004a41
 80049b0:	08004a41 	.word	0x08004a41
 80049b4:	08004a41 	.word	0x08004a41
 80049b8:	08004a41 	.word	0x08004a41
 80049bc:	08004a41 	.word	0x08004a41
 80049c0:	08004a41 	.word	0x08004a41
 80049c4:	08004a49 	.word	0x08004a49
 80049c8:	08004a41 	.word	0x08004a41
 80049cc:	08004a41 	.word	0x08004a41
 80049d0:	08004a41 	.word	0x08004a41
 80049d4:	08004a41 	.word	0x08004a41
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004a41 	.word	0x08004a41
 80049e4:	08004a49 	.word	0x08004a49
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a41 	.word	0x08004a41
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a49 	.word	0x08004a49
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	58024800 	.word	0x58024800
 8004a10:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a18:	3308      	adds	r3, #8
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 ffa7 	bl	8005970 <RCCEx_PLL2_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a28:	e00f      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2e:	3328      	adds	r3, #40	@ 0x28
 8004a30:	2101      	movs	r1, #1
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f84e 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a3e:	e004      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a46:	e000      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a52:	4bbf      	ldr	r3, [pc, #764]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a60:	4abb      	ldr	r2, [pc, #748]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a66:	e003      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f002 0302 	and.w	r3, r2, #2
 8004a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	d041      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d824      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004aed 	.word	0x08004aed
 8004aa4:	08004ab9 	.word	0x08004ab9
 8004aa8:	08004acf 	.word	0x08004acf
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08004aed 	.word	0x08004aed
 8004ab4:	08004aed 	.word	0x08004aed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004abc:	3308      	adds	r3, #8
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 ff55 	bl	8005970 <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004acc:	e00f      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad2:	3328      	adds	r3, #40	@ 0x28
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fffc 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004af6:	4b96      	ldr	r3, [pc, #600]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afa:	f023 0107 	bic.w	r1, r3, #7
 8004afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	4a92      	ldr	r2, [pc, #584]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f002 0304 	and.w	r3, r2, #4
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b2a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	d044      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d825      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004b40:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b95 	.word	0x08004b95
 8004b4c:	08004b61 	.word	0x08004b61
 8004b50:	08004b77 	.word	0x08004b77
 8004b54:	08004b95 	.word	0x08004b95
 8004b58:	08004b95 	.word	0x08004b95
 8004b5c:	08004b95 	.word	0x08004b95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	3308      	adds	r3, #8
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 ff01 	bl	8005970 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b74:	e00f      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7a:	3328      	adds	r3, #40	@ 0x28
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 ffa8 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b8a:	e004      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b92:	e000      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	f023 0107 	bic.w	r1, r3, #7
 8004ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	4a68      	ldr	r2, [pc, #416]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bb4:	e003      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f002 0320 	and.w	r3, r2, #32
 8004bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d055      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bea:	d033      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bf0:	d82c      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf6:	d02f      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfc:	d826      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c02:	d02b      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004c04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c08:	d820      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c0e:	d012      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c14:	d81a      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d022      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1e:	d115      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	3308      	adds	r3, #8
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fea1 	bl	8005970 <RCCEx_PLL2_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c34:	e015      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3a:	3328      	adds	r3, #40	@ 0x28
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 ff48 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c52:	e006      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c54:	bf00      	nop
 8004c56:	e004      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e002      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c5c:	bf00      	nop
 8004c5e:	e000      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c7a:	4a35      	ldr	r2, [pc, #212]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004c96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ca0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	d058      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004cb6:	d033      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004cb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004cbc:	d82c      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc2:	d02f      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc8:	d826      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004cca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cce:	d02b      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004cd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cd4:	d820      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cda:	d012      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce0:	d81a      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d022      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cea:	d115      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fe3b 	bl	8005970 <RCCEx_PLL2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d00:	e015      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d06:	3328      	adds	r3, #40	@ 0x28
 8004d08:	2102      	movs	r1, #2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fee2 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d16:	e00a      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d1e:	e006      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d20:	bf00      	nop
 8004d22:	e004      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d24:	bf00      	nop
 8004d26:	e002      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d36:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d46:	4a02      	ldr	r2, [pc, #8]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d4c:	e006      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004d4e:	bf00      	nop
 8004d50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d055      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d88:	d033      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004d8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004d8e:	d82c      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d94:	d02f      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d9a:	d826      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004d9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004da0:	d02b      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004da2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004da6:	d820      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dac:	d012      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004dae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004db2:	d81a      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d022      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dbc:	d115      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fdd2 	bl	8005970 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e015      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd8:	3328      	adds	r3, #40	@ 0x28
 8004dda:	2102      	movs	r1, #2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fe79 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004de8:	e00a      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004df0:	e006      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004df2:	bf00      	nop
 8004df4:	e004      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004df6:	bf00      	nop
 8004df8:	e002      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e08:	4ba0      	ldr	r3, [pc, #640]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e18:	4a9c      	ldr	r2, [pc, #624]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1e:	e003      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f002 0308 	and.w	r3, r2, #8
 8004e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e3e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e42:	460b      	mov	r3, r1
 8004e44:	4313      	orrs	r3, r2
 8004e46:	d01e      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5a:	3328      	adds	r3, #40	@ 0x28
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fe38 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004e70:	4b86      	ldr	r3, [pc, #536]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e80:	4a82      	ldr	r2, [pc, #520]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f002 0310 	and.w	r3, r2, #16
 8004e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e96:	2300      	movs	r3, #0
 8004e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e9c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d01e      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb2:	d10c      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb8:	3328      	adds	r3, #40	@ 0x28
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fe09 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ece:	4b6f      	ldr	r3, [pc, #444]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ede:	4a6b      	ldr	r2, [pc, #428]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ef6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d03e      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f0c:	d022      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f12:	d81b      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1c:	d00b      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004f1e:	e015      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	3308      	adds	r3, #8
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fd21 	bl	8005970 <RCCEx_PLL2_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f34:	e00f      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3a:	3328      	adds	r3, #40	@ 0x28
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fdc8 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f4a:	e004      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f6e:	4a47      	ldr	r2, [pc, #284]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f74:	e003      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d03b      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fa6:	d01f      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004fa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fac:	d818      	bhi.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb2:	d003      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004fb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fb8:	d007      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004fba:	e011      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4b33      	ldr	r3, [pc, #204]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4a32      	ldr	r2, [pc, #200]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fc8:	e00f      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fce:	3328      	adds	r3, #40	@ 0x28
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fd7e 	bl	8005ad4 <RCCEx_PLL3_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff2:	4b26      	ldr	r3, [pc, #152]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	4a22      	ldr	r2, [pc, #136]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005004:	430b      	orrs	r3, r1
 8005006:	6553      	str	r3, [r2, #84]	@ 0x54
 8005008:	e003      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800500e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800501e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005020:	2300      	movs	r3, #0
 8005022:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005024:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005028:	460b      	mov	r3, r1
 800502a:	4313      	orrs	r3, r2
 800502c:	d034      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800502e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503c:	d007      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800503e:	e011      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005040:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800504a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800504c:	e00e      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005052:	3308      	adds	r3, #8
 8005054:	2102      	movs	r1, #2
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fc8a 	bl	8005970 <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005062:	e003      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800506a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800506c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10d      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005074:	4b05      	ldr	r3, [pc, #20]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005078:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005082:	4a02      	ldr	r2, [pc, #8]	@ (800508c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005084:	430b      	orrs	r3, r1
 8005086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005088:	e006      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800508a:	bf00      	nop
 800508c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050a6:	2300      	movs	r3, #0
 80050a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80050aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d00c      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80050b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b8:	3328      	adds	r3, #40	@ 0x28
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fd09 	bl	8005ad4 <RCCEx_PLL3_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80050da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050dc:	2300      	movs	r3, #0
 80050de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050e0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80050e4:	460b      	mov	r3, r1
 80050e6:	4313      	orrs	r3, r2
 80050e8:	d036      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050f4:	d018      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80050f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050fa:	d811      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80050fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005100:	d014      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005106:	d80b      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d011      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800510c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005110:	d106      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005112:	4bb7      	ldr	r3, [pc, #732]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4ab6      	ldr	r2, [pc, #728]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800511e:	e008      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005126:	e004      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005128:	bf00      	nop
 800512a:	e002      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800512c:	bf00      	nop
 800512e:	e000      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800513a:	4bad      	ldr	r3, [pc, #692]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005148:	4aa9      	ldr	r2, [pc, #676]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800514a:	430b      	orrs	r3, r1
 800514c:	6553      	str	r3, [r2, #84]	@ 0x54
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005164:	653b      	str	r3, [r7, #80]	@ 0x50
 8005166:	2300      	movs	r3, #0
 8005168:	657b      	str	r3, [r7, #84]	@ 0x54
 800516a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005174:	4b9e      	ldr	r3, [pc, #632]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005178:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	4a9b      	ldr	r2, [pc, #620]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005184:	430b      	orrs	r3, r1
 8005186:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005196:	2300      	movs	r3, #0
 8005198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800519a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800519e:	460b      	mov	r3, r1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051a4:	4b92      	ldr	r3, [pc, #584]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051b2:	4a8f      	ldr	r2, [pc, #572]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c6:	2300      	movs	r3, #0
 80051c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d00e      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d4:	4b86      	ldr	r3, [pc, #536]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	4a85      	ldr	r2, [pc, #532]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051de:	6113      	str	r3, [r2, #16]
 80051e0:	4b83      	ldr	r3, [pc, #524]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051e2:	6919      	ldr	r1, [r3, #16]
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051ec:	4a80      	ldr	r2, [pc, #512]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80051fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005200:	2300      	movs	r3, #0
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005204:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005208:	460b      	mov	r3, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800520e:	4b78      	ldr	r3, [pc, #480]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005212:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	4a74      	ldr	r2, [pc, #464]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800521e:	430b      	orrs	r3, r1
 8005220:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005230:	2300      	movs	r3, #0
 8005232:	637b      	str	r3, [r7, #52]	@ 0x34
 8005234:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005238:	460b      	mov	r3, r1
 800523a:	4313      	orrs	r3, r2
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800523e:	4b6c      	ldr	r3, [pc, #432]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524e:	4a68      	ldr	r2, [pc, #416]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005250:	430b      	orrs	r3, r1
 8005252:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	2100      	movs	r1, #0
 800525e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005266:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800526a:	460b      	mov	r3, r1
 800526c:	4313      	orrs	r3, r2
 800526e:	d011      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005274:	3308      	adds	r3, #8
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fb79 	bl	8005970 <RCCEx_PLL2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005290:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	2100      	movs	r1, #0
 800529e:	6239      	str	r1, [r7, #32]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052aa:	460b      	mov	r3, r1
 80052ac:	4313      	orrs	r3, r2
 80052ae:	d011      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b4:	3308      	adds	r3, #8
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fb59 	bl	8005970 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80052c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	2100      	movs	r1, #0
 80052de:	61b9      	str	r1, [r7, #24]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d011      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	3308      	adds	r3, #8
 80052f6:	2102      	movs	r1, #2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fb39 	bl	8005970 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	2100      	movs	r1, #0
 800531e:	6139      	str	r1, [r7, #16]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d011      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	3328      	adds	r3, #40	@ 0x28
 8005336:	2100      	movs	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fbcb 	bl	8005ad4 <RCCEx_PLL3_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	2100      	movs	r1, #0
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d011      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005374:	3328      	adds	r3, #40	@ 0x28
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fbab 	bl	8005ad4 <RCCEx_PLL3_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	2100      	movs	r1, #0
 800539e:	6039      	str	r1, [r7, #0]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053aa:	460b      	mov	r3, r1
 80053ac:	4313      	orrs	r3, r2
 80053ae:	d011      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b4:	3328      	adds	r3, #40	@ 0x28
 80053b6:	2102      	movs	r1, #2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb8b 	bl	8005ad4 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80053c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80053d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400

080053f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053f8:	f7fe fe00 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 80053fc:	4602      	mov	r2, r0
 80053fe:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	4904      	ldr	r1, [pc, #16]	@ (800541c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	58024400 	.word	0x58024400
 800541c:	0800b724 	.word	0x0800b724

08005420 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	@ 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005428:	4ba1      	ldr	r3, [pc, #644]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005432:	4b9f      	ldr	r3, [pc, #636]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	0b1b      	lsrs	r3, r3, #12
 8005438:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800543c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800543e:	4b9c      	ldr	r3, [pc, #624]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800544a:	4b99      	ldr	r3, [pc, #612]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	08db      	lsrs	r3, r3, #3
 8005450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8111 	beq.w	8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b02      	cmp	r3, #2
 8005472:	f000 8083 	beq.w	800557c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b02      	cmp	r3, #2
 800547a:	f200 80a1 	bhi.w	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d056      	beq.n	8005538 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800548a:	e099      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800548c:	4b88      	ldr	r3, [pc, #544]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02d      	beq.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005498:	4b85      	ldr	r3, [pc, #532]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	4a84      	ldr	r2, [pc, #528]	@ (80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c2:	4b7b      	ldr	r3, [pc, #492]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054f2:	e087      	b.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80056bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005506:	4b6a      	ldr	r3, [pc, #424]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005516:	ed97 6a03 	vldr	s12, [r7, #12]
 800551a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800551e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005536:	e065      	b.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554a:	4b59      	ldr	r3, [pc, #356]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555a:	ed97 6a03 	vldr	s12, [r7, #12]
 800555e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800556e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557a:	e043      	b.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800558a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558e:	4b48      	ldr	r3, [pc, #288]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055be:	e021      	b.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d2:	4b37      	ldr	r3, [pc, #220]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80056b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005602:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005604:	4b2a      	ldr	r3, [pc, #168]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	0a5b      	lsrs	r3, r3, #9
 800560a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800561a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800561e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562a:	ee17 2a90 	vmov	r2, s15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005632:	4b1f      	ldr	r3, [pc, #124]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800564c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005658:	ee17 2a90 	vmov	r2, s15
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005660:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	0e1b      	lsrs	r3, r3, #24
 8005666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567a:	edd7 6a07 	vldr	s13, [r7, #28]
 800567e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005686:	ee17 2a90 	vmov	r2, s15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800568e:	e008      	b.n	80056a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
}
 80056a2:	bf00      	nop
 80056a4:	3724      	adds	r7, #36	@ 0x24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	58024400 	.word	0x58024400
 80056b4:	03d09000 	.word	0x03d09000
 80056b8:	46000000 	.word	0x46000000
 80056bc:	4c742400 	.word	0x4c742400
 80056c0:	4a742400 	.word	0x4a742400
 80056c4:	4bbebc20 	.word	0x4bbebc20

080056c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	@ 0x24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056d0:	4ba1      	ldr	r3, [pc, #644]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80056da:	4b9f      	ldr	r3, [pc, #636]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	0d1b      	lsrs	r3, r3, #20
 80056e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056e6:	4b9c      	ldr	r3, [pc, #624]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80056f2:	4b99      	ldr	r3, [pc, #612]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	08db      	lsrs	r3, r3, #3
 80056f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8111 	beq.w	8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b02      	cmp	r3, #2
 800571a:	f000 8083 	beq.w	8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b02      	cmp	r3, #2
 8005722:	f200 80a1 	bhi.w	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d056      	beq.n	80057e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005732:	e099      	b.n	8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005734:	4b88      	ldr	r3, [pc, #544]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02d      	beq.n	800579c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005740:	4b85      	ldr	r3, [pc, #532]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	08db      	lsrs	r3, r3, #3
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	4a84      	ldr	r2, [pc, #528]	@ (800595c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576a:	4b7b      	ldr	r3, [pc, #492]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577a:	ed97 6a03 	vldr	s12, [r7, #12]
 800577e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800578e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005796:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800579a:	e087      	b.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005964 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057be:	ed97 6a03 	vldr	s12, [r7, #12]
 80057c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057de:	e065      	b.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f2:	4b59      	ldr	r3, [pc, #356]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005802:	ed97 6a03 	vldr	s12, [r7, #12]
 8005806:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005822:	e043      	b.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800596c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	4b48      	ldr	r3, [pc, #288]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	ed97 6a03 	vldr	s12, [r7, #12]
 800584a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005866:	e021      	b.n	80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b37      	ldr	r3, [pc, #220]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588a:	ed97 6a03 	vldr	s12, [r7, #12]
 800588e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005960 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80058ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b0:	0a5b      	lsrs	r3, r3, #9
 80058b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d2:	ee17 2a90 	vmov	r2, s15
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80058da:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005900:	ee17 2a90 	vmov	r2, s15
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005908:	4b13      	ldr	r3, [pc, #76]	@ (8005958 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	0e1b      	lsrs	r3, r3, #24
 800590e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800591e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005922:	edd7 6a07 	vldr	s13, [r7, #28]
 8005926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592e:	ee17 2a90 	vmov	r2, s15
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005936:	e008      	b.n	800594a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
}
 800594a:	bf00      	nop
 800594c:	3724      	adds	r7, #36	@ 0x24
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	58024400 	.word	0x58024400
 800595c:	03d09000 	.word	0x03d09000
 8005960:	46000000 	.word	0x46000000
 8005964:	4c742400 	.word	0x4c742400
 8005968:	4a742400 	.word	0x4a742400
 800596c:	4bbebc20 	.word	0x4bbebc20

08005970 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800597e:	4b53      	ldr	r3, [pc, #332]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b03      	cmp	r3, #3
 8005988:	d101      	bne.n	800598e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e099      	b.n	8005ac2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800598e:	4b4f      	ldr	r3, [pc, #316]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4e      	ldr	r2, [pc, #312]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005994:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599a:	f7fb fdf3 	bl	8001584 <HAL_GetTick>
 800599e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059a0:	e008      	b.n	80059b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059a2:	f7fb fdef 	bl	8001584 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e086      	b.n	8005ac2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059b4:	4b45      	ldr	r3, [pc, #276]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059c0:	4b42      	ldr	r3, [pc, #264]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	031b      	lsls	r3, r3, #12
 80059ce:	493f      	ldr	r1, [pc, #252]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	3b01      	subs	r3, #1
 80059da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	025b      	lsls	r3, r3, #9
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	061b      	lsls	r3, r3, #24
 8005a00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a04:	4931      	ldr	r1, [pc, #196]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a0a:	4b30      	ldr	r3, [pc, #192]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	492d      	ldr	r1, [pc, #180]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	f023 0220 	bic.w	r2, r3, #32
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	4928      	ldr	r1, [pc, #160]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a2e:	4b27      	ldr	r3, [pc, #156]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	4a26      	ldr	r2, [pc, #152]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a34:	f023 0310 	bic.w	r3, r3, #16
 8005a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a3a:	4b24      	ldr	r3, [pc, #144]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a3e:	4b24      	ldr	r3, [pc, #144]	@ (8005ad0 <RCCEx_PLL2_Config+0x160>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	69d2      	ldr	r2, [r2, #28]
 8005a46:	00d2      	lsls	r2, r2, #3
 8005a48:	4920      	ldr	r1, [pc, #128]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	4a1e      	ldr	r2, [pc, #120]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a60:	4b1a      	ldr	r3, [pc, #104]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a6c:	e00f      	b.n	8005a8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a74:	4b15      	ldr	r3, [pc, #84]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a80:	e005      	b.n	8005a8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a82:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	4a11      	ldr	r2, [pc, #68]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0e      	ldr	r2, [pc, #56]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9a:	f7fb fd73 	bl	8001584 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005aa0:	e008      	b.n	8005ab4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aa2:	f7fb fd6f 	bl	8001584 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e006      	b.n	8005ac2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <RCCEx_PLL2_Config+0x15c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	ffff0007 	.word	0xffff0007

08005ad4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ae2:	4b53      	ldr	r3, [pc, #332]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d101      	bne.n	8005af2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e099      	b.n	8005c26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005af2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4e      	ldr	r2, [pc, #312]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afe:	f7fb fd41 	bl	8001584 <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b04:	e008      	b.n	8005b18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b06:	f7fb fd3d 	bl	8001584 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e086      	b.n	8005c26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b18:	4b45      	ldr	r3, [pc, #276]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1f0      	bne.n	8005b06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b24:	4b42      	ldr	r3, [pc, #264]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	051b      	lsls	r3, r3, #20
 8005b32:	493f      	ldr	r1, [pc, #252]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	025b      	lsls	r3, r3, #9
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b68:	4931      	ldr	r1, [pc, #196]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b6e:	4b30      	ldr	r3, [pc, #192]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	492d      	ldr	r1, [pc, #180]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b80:	4b2b      	ldr	r3, [pc, #172]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	4928      	ldr	r1, [pc, #160]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b92:	4b27      	ldr	r3, [pc, #156]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	4a26      	ldr	r2, [pc, #152]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b9e:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba2:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <RCCEx_PLL3_Config+0x160>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	69d2      	ldr	r2, [r2, #28]
 8005baa:	00d2      	lsls	r2, r2, #3
 8005bac:	4920      	ldr	r1, [pc, #128]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bd0:	e00f      	b.n	8005bf2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d106      	bne.n	8005be6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bd8:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	4a14      	ldr	r2, [pc, #80]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005be2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005be4:	e005      	b.n	8005bf2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005be6:	4b12      	ldr	r3, [pc, #72]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	4a11      	ldr	r2, [pc, #68]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bfe:	f7fb fcc1 	bl	8001584 <HAL_GetTick>
 8005c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c04:	e008      	b.n	8005c18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c06:	f7fb fcbd 	bl	8001584 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e006      	b.n	8005c26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c18:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <RCCEx_PLL3_Config+0x15c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	58024400 	.word	0x58024400
 8005c34:	ffff0007 	.word	0xffff0007

08005c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e042      	b.n	8005cd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fa5f 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	@ 0x24
 8005c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 ff22 	bl	8006acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8b3 	bl	8005df4 <UART_SetConfig>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e01b      	b.n	8005cd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 ffa1 	bl	8006c10 <UART_CheckIdleState>
 8005cce:	4603      	mov	r3, r0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	@ 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d17b      	bne.n	8005dea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_UART_Transmit+0x26>
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e074      	b.n	8005dec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2221      	movs	r2, #33	@ 0x21
 8005d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d12:	f7fb fc37 	bl	8001584 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d30:	d108      	bne.n	8005d44 <HAL_UART_Transmit+0x6c>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e003      	b.n	8005d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d4c:	e030      	b.n	8005db0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2180      	movs	r1, #128	@ 0x80
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f001 f803 	bl	8006d64 <UART_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e03d      	b.n	8005dec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	3302      	adds	r3, #2
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e007      	b.n	8005d9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1c8      	bne.n	8005d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2140      	movs	r1, #64	@ 0x40
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 ffcc 	bl	8006d64 <UART_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e006      	b.n	8005dec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005dea:	2302      	movs	r3, #2
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005df8:	b092      	sub	sp, #72	@ 0x48
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4bbe      	ldr	r3, [pc, #760]	@ (800611c <UART_SetConfig+0x328>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4ab3      	ldr	r2, [pc, #716]	@ (8006120 <UART_SetConfig+0x32c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	4baf      	ldr	r3, [pc, #700]	@ (8006124 <UART_SetConfig+0x330>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	f023 010f 	bic.w	r1, r3, #15
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4aa6      	ldr	r2, [pc, #664]	@ (8006128 <UART_SetConfig+0x334>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d177      	bne.n	8005f84 <UART_SetConfig+0x190>
 8005e94:	4ba5      	ldr	r3, [pc, #660]	@ (800612c <UART_SetConfig+0x338>)
 8005e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e9c:	2b28      	cmp	r3, #40	@ 0x28
 8005e9e:	d86d      	bhi.n	8005f7c <UART_SetConfig+0x188>
 8005ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <UART_SetConfig+0xb4>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005f4d 	.word	0x08005f4d
 8005eac:	08005f7d 	.word	0x08005f7d
 8005eb0:	08005f7d 	.word	0x08005f7d
 8005eb4:	08005f7d 	.word	0x08005f7d
 8005eb8:	08005f7d 	.word	0x08005f7d
 8005ebc:	08005f7d 	.word	0x08005f7d
 8005ec0:	08005f7d 	.word	0x08005f7d
 8005ec4:	08005f7d 	.word	0x08005f7d
 8005ec8:	08005f55 	.word	0x08005f55
 8005ecc:	08005f7d 	.word	0x08005f7d
 8005ed0:	08005f7d 	.word	0x08005f7d
 8005ed4:	08005f7d 	.word	0x08005f7d
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	08005f7d 	.word	0x08005f7d
 8005ee0:	08005f7d 	.word	0x08005f7d
 8005ee4:	08005f7d 	.word	0x08005f7d
 8005ee8:	08005f5d 	.word	0x08005f5d
 8005eec:	08005f7d 	.word	0x08005f7d
 8005ef0:	08005f7d 	.word	0x08005f7d
 8005ef4:	08005f7d 	.word	0x08005f7d
 8005ef8:	08005f7d 	.word	0x08005f7d
 8005efc:	08005f7d 	.word	0x08005f7d
 8005f00:	08005f7d 	.word	0x08005f7d
 8005f04:	08005f7d 	.word	0x08005f7d
 8005f08:	08005f65 	.word	0x08005f65
 8005f0c:	08005f7d 	.word	0x08005f7d
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08005f7d 	.word	0x08005f7d
 8005f18:	08005f7d 	.word	0x08005f7d
 8005f1c:	08005f7d 	.word	0x08005f7d
 8005f20:	08005f7d 	.word	0x08005f7d
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f7d 	.word	0x08005f7d
 8005f30:	08005f7d 	.word	0x08005f7d
 8005f34:	08005f7d 	.word	0x08005f7d
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f7d 	.word	0x08005f7d
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e326      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e322      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e31e      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e31a      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e316      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e312      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e30e      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a69      	ldr	r2, [pc, #420]	@ (8006130 <UART_SetConfig+0x33c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d130      	bne.n	8005ff0 <UART_SetConfig+0x1fc>
 8005f8e:	4b67      	ldr	r3, [pc, #412]	@ (800612c <UART_SetConfig+0x338>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d826      	bhi.n	8005fe8 <UART_SetConfig+0x1f4>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x1ac>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb9 	.word	0x08005fb9
 8005fa4:	08005fc1 	.word	0x08005fc1
 8005fa8:	08005fc9 	.word	0x08005fc9
 8005fac:	08005fd1 	.word	0x08005fd1
 8005fb0:	08005fd9 	.word	0x08005fd9
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e2f0      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e2ec      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e2e8      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e2e4      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e2e0      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005fe0:	2340      	movs	r3, #64	@ 0x40
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e2dc      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005fe8:	2380      	movs	r3, #128	@ 0x80
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e2d8      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8006134 <UART_SetConfig+0x340>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d130      	bne.n	800605c <UART_SetConfig+0x268>
 8005ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800612c <UART_SetConfig+0x338>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	2b05      	cmp	r3, #5
 8006004:	d826      	bhi.n	8006054 <UART_SetConfig+0x260>
 8006006:	a201      	add	r2, pc, #4	@ (adr r2, 800600c <UART_SetConfig+0x218>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006025 	.word	0x08006025
 8006010:	0800602d 	.word	0x0800602d
 8006014:	08006035 	.word	0x08006035
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e2ba      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e2b6      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e2b2      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e2ae      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006044:	2320      	movs	r3, #32
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e2aa      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800604c:	2340      	movs	r3, #64	@ 0x40
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e2a6      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e2a2      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a35      	ldr	r2, [pc, #212]	@ (8006138 <UART_SetConfig+0x344>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d130      	bne.n	80060c8 <UART_SetConfig+0x2d4>
 8006066:	4b31      	ldr	r3, [pc, #196]	@ (800612c <UART_SetConfig+0x338>)
 8006068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	2b05      	cmp	r3, #5
 8006070:	d826      	bhi.n	80060c0 <UART_SetConfig+0x2cc>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <UART_SetConfig+0x284>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006091 	.word	0x08006091
 800607c:	08006099 	.word	0x08006099
 8006080:	080060a1 	.word	0x080060a1
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	e284      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e280      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e27c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e278      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e274      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80060b8:	2340      	movs	r3, #64	@ 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e270      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80060c0:	2380      	movs	r3, #128	@ 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e26c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1b      	ldr	r2, [pc, #108]	@ (800613c <UART_SetConfig+0x348>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d142      	bne.n	8006158 <UART_SetConfig+0x364>
 80060d2:	4b16      	ldr	r3, [pc, #88]	@ (800612c <UART_SetConfig+0x338>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d838      	bhi.n	8006150 <UART_SetConfig+0x35c>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x2f0>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006105 	.word	0x08006105
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	08006141 	.word	0x08006141
 80060f8:	08006149 	.word	0x08006149
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e24e      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e24a      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e246      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e242      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800611c:	cfff69f3 	.word	0xcfff69f3
 8006120:	58000c00 	.word	0x58000c00
 8006124:	11fff4ff 	.word	0x11fff4ff
 8006128:	40011000 	.word	0x40011000
 800612c:	58024400 	.word	0x58024400
 8006130:	40004400 	.word	0x40004400
 8006134:	40004800 	.word	0x40004800
 8006138:	40004c00 	.word	0x40004c00
 800613c:	40005000 	.word	0x40005000
 8006140:	2320      	movs	r3, #32
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e22c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006148:	2340      	movs	r3, #64	@ 0x40
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e228      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006150:	2380      	movs	r3, #128	@ 0x80
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e224      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4ab1      	ldr	r2, [pc, #708]	@ (8006424 <UART_SetConfig+0x630>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d176      	bne.n	8006250 <UART_SetConfig+0x45c>
 8006162:	4bb1      	ldr	r3, [pc, #708]	@ (8006428 <UART_SetConfig+0x634>)
 8006164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006166:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800616a:	2b28      	cmp	r3, #40	@ 0x28
 800616c:	d86c      	bhi.n	8006248 <UART_SetConfig+0x454>
 800616e:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <UART_SetConfig+0x380>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006219 	.word	0x08006219
 8006178:	08006249 	.word	0x08006249
 800617c:	08006249 	.word	0x08006249
 8006180:	08006249 	.word	0x08006249
 8006184:	08006249 	.word	0x08006249
 8006188:	08006249 	.word	0x08006249
 800618c:	08006249 	.word	0x08006249
 8006190:	08006249 	.word	0x08006249
 8006194:	08006221 	.word	0x08006221
 8006198:	08006249 	.word	0x08006249
 800619c:	08006249 	.word	0x08006249
 80061a0:	08006249 	.word	0x08006249
 80061a4:	08006249 	.word	0x08006249
 80061a8:	08006249 	.word	0x08006249
 80061ac:	08006249 	.word	0x08006249
 80061b0:	08006249 	.word	0x08006249
 80061b4:	08006229 	.word	0x08006229
 80061b8:	08006249 	.word	0x08006249
 80061bc:	08006249 	.word	0x08006249
 80061c0:	08006249 	.word	0x08006249
 80061c4:	08006249 	.word	0x08006249
 80061c8:	08006249 	.word	0x08006249
 80061cc:	08006249 	.word	0x08006249
 80061d0:	08006249 	.word	0x08006249
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006249 	.word	0x08006249
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006249 	.word	0x08006249
 80061e4:	08006249 	.word	0x08006249
 80061e8:	08006249 	.word	0x08006249
 80061ec:	08006249 	.word	0x08006249
 80061f0:	08006249 	.word	0x08006249
 80061f4:	08006239 	.word	0x08006239
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006249 	.word	0x08006249
 8006204:	08006249 	.word	0x08006249
 8006208:	08006249 	.word	0x08006249
 800620c:	08006249 	.word	0x08006249
 8006210:	08006249 	.word	0x08006249
 8006214:	08006241 	.word	0x08006241
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e1c0      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006220:	2304      	movs	r3, #4
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e1bc      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006228:	2308      	movs	r3, #8
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e1b8      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006230:	2310      	movs	r3, #16
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e1b4      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006238:	2320      	movs	r3, #32
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e1b0      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006240:	2340      	movs	r3, #64	@ 0x40
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e1ac      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e1a8      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a75      	ldr	r2, [pc, #468]	@ (800642c <UART_SetConfig+0x638>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d130      	bne.n	80062bc <UART_SetConfig+0x4c8>
 800625a:	4b73      	ldr	r3, [pc, #460]	@ (8006428 <UART_SetConfig+0x634>)
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	2b05      	cmp	r3, #5
 8006264:	d826      	bhi.n	80062b4 <UART_SetConfig+0x4c0>
 8006266:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <UART_SetConfig+0x478>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006285 	.word	0x08006285
 8006270:	0800628d 	.word	0x0800628d
 8006274:	08006295 	.word	0x08006295
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062ad 	.word	0x080062ad
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e18a      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e186      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e182      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e17e      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80062a4:	2320      	movs	r3, #32
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e17a      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80062ac:	2340      	movs	r3, #64	@ 0x40
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e176      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80062b4:	2380      	movs	r3, #128	@ 0x80
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e172      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a5b      	ldr	r2, [pc, #364]	@ (8006430 <UART_SetConfig+0x63c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d130      	bne.n	8006328 <UART_SetConfig+0x534>
 80062c6:	4b58      	ldr	r3, [pc, #352]	@ (8006428 <UART_SetConfig+0x634>)
 80062c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d826      	bhi.n	8006320 <UART_SetConfig+0x52c>
 80062d2:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <UART_SetConfig+0x4e4>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080062f1 	.word	0x080062f1
 80062dc:	080062f9 	.word	0x080062f9
 80062e0:	08006301 	.word	0x08006301
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006319 	.word	0x08006319
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e154      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e150      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e14c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e148      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006310:	2320      	movs	r3, #32
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006316:	e144      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006318:	2340      	movs	r3, #64	@ 0x40
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e140      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006320:	2380      	movs	r3, #128	@ 0x80
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e13c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a41      	ldr	r2, [pc, #260]	@ (8006434 <UART_SetConfig+0x640>)
 800632e:	4293      	cmp	r3, r2
 8006330:	f040 8082 	bne.w	8006438 <UART_SetConfig+0x644>
 8006334:	4b3c      	ldr	r3, [pc, #240]	@ (8006428 <UART_SetConfig+0x634>)
 8006336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800633c:	2b28      	cmp	r3, #40	@ 0x28
 800633e:	d86d      	bhi.n	800641c <UART_SetConfig+0x628>
 8006340:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <UART_SetConfig+0x554>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	080063ed 	.word	0x080063ed
 800634c:	0800641d 	.word	0x0800641d
 8006350:	0800641d 	.word	0x0800641d
 8006354:	0800641d 	.word	0x0800641d
 8006358:	0800641d 	.word	0x0800641d
 800635c:	0800641d 	.word	0x0800641d
 8006360:	0800641d 	.word	0x0800641d
 8006364:	0800641d 	.word	0x0800641d
 8006368:	080063f5 	.word	0x080063f5
 800636c:	0800641d 	.word	0x0800641d
 8006370:	0800641d 	.word	0x0800641d
 8006374:	0800641d 	.word	0x0800641d
 8006378:	0800641d 	.word	0x0800641d
 800637c:	0800641d 	.word	0x0800641d
 8006380:	0800641d 	.word	0x0800641d
 8006384:	0800641d 	.word	0x0800641d
 8006388:	080063fd 	.word	0x080063fd
 800638c:	0800641d 	.word	0x0800641d
 8006390:	0800641d 	.word	0x0800641d
 8006394:	0800641d 	.word	0x0800641d
 8006398:	0800641d 	.word	0x0800641d
 800639c:	0800641d 	.word	0x0800641d
 80063a0:	0800641d 	.word	0x0800641d
 80063a4:	0800641d 	.word	0x0800641d
 80063a8:	08006405 	.word	0x08006405
 80063ac:	0800641d 	.word	0x0800641d
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	0800641d 	.word	0x0800641d
 80063b8:	0800641d 	.word	0x0800641d
 80063bc:	0800641d 	.word	0x0800641d
 80063c0:	0800641d 	.word	0x0800641d
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	0800640d 	.word	0x0800640d
 80063cc:	0800641d 	.word	0x0800641d
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	0800641d 	.word	0x0800641d
 80063d8:	0800641d 	.word	0x0800641d
 80063dc:	0800641d 	.word	0x0800641d
 80063e0:	0800641d 	.word	0x0800641d
 80063e4:	0800641d 	.word	0x0800641d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e0d6      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80063f4:	2304      	movs	r3, #4
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fa:	e0d2      	b.n	80065a2 <UART_SetConfig+0x7ae>
 80063fc:	2308      	movs	r3, #8
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006402:	e0ce      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006404:	2310      	movs	r3, #16
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640a:	e0ca      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800640c:	2320      	movs	r3, #32
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e0c6      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006414:	2340      	movs	r3, #64	@ 0x40
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e0c2      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800641c:	2380      	movs	r3, #128	@ 0x80
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e0be      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006424:	40011400 	.word	0x40011400
 8006428:	58024400 	.word	0x58024400
 800642c:	40007800 	.word	0x40007800
 8006430:	40007c00 	.word	0x40007c00
 8006434:	40011800 	.word	0x40011800
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4aad      	ldr	r2, [pc, #692]	@ (80066f4 <UART_SetConfig+0x900>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d176      	bne.n	8006530 <UART_SetConfig+0x73c>
 8006442:	4bad      	ldr	r3, [pc, #692]	@ (80066f8 <UART_SetConfig+0x904>)
 8006444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800644a:	2b28      	cmp	r3, #40	@ 0x28
 800644c:	d86c      	bhi.n	8006528 <UART_SetConfig+0x734>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x660>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	080064f9 	.word	0x080064f9
 8006458:	08006529 	.word	0x08006529
 800645c:	08006529 	.word	0x08006529
 8006460:	08006529 	.word	0x08006529
 8006464:	08006529 	.word	0x08006529
 8006468:	08006529 	.word	0x08006529
 800646c:	08006529 	.word	0x08006529
 8006470:	08006529 	.word	0x08006529
 8006474:	08006501 	.word	0x08006501
 8006478:	08006529 	.word	0x08006529
 800647c:	08006529 	.word	0x08006529
 8006480:	08006529 	.word	0x08006529
 8006484:	08006529 	.word	0x08006529
 8006488:	08006529 	.word	0x08006529
 800648c:	08006529 	.word	0x08006529
 8006490:	08006529 	.word	0x08006529
 8006494:	08006509 	.word	0x08006509
 8006498:	08006529 	.word	0x08006529
 800649c:	08006529 	.word	0x08006529
 80064a0:	08006529 	.word	0x08006529
 80064a4:	08006529 	.word	0x08006529
 80064a8:	08006529 	.word	0x08006529
 80064ac:	08006529 	.word	0x08006529
 80064b0:	08006529 	.word	0x08006529
 80064b4:	08006511 	.word	0x08006511
 80064b8:	08006529 	.word	0x08006529
 80064bc:	08006529 	.word	0x08006529
 80064c0:	08006529 	.word	0x08006529
 80064c4:	08006529 	.word	0x08006529
 80064c8:	08006529 	.word	0x08006529
 80064cc:	08006529 	.word	0x08006529
 80064d0:	08006529 	.word	0x08006529
 80064d4:	08006519 	.word	0x08006519
 80064d8:	08006529 	.word	0x08006529
 80064dc:	08006529 	.word	0x08006529
 80064e0:	08006529 	.word	0x08006529
 80064e4:	08006529 	.word	0x08006529
 80064e8:	08006529 	.word	0x08006529
 80064ec:	08006529 	.word	0x08006529
 80064f0:	08006529 	.word	0x08006529
 80064f4:	08006521 	.word	0x08006521
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fe:	e050      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006500:	2304      	movs	r3, #4
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006506:	e04c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006508:	2308      	movs	r3, #8
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650e:	e048      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006510:	2310      	movs	r3, #16
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006516:	e044      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006518:	2320      	movs	r3, #32
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e040      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006520:	2340      	movs	r3, #64	@ 0x40
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e03c      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006528:	2380      	movs	r3, #128	@ 0x80
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e038      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a71      	ldr	r2, [pc, #452]	@ (80066fc <UART_SetConfig+0x908>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d130      	bne.n	800659c <UART_SetConfig+0x7a8>
 800653a:	4b6f      	ldr	r3, [pc, #444]	@ (80066f8 <UART_SetConfig+0x904>)
 800653c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	2b05      	cmp	r3, #5
 8006544:	d826      	bhi.n	8006594 <UART_SetConfig+0x7a0>
 8006546:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <UART_SetConfig+0x758>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006565 	.word	0x08006565
 8006550:	0800656d 	.word	0x0800656d
 8006554:	08006575 	.word	0x08006575
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006585 	.word	0x08006585
 8006560:	0800658d 	.word	0x0800658d
 8006564:	2302      	movs	r3, #2
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656a:	e01a      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800656c:	2304      	movs	r3, #4
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006572:	e016      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006574:	2308      	movs	r3, #8
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657a:	e012      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800657c:	2310      	movs	r3, #16
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006582:	e00e      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006584:	2320      	movs	r3, #32
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658a:	e00a      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800658c:	2340      	movs	r3, #64	@ 0x40
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006592:	e006      	b.n	80065a2 <UART_SetConfig+0x7ae>
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e002      	b.n	80065a2 <UART_SetConfig+0x7ae>
 800659c:	2380      	movs	r3, #128	@ 0x80
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a55      	ldr	r2, [pc, #340]	@ (80066fc <UART_SetConfig+0x908>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	f040 80f8 	bne.w	800679e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	dc46      	bgt.n	8006644 <UART_SetConfig+0x850>
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	db75      	blt.n	80066a6 <UART_SetConfig+0x8b2>
 80065ba:	3b02      	subs	r3, #2
 80065bc:	2b1e      	cmp	r3, #30
 80065be:	d872      	bhi.n	80066a6 <UART_SetConfig+0x8b2>
 80065c0:	a201      	add	r2, pc, #4	@ (adr r2, 80065c8 <UART_SetConfig+0x7d4>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	0800664b 	.word	0x0800664b
 80065cc:	080066a7 	.word	0x080066a7
 80065d0:	08006653 	.word	0x08006653
 80065d4:	080066a7 	.word	0x080066a7
 80065d8:	080066a7 	.word	0x080066a7
 80065dc:	080066a7 	.word	0x080066a7
 80065e0:	08006663 	.word	0x08006663
 80065e4:	080066a7 	.word	0x080066a7
 80065e8:	080066a7 	.word	0x080066a7
 80065ec:	080066a7 	.word	0x080066a7
 80065f0:	080066a7 	.word	0x080066a7
 80065f4:	080066a7 	.word	0x080066a7
 80065f8:	080066a7 	.word	0x080066a7
 80065fc:	080066a7 	.word	0x080066a7
 8006600:	08006673 	.word	0x08006673
 8006604:	080066a7 	.word	0x080066a7
 8006608:	080066a7 	.word	0x080066a7
 800660c:	080066a7 	.word	0x080066a7
 8006610:	080066a7 	.word	0x080066a7
 8006614:	080066a7 	.word	0x080066a7
 8006618:	080066a7 	.word	0x080066a7
 800661c:	080066a7 	.word	0x080066a7
 8006620:	080066a7 	.word	0x080066a7
 8006624:	080066a7 	.word	0x080066a7
 8006628:	080066a7 	.word	0x080066a7
 800662c:	080066a7 	.word	0x080066a7
 8006630:	080066a7 	.word	0x080066a7
 8006634:	080066a7 	.word	0x080066a7
 8006638:	080066a7 	.word	0x080066a7
 800663c:	080066a7 	.word	0x080066a7
 8006640:	08006699 	.word	0x08006699
 8006644:	2b40      	cmp	r3, #64	@ 0x40
 8006646:	d02a      	beq.n	800669e <UART_SetConfig+0x8aa>
 8006648:	e02d      	b.n	80066a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800664a:	f7fe fed3 	bl	80053f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800664e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006650:	e02f      	b.n	80066b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fee2 	bl	8005420 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006660:	e027      	b.n	80066b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006662:	f107 0318 	add.w	r3, r7, #24
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f82e 	bl	80056c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006670:	e01f      	b.n	80066b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006672:	4b21      	ldr	r3, [pc, #132]	@ (80066f8 <UART_SetConfig+0x904>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800667e:	4b1e      	ldr	r3, [pc, #120]	@ (80066f8 <UART_SetConfig+0x904>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	08db      	lsrs	r3, r3, #3
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <UART_SetConfig+0x90c>)
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006690:	e00f      	b.n	80066b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006692:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <UART_SetConfig+0x90c>)
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006696:	e00c      	b.n	80066b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006698:	4b1a      	ldr	r3, [pc, #104]	@ (8006704 <UART_SetConfig+0x910>)
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669c:	e009      	b.n	80066b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a4:	e005      	b.n	80066b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 81ee 	beq.w	8006a96 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	4a12      	ldr	r2, [pc, #72]	@ (8006708 <UART_SetConfig+0x914>)
 80066c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c4:	461a      	mov	r2, r3
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4413      	add	r3, r2
 80066d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066da:	429a      	cmp	r2, r3
 80066dc:	d305      	bcc.n	80066ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d910      	bls.n	800670c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066f0:	e1d1      	b.n	8006a96 <UART_SetConfig+0xca2>
 80066f2:	bf00      	nop
 80066f4:	40011c00 	.word	0x40011c00
 80066f8:	58024400 	.word	0x58024400
 80066fc:	58000c00 	.word	0x58000c00
 8006700:	03d09000 	.word	0x03d09000
 8006704:	003d0900 	.word	0x003d0900
 8006708:	0800b734 	.word	0x0800b734
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800670c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670e:	2200      	movs	r2, #0
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	60fa      	str	r2, [r7, #12]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	4ac0      	ldr	r2, [pc, #768]	@ (8006a1c <UART_SetConfig+0xc28>)
 800671a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671e:	b29b      	uxth	r3, r3
 8006720:	2200      	movs	r2, #0
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800672a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800672e:	f7f9 fe47 	bl	80003c0 <__aeabi_uldivmod>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	020b      	lsls	r3, r1, #8
 8006744:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006748:	0202      	lsls	r2, r0, #8
 800674a:	6979      	ldr	r1, [r7, #20]
 800674c:	6849      	ldr	r1, [r1, #4]
 800674e:	0849      	lsrs	r1, r1, #1
 8006750:	2000      	movs	r0, #0
 8006752:	460c      	mov	r4, r1
 8006754:	4605      	mov	r5, r0
 8006756:	eb12 0804 	adds.w	r8, r2, r4
 800675a:	eb43 0905 	adc.w	r9, r3, r5
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	469a      	mov	sl, r3
 8006766:	4693      	mov	fp, r2
 8006768:	4652      	mov	r2, sl
 800676a:	465b      	mov	r3, fp
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	f7f9 fe26 	bl	80003c0 <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4613      	mov	r3, r2
 800677a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800677c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006782:	d308      	bcc.n	8006796 <UART_SetConfig+0x9a2>
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800678a:	d204      	bcs.n	8006796 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	e17f      	b.n	8006a96 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800679c:	e17b      	b.n	8006a96 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a6:	f040 80bd 	bne.w	8006924 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80067aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	dc48      	bgt.n	8006844 <UART_SetConfig+0xa50>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	db7b      	blt.n	80068ae <UART_SetConfig+0xaba>
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d879      	bhi.n	80068ae <UART_SetConfig+0xaba>
 80067ba:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <UART_SetConfig+0x9cc>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	0800684b 	.word	0x0800684b
 80067c4:	08006853 	.word	0x08006853
 80067c8:	080068af 	.word	0x080068af
 80067cc:	080068af 	.word	0x080068af
 80067d0:	0800685b 	.word	0x0800685b
 80067d4:	080068af 	.word	0x080068af
 80067d8:	080068af 	.word	0x080068af
 80067dc:	080068af 	.word	0x080068af
 80067e0:	0800686b 	.word	0x0800686b
 80067e4:	080068af 	.word	0x080068af
 80067e8:	080068af 	.word	0x080068af
 80067ec:	080068af 	.word	0x080068af
 80067f0:	080068af 	.word	0x080068af
 80067f4:	080068af 	.word	0x080068af
 80067f8:	080068af 	.word	0x080068af
 80067fc:	080068af 	.word	0x080068af
 8006800:	0800687b 	.word	0x0800687b
 8006804:	080068af 	.word	0x080068af
 8006808:	080068af 	.word	0x080068af
 800680c:	080068af 	.word	0x080068af
 8006810:	080068af 	.word	0x080068af
 8006814:	080068af 	.word	0x080068af
 8006818:	080068af 	.word	0x080068af
 800681c:	080068af 	.word	0x080068af
 8006820:	080068af 	.word	0x080068af
 8006824:	080068af 	.word	0x080068af
 8006828:	080068af 	.word	0x080068af
 800682c:	080068af 	.word	0x080068af
 8006830:	080068af 	.word	0x080068af
 8006834:	080068af 	.word	0x080068af
 8006838:	080068af 	.word	0x080068af
 800683c:	080068af 	.word	0x080068af
 8006840:	080068a1 	.word	0x080068a1
 8006844:	2b40      	cmp	r3, #64	@ 0x40
 8006846:	d02e      	beq.n	80068a6 <UART_SetConfig+0xab2>
 8006848:	e031      	b.n	80068ae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800684a:	f7fd fc07 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 800684e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006850:	e033      	b.n	80068ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006852:	f7fd fc19 	bl	8004088 <HAL_RCC_GetPCLK2Freq>
 8006856:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006858:	e02f      	b.n	80068ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800685a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fdde 	bl	8005420 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006868:	e027      	b.n	80068ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800686a:	f107 0318 	add.w	r3, r7, #24
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe ff2a 	bl	80056c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006878:	e01f      	b.n	80068ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800687a:	4b69      	ldr	r3, [pc, #420]	@ (8006a20 <UART_SetConfig+0xc2c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006886:	4b66      	ldr	r3, [pc, #408]	@ (8006a20 <UART_SetConfig+0xc2c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	08db      	lsrs	r3, r3, #3
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	4a64      	ldr	r2, [pc, #400]	@ (8006a24 <UART_SetConfig+0xc30>)
 8006892:	fa22 f303 	lsr.w	r3, r2, r3
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006898:	e00f      	b.n	80068ba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800689a:	4b62      	ldr	r3, [pc, #392]	@ (8006a24 <UART_SetConfig+0xc30>)
 800689c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689e:	e00c      	b.n	80068ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068a0:	4b61      	ldr	r3, [pc, #388]	@ (8006a28 <UART_SetConfig+0xc34>)
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068a4:	e009      	b.n	80068ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ac:	e005      	b.n	80068ba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80ea 	beq.w	8006a96 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	4a55      	ldr	r2, [pc, #340]	@ (8006a1c <UART_SetConfig+0xc28>)
 80068c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d4:	005a      	lsls	r2, r3, #1
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	441a      	add	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d916      	bls.n	800691c <UART_SetConfig+0xb28>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f4:	d212      	bcs.n	800691c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f023 030f 	bic.w	r3, r3, #15
 80068fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	b29a      	uxth	r2, r3
 800690c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800690e:	4313      	orrs	r3, r2
 8006910:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	e0bc      	b.n	8006a96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006922:	e0b8      	b.n	8006a96 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006924:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006928:	2b20      	cmp	r3, #32
 800692a:	dc4b      	bgt.n	80069c4 <UART_SetConfig+0xbd0>
 800692c:	2b00      	cmp	r3, #0
 800692e:	f2c0 8087 	blt.w	8006a40 <UART_SetConfig+0xc4c>
 8006932:	2b20      	cmp	r3, #32
 8006934:	f200 8084 	bhi.w	8006a40 <UART_SetConfig+0xc4c>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <UART_SetConfig+0xb4c>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	080069cb 	.word	0x080069cb
 8006944:	080069d3 	.word	0x080069d3
 8006948:	08006a41 	.word	0x08006a41
 800694c:	08006a41 	.word	0x08006a41
 8006950:	080069db 	.word	0x080069db
 8006954:	08006a41 	.word	0x08006a41
 8006958:	08006a41 	.word	0x08006a41
 800695c:	08006a41 	.word	0x08006a41
 8006960:	080069eb 	.word	0x080069eb
 8006964:	08006a41 	.word	0x08006a41
 8006968:	08006a41 	.word	0x08006a41
 800696c:	08006a41 	.word	0x08006a41
 8006970:	08006a41 	.word	0x08006a41
 8006974:	08006a41 	.word	0x08006a41
 8006978:	08006a41 	.word	0x08006a41
 800697c:	08006a41 	.word	0x08006a41
 8006980:	080069fb 	.word	0x080069fb
 8006984:	08006a41 	.word	0x08006a41
 8006988:	08006a41 	.word	0x08006a41
 800698c:	08006a41 	.word	0x08006a41
 8006990:	08006a41 	.word	0x08006a41
 8006994:	08006a41 	.word	0x08006a41
 8006998:	08006a41 	.word	0x08006a41
 800699c:	08006a41 	.word	0x08006a41
 80069a0:	08006a41 	.word	0x08006a41
 80069a4:	08006a41 	.word	0x08006a41
 80069a8:	08006a41 	.word	0x08006a41
 80069ac:	08006a41 	.word	0x08006a41
 80069b0:	08006a41 	.word	0x08006a41
 80069b4:	08006a41 	.word	0x08006a41
 80069b8:	08006a41 	.word	0x08006a41
 80069bc:	08006a41 	.word	0x08006a41
 80069c0:	08006a33 	.word	0x08006a33
 80069c4:	2b40      	cmp	r3, #64	@ 0x40
 80069c6:	d037      	beq.n	8006a38 <UART_SetConfig+0xc44>
 80069c8:	e03a      	b.n	8006a40 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ca:	f7fd fb47 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 80069ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069d0:	e03c      	b.n	8006a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d2:	f7fd fb59 	bl	8004088 <HAL_RCC_GetPCLK2Freq>
 80069d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069d8:	e038      	b.n	8006a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fd1e 	bl	8005420 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e8:	e030      	b.n	8006a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ea:	f107 0318 	add.w	r3, r7, #24
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fe6a 	bl	80056c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f8:	e028      	b.n	8006a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069fa:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <UART_SetConfig+0xc2c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d012      	beq.n	8006a2c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <UART_SetConfig+0xc2c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	08db      	lsrs	r3, r3, #3
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	4a04      	ldr	r2, [pc, #16]	@ (8006a24 <UART_SetConfig+0xc30>)
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a18:	e018      	b.n	8006a4c <UART_SetConfig+0xc58>
 8006a1a:	bf00      	nop
 8006a1c:	0800b734 	.word	0x0800b734
 8006a20:	58024400 	.word	0x58024400
 8006a24:	03d09000 	.word	0x03d09000
 8006a28:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006a2c:	4b24      	ldr	r3, [pc, #144]	@ (8006ac0 <UART_SetConfig+0xccc>)
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a30:	e00c      	b.n	8006a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a32:	4b24      	ldr	r3, [pc, #144]	@ (8006ac4 <UART_SetConfig+0xcd0>)
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a36:	e009      	b.n	8006a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a3e:	e005      	b.n	8006a4c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d021      	beq.n	8006a96 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac8 <UART_SetConfig+0xcd4>)
 8006a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a60:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	441a      	add	r2, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	2b0f      	cmp	r3, #15
 8006a7a:	d909      	bls.n	8006a90 <UART_SetConfig+0xc9c>
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a82:	d205      	bcs.n	8006a90 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	e002      	b.n	8006a96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ab2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3748      	adds	r7, #72	@ 0x48
 8006aba:	46bd      	mov	sp, r7
 8006abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac0:	03d09000 	.word	0x03d09000
 8006ac4:	003d0900 	.word	0x003d0900
 8006ac8:	0800b734 	.word	0x0800b734

08006acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bca:	d10a      	bne.n	8006be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b098      	sub	sp, #96	@ 0x60
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c20:	f7fa fcb0 	bl	8001584 <HAL_GetTick>
 8006c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d12f      	bne.n	8006c94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f88e 	bl	8006d64 <UART_WaitOnFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d022      	beq.n	8006c94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e063      	b.n	8006d5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d149      	bne.n	8006d36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006caa:	2200      	movs	r2, #0
 8006cac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f857 	bl	8006d64 <UART_WaitOnFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d03c      	beq.n	8006d36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d0e:	61fa      	str	r2, [r7, #28]
 8006d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	69b9      	ldr	r1, [r7, #24]
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e012      	b.n	8006d5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3758      	adds	r7, #88	@ 0x58
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d74:	e04f      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d04b      	beq.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7fa fc01 	bl	8001584 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e04e      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d037      	beq.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b80      	cmp	r3, #128	@ 0x80
 8006daa:	d034      	beq.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b40      	cmp	r3, #64	@ 0x40
 8006db0:	d031      	beq.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d110      	bne.n	8006de2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2208      	movs	r2, #8
 8006dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f839 	bl	8006e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e029      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df0:	d111      	bne.n	8006e16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f81f 	bl	8006e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e00f      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	bf0c      	ite	eq
 8006e26:	2301      	moveq	r3, #1
 8006e28:	2300      	movne	r3, #0
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d0a0      	beq.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b095      	sub	sp, #84	@ 0x54
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e6      	bne.n	8006e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f08 <UART_EndRxTransfer+0xc8>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e5      	bne.n	8006e7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d118      	bne.n	8006ee8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f023 0310 	bic.w	r3, r3, #16
 8006eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6979      	ldr	r1, [r7, #20]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006efc:	bf00      	nop
 8006efe:	3754      	adds	r7, #84	@ 0x54
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	effffffe 	.word	0xeffffffe

08006f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e027      	b.n	8006f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2224      	movs	r2, #36	@ 0x24
 8006f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e02d      	b.n	8006ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2224      	movs	r2, #36	@ 0x24
 8006fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0201 	bic.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f850 	bl	8007078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800700a:	2b01      	cmp	r3, #1
 800700c:	d101      	bne.n	8007012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800700e:	2302      	movs	r3, #2
 8007010:	e02d      	b.n	800706e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2224      	movs	r2, #36	@ 0x24
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f812 	bl	8007078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007098:	e031      	b.n	80070fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800709a:	2310      	movs	r3, #16
 800709c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800709e:	2310      	movs	r3, #16
 80070a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	0e5b      	lsrs	r3, r3, #25
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	0f5b      	lsrs	r3, r3, #29
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	7b3a      	ldrb	r2, [r7, #12]
 80070c6:	4911      	ldr	r1, [pc, #68]	@ (800710c <UARTEx_SetNbDataToProcess+0x94>)
 80070c8:	5c8a      	ldrb	r2, [r1, r2]
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ce:	7b3a      	ldrb	r2, [r7, #12]
 80070d0:	490f      	ldr	r1, [pc, #60]	@ (8007110 <UARTEx_SetNbDataToProcess+0x98>)
 80070d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d8:	b29a      	uxth	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	7b7a      	ldrb	r2, [r7, #13]
 80070e4:	4909      	ldr	r1, [pc, #36]	@ (800710c <UARTEx_SetNbDataToProcess+0x94>)
 80070e6:	5c8a      	ldrb	r2, [r1, r2]
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070ec:	7b7a      	ldrb	r2, [r7, #13]
 80070ee:	4908      	ldr	r1, [pc, #32]	@ (8007110 <UARTEx_SetNbDataToProcess+0x98>)
 80070f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	0800b74c 	.word	0x0800b74c
 8007110:	0800b754 	.word	0x0800b754

08007114 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007114:	b084      	sub	sp, #16
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	f107 001c 	add.w	r0, r7, #28
 8007122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007126:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800712a:	2b01      	cmp	r3, #1
 800712c:	d121      	bne.n	8007172 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	4b2c      	ldr	r3, [pc, #176]	@ (80071f0 <USB_CoreInit+0xdc>)
 8007140:	4013      	ands	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007152:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 fafa 	bl	8008760 <USB_CoreReset>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
 8007170:	e01b      	b.n	80071aa <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 faee 	bl	8008760 <USB_CoreReset>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007188:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007194:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
 800719c:	e005      	b.n	80071aa <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071aa:	7fbb      	ldrb	r3, [r7, #30]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d116      	bne.n	80071de <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <USB_CoreInit+0xe0>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f043 0206 	orr.w	r2, r3, #6
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071ea:	b004      	add	sp, #16
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	ffbdffbf 	.word	0xffbdffbf
 80071f4:	03ee0000 	.word	0x03ee0000

080071f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d165      	bne.n	80072d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4a41      	ldr	r2, [pc, #260]	@ (8007314 <USB_SetTurnaroundTime+0x11c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d906      	bls.n	8007222 <USB_SetTurnaroundTime+0x2a>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4a40      	ldr	r2, [pc, #256]	@ (8007318 <USB_SetTurnaroundTime+0x120>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d202      	bcs.n	8007222 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800721c:	230f      	movs	r3, #15
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e062      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4a3c      	ldr	r2, [pc, #240]	@ (8007318 <USB_SetTurnaroundTime+0x120>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d306      	bcc.n	8007238 <USB_SetTurnaroundTime+0x40>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4a3b      	ldr	r2, [pc, #236]	@ (800731c <USB_SetTurnaroundTime+0x124>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d202      	bcs.n	8007238 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007232:	230e      	movs	r3, #14
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e057      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4a38      	ldr	r2, [pc, #224]	@ (800731c <USB_SetTurnaroundTime+0x124>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d306      	bcc.n	800724e <USB_SetTurnaroundTime+0x56>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4a37      	ldr	r2, [pc, #220]	@ (8007320 <USB_SetTurnaroundTime+0x128>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d202      	bcs.n	800724e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007248:	230d      	movs	r3, #13
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	e04c      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4a33      	ldr	r2, [pc, #204]	@ (8007320 <USB_SetTurnaroundTime+0x128>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d306      	bcc.n	8007264 <USB_SetTurnaroundTime+0x6c>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4a32      	ldr	r2, [pc, #200]	@ (8007324 <USB_SetTurnaroundTime+0x12c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d802      	bhi.n	8007264 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800725e:	230c      	movs	r3, #12
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	e041      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4a2f      	ldr	r2, [pc, #188]	@ (8007324 <USB_SetTurnaroundTime+0x12c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d906      	bls.n	800727a <USB_SetTurnaroundTime+0x82>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4a2e      	ldr	r2, [pc, #184]	@ (8007328 <USB_SetTurnaroundTime+0x130>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d802      	bhi.n	800727a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007274:	230b      	movs	r3, #11
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e036      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	4a2a      	ldr	r2, [pc, #168]	@ (8007328 <USB_SetTurnaroundTime+0x130>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d906      	bls.n	8007290 <USB_SetTurnaroundTime+0x98>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	4a29      	ldr	r2, [pc, #164]	@ (800732c <USB_SetTurnaroundTime+0x134>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d802      	bhi.n	8007290 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800728a:	230a      	movs	r3, #10
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	e02b      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4a26      	ldr	r2, [pc, #152]	@ (800732c <USB_SetTurnaroundTime+0x134>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d906      	bls.n	80072a6 <USB_SetTurnaroundTime+0xae>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4a25      	ldr	r2, [pc, #148]	@ (8007330 <USB_SetTurnaroundTime+0x138>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d202      	bcs.n	80072a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072a0:	2309      	movs	r3, #9
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e020      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4a21      	ldr	r2, [pc, #132]	@ (8007330 <USB_SetTurnaroundTime+0x138>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d306      	bcc.n	80072bc <USB_SetTurnaroundTime+0xc4>
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4a20      	ldr	r2, [pc, #128]	@ (8007334 <USB_SetTurnaroundTime+0x13c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d802      	bhi.n	80072bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072b6:	2308      	movs	r3, #8
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e015      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4a1d      	ldr	r2, [pc, #116]	@ (8007334 <USB_SetTurnaroundTime+0x13c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d906      	bls.n	80072d2 <USB_SetTurnaroundTime+0xda>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <USB_SetTurnaroundTime+0x140>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d202      	bcs.n	80072d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072cc:	2307      	movs	r3, #7
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	e00a      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072d2:	2306      	movs	r3, #6
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e007      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072de:	2309      	movs	r3, #9
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	e001      	b.n	80072e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072e4:	2309      	movs	r3, #9
 80072e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	029b      	lsls	r3, r3, #10
 80072fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007300:	431a      	orrs	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	00d8acbf 	.word	0x00d8acbf
 8007318:	00e4e1c0 	.word	0x00e4e1c0
 800731c:	00f42400 	.word	0x00f42400
 8007320:	01067380 	.word	0x01067380
 8007324:	011a499f 	.word	0x011a499f
 8007328:	01312cff 	.word	0x01312cff
 800732c:	014ca43f 	.word	0x014ca43f
 8007330:	016e3600 	.word	0x016e3600
 8007334:	01a6ab1f 	.word	0x01a6ab1f
 8007338:	01e84800 	.word	0x01e84800

0800733c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f043 0201 	orr.w	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f023 0201 	bic.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d115      	bne.n	80073ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073ae:	200a      	movs	r0, #10
 80073b0:	f7fa f8f4 	bl	800159c <HAL_Delay>
      ms += 10U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	330a      	adds	r3, #10
 80073b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 f93f 	bl	800863e <USB_GetMode>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d01e      	beq.n	8007404 <USB_SetCurrentMode+0x84>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80073ca:	d9f0      	bls.n	80073ae <USB_SetCurrentMode+0x2e>
 80073cc:	e01a      	b.n	8007404 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d115      	bne.n	8007400 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073e0:	200a      	movs	r0, #10
 80073e2:	f7fa f8db 	bl	800159c <HAL_Delay>
      ms += 10U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	330a      	adds	r3, #10
 80073ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 f926 	bl	800863e <USB_GetMode>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <USB_SetCurrentMode+0x84>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80073fc:	d9f0      	bls.n	80073e0 <USB_SetCurrentMode+0x60>
 80073fe:	e001      	b.n	8007404 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e005      	b.n	8007410 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2bc8      	cmp	r3, #200	@ 0xc8
 8007408:	d101      	bne.n	800740e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007418:	b084      	sub	sp, #16
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007432:	2300      	movs	r3, #0
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	e009      	b.n	800744c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	3340      	adds	r3, #64	@ 0x40
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	2200      	movs	r2, #0
 8007444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b0e      	cmp	r3, #14
 8007450:	d9f2      	bls.n	8007438 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007452:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11c      	bne.n	8007494 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007468:	f043 0302 	orr.w	r3, r3, #2
 800746c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007472:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e005      	b.n	80074a0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007498:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074a6:	461a      	mov	r2, r3
 80074a8:	2300      	movs	r3, #0
 80074aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10d      	bne.n	80074d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074bc:	2100      	movs	r1, #0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f968 	bl	8007794 <USB_SetDevSpeed>
 80074c4:	e008      	b.n	80074d8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074c6:	2101      	movs	r1, #1
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f963 	bl	8007794 <USB_SetDevSpeed>
 80074ce:	e003      	b.n	80074d8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074d0:	2103      	movs	r1, #3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f95e 	bl	8007794 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074d8:	2110      	movs	r1, #16
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f8fa 	bl	80076d4 <USB_FlushTxFifo>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f924 	bl	8007738 <USB_FlushRxFifo>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750c:	461a      	mov	r2, r3
 800750e:	2300      	movs	r3, #0
 8007510:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007518:	461a      	mov	r2, r3
 800751a:	2300      	movs	r3, #0
 800751c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e043      	b.n	80075ac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007536:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800753a:	d118      	bne.n	800756e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800754e:	461a      	mov	r2, r3
 8007550:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e013      	b.n	8007580 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007564:	461a      	mov	r2, r3
 8007566:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	e008      	b.n	8007580 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800757a:	461a      	mov	r2, r3
 800757c:	2300      	movs	r3, #0
 800757e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758c:	461a      	mov	r2, r3
 800758e:	2300      	movs	r3, #0
 8007590:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759e:	461a      	mov	r2, r3
 80075a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075b0:	461a      	mov	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d3b5      	bcc.n	8007524 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	e043      	b.n	8007646 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d4:	d118      	bne.n	8007608 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e8:	461a      	mov	r2, r3
 80075ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e013      	b.n	800761a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fe:	461a      	mov	r2, r3
 8007600:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e008      	b.n	800761a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007614:	461a      	mov	r2, r3
 8007616:	2300      	movs	r3, #0
 8007618:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007626:	461a      	mov	r2, r3
 8007628:	2300      	movs	r3, #0
 800762a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007638:	461a      	mov	r2, r3
 800763a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800763e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	3301      	adds	r3, #1
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800764a:	461a      	mov	r2, r3
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4293      	cmp	r3, r2
 8007650:	d3b5      	bcc.n	80075be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007664:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007672:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007674:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f043 0210 	orr.w	r2, r3, #16
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	4b0f      	ldr	r3, [pc, #60]	@ (80076cc <USB_DevInit+0x2b4>)
 800768e:	4313      	orrs	r3, r2
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007694:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f043 0208 	orr.w	r2, r3, #8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d105      	bne.n	80076bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699a      	ldr	r2, [r3, #24]
 80076b4:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <USB_DevInit+0x2b8>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076c8:	b004      	add	sp, #16
 80076ca:	4770      	bx	lr
 80076cc:	803c3800 	.word	0x803c3800
 80076d0:	40000004 	.word	0x40000004

080076d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ee:	d901      	bls.n	80076f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e01b      	b.n	800772c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	daf2      	bge.n	80076e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	019b      	lsls	r3, r3, #6
 8007704:	f043 0220 	orr.w	r2, r3, #32
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007718:	d901      	bls.n	800771e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e006      	b.n	800772c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b20      	cmp	r3, #32
 8007728:	d0f0      	beq.n	800770c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007750:	d901      	bls.n	8007756 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e018      	b.n	8007788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	daf2      	bge.n	8007744 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2210      	movs	r2, #16
 8007766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007774:	d901      	bls.n	800777a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e006      	b.n	8007788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d0f0      	beq.n	8007768 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	68f9      	ldr	r1, [r7, #12]
 80077b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b4:	4313      	orrs	r3, r2
 80077b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0306 	and.w	r3, r3, #6
 80077de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
 80077ea:	e00a      	b.n	8007802 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d002      	beq.n	80077f8 <USB_GetDevSpeed+0x32>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	d102      	bne.n	80077fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80077f8:	2302      	movs	r3, #2
 80077fa:	75fb      	strb	r3, [r7, #23]
 80077fc:	e001      	b.n	8007802 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80077fe:	230f      	movs	r3, #15
 8007800:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d139      	bne.n	80078a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	68f9      	ldr	r1, [r7, #12]
 8007846:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800784a:	4313      	orrs	r3, r2
 800784c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d153      	bne.n	800790c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	791b      	ldrb	r3, [r3, #4]
 800787e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007880:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	059b      	lsls	r3, r3, #22
 8007886:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007888:	431a      	orrs	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	0159      	lsls	r1, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	440b      	add	r3, r1
 8007892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007896:	4619      	mov	r1, r3
 8007898:	4b20      	ldr	r3, [pc, #128]	@ (800791c <USB_ActivateEndpoint+0x10c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	600b      	str	r3, [r1, #0]
 800789e:	e035      	b.n	800790c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a6:	69da      	ldr	r2, [r3, #28]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	2101      	movs	r1, #1
 80078b2:	fa01 f303 	lsl.w	r3, r1, r3
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	68f9      	ldr	r1, [r7, #12]
 80078ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078be:	4313      	orrs	r3, r2
 80078c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d119      	bne.n	800790c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078f4:	430b      	orrs	r3, r1
 80078f6:	431a      	orrs	r2, r3
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	0159      	lsls	r1, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	440b      	add	r3, r1
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	4619      	mov	r1, r3
 8007906:	4b05      	ldr	r3, [pc, #20]	@ (800791c <USB_ActivateEndpoint+0x10c>)
 8007908:	4313      	orrs	r3, r2
 800790a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	10008000 	.word	0x10008000

08007920 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d161      	bne.n	8007a00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800794e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007952:	d11f      	bne.n	8007994 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	440a      	add	r2, r1
 800796a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800796e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007972:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007992:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	2101      	movs	r1, #1
 80079a6:	fa01 f303 	lsl.w	r3, r1, r3
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	43db      	mvns	r3, r3
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079b4:	4013      	ands	r3, r2
 80079b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079be:	69da      	ldr	r2, [r3, #28]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	2101      	movs	r1, #1
 80079ca:	fa01 f303 	lsl.w	r3, r1, r3
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	43db      	mvns	r3, r3
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079d8:	4013      	ands	r3, r2
 80079da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	0159      	lsls	r1, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	440b      	add	r3, r1
 80079f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f6:	4619      	mov	r1, r3
 80079f8:	4b35      	ldr	r3, [pc, #212]	@ (8007ad0 <USB_DeactivateEndpoint+0x1b0>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]
 80079fe:	e060      	b.n	8007ac2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a16:	d11f      	bne.n	8007a58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	2101      	movs	r1, #1
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	43db      	mvns	r3, r3
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a78:	4013      	ands	r3, r2
 8007a7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	43db      	mvns	r3, r3
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	0159      	lsls	r1, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	440b      	add	r3, r1
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aba:	4619      	mov	r1, r3
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <USB_DeactivateEndpoint+0x1b4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	ec337800 	.word	0xec337800
 8007ad4:	eff37800 	.word	0xeff37800

08007ad8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	@ 0x28
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 8185 	bne.w	8007e04 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d132      	bne.n	8007b68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	0159      	lsls	r1, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	440b      	add	r3, r1
 8007b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4ba7      	ldr	r3, [pc, #668]	@ (8007dbc <USB_EPStartXfer+0x2e4>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	0159      	lsls	r1, r3, #5
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	440b      	add	r3, r1
 8007b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4b97      	ldr	r3, [pc, #604]	@ (8007dc0 <USB_EPStartXfer+0x2e8>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	610b      	str	r3, [r1, #16]
 8007b66:	e097      	b.n	8007c98 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	0159      	lsls	r1, r3, #5
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b82:	4619      	mov	r1, r3
 8007b84:	4b8e      	ldr	r3, [pc, #568]	@ (8007dc0 <USB_EPStartXfer+0x2e8>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	0159      	lsls	r1, r3, #5
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	440b      	add	r3, r1
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4b85      	ldr	r3, [pc, #532]	@ (8007dbc <USB_EPStartXfer+0x2e4>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d11a      	bne.n	8007be8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d903      	bls.n	8007bc6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007be4:	6113      	str	r3, [r2, #16]
 8007be6:	e044      	b.n	8007c72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	1e5a      	subs	r2, r3, #1
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	8afb      	ldrh	r3, [r7, #22]
 8007c0e:	04d9      	lsls	r1, r3, #19
 8007c10:	4b6c      	ldr	r3, [pc, #432]	@ (8007dc4 <USB_EPStartXfer+0x2ec>)
 8007c12:	400b      	ands	r3, r1
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	0148      	lsls	r0, r1, #5
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	4401      	add	r1, r0
 8007c1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c20:	4313      	orrs	r3, r2
 8007c22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	791b      	ldrb	r3, [r3, #4]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d122      	bne.n	8007c72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007c4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	8afb      	ldrh	r3, [r7, #22]
 8007c5c:	075b      	lsls	r3, r3, #29
 8007c5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007c62:	69b9      	ldr	r1, [r7, #24]
 8007c64:	0148      	lsls	r0, r1, #5
 8007c66:	69f9      	ldr	r1, [r7, #28]
 8007c68:	4401      	add	r1, r0
 8007c6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c88:	69b9      	ldr	r1, [r7, #24]
 8007c8a:	0148      	lsls	r0, r1, #5
 8007c8c:	69f9      	ldr	r1, [r7, #28]
 8007c8e:	4401      	add	r1, r0
 8007c90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c94:	4313      	orrs	r3, r2
 8007c96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d14b      	bne.n	8007d36 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	791b      	ldrb	r3, [r3, #4]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d128      	bne.n	8007d14 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d110      	bne.n	8007cf4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	69fa      	ldr	r2, [r7, #28]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e00f      	b.n	8007d14 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d12:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	e169      	b.n	800800a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d54:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	791b      	ldrb	r3, [r3, #4]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d015      	beq.n	8007d8a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8151 	beq.w	800800a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2101      	movs	r1, #1
 8007d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7e:	69f9      	ldr	r1, [r7, #28]
 8007d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d84:	4313      	orrs	r3, r2
 8007d86:	634b      	str	r3, [r1, #52]	@ 0x34
 8007d88:	e13f      	b.n	800800a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d116      	bne.n	8007dc8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007db4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	e015      	b.n	8007de8 <USB_EPStartXfer+0x310>
 8007dbc:	e007ffff 	.word	0xe007ffff
 8007dc0:	fff80000 	.word	0xfff80000
 8007dc4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007de6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	68d9      	ldr	r1, [r3, #12]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	781a      	ldrb	r2, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	b298      	uxth	r0, r3
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 f9b9 	bl	8008174 <USB_WritePacket>
 8007e02:	e102      	b.n	800800a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	0159      	lsls	r1, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	440b      	add	r3, r1
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4b7c      	ldr	r3, [pc, #496]	@ (8008014 <USB_EPStartXfer+0x53c>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	0159      	lsls	r1, r3, #5
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e40:	4619      	mov	r1, r3
 8007e42:	4b75      	ldr	r3, [pc, #468]	@ (8008018 <USB_EPStartXfer+0x540>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d12f      	bne.n	8007eae <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e7c:	69b9      	ldr	r1, [r7, #24]
 8007e7e:	0148      	lsls	r0, r1, #5
 8007e80:	69f9      	ldr	r1, [r7, #28]
 8007e82:	4401      	add	r1, r0
 8007e84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007eaa:	6113      	str	r3, [r2, #16]
 8007eac:	e05f      	b.n	8007f6e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d123      	bne.n	8007efe <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ecc:	69b9      	ldr	r1, [r7, #24]
 8007ece:	0148      	lsls	r0, r1, #5
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	4401      	add	r1, r0
 8007ed4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ef6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007efa:	6113      	str	r3, [r2, #16]
 8007efc:	e037      	b.n	8007f6e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	4413      	add	r3, r2
 8007f08:	1e5a      	subs	r2, r3, #1
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f12:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	8afa      	ldrh	r2, [r7, #22]
 8007f1a:	fb03 f202 	mul.w	r2, r3, r2
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	8afb      	ldrh	r3, [r7, #22]
 8007f32:	04d9      	lsls	r1, r3, #19
 8007f34:	4b39      	ldr	r3, [pc, #228]	@ (800801c <USB_EPStartXfer+0x544>)
 8007f36:	400b      	ands	r3, r1
 8007f38:	69b9      	ldr	r1, [r7, #24]
 8007f3a:	0148      	lsls	r0, r1, #5
 8007f3c:	69f9      	ldr	r1, [r7, #28]
 8007f3e:	4401      	add	r1, r0
 8007f40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f44:	4313      	orrs	r3, r2
 8007f46:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5e:	69b9      	ldr	r1, [r7, #24]
 8007f60:	0148      	lsls	r0, r1, #5
 8007f62:	69f9      	ldr	r1, [r7, #28]
 8007f64:	4401      	add	r1, r0
 8007f66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d10d      	bne.n	8007f90 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	68d9      	ldr	r1, [r3, #12]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	791b      	ldrb	r3, [r3, #4]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d128      	bne.n	8007fea <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d110      	bne.n	8007fca <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e00f      	b.n	8007fea <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fe8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008004:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008008:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	fff80000 	.word	0xfff80000
 8008018:	e007ffff 	.word	0xe007ffff
 800801c:	1ff80000 	.word	0x1ff80000

08008020 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d14a      	bne.n	80080d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008056:	f040 8086 	bne.w	8008166 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008078:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800807c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d902      	bls.n	80080b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
          break;
 80080b6:	e056      	b.n	8008166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080d0:	d0e7      	beq.n	80080a2 <USB_EPStopXfer+0x82>
 80080d2:	e048      	b.n	8008166 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ec:	d13b      	bne.n	8008166 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800810c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008110:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008142:	4293      	cmp	r3, r2
 8008144:	d902      	bls.n	800814c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
          break;
 800814a:	e00c      	b.n	8008166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008164:	d0e7      	beq.n	8008136 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008174:	b480      	push	{r7}
 8008176:	b089      	sub	sp, #36	@ 0x24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4611      	mov	r1, r2
 8008180:	461a      	mov	r2, r3
 8008182:	460b      	mov	r3, r1
 8008184:	71fb      	strb	r3, [r7, #7]
 8008186:	4613      	mov	r3, r2
 8008188:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d123      	bne.n	80081e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800819a:	88bb      	ldrh	r3, [r7, #4]
 800819c:	3303      	adds	r3, #3
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e018      	b.n	80081da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	031a      	lsls	r2, r3, #12
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081b4:	461a      	mov	r2, r3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	3301      	adds	r3, #1
 80081c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	3301      	adds	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	3301      	adds	r3, #1
 80081d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3e2      	bcc.n	80081a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3724      	adds	r7, #36	@ 0x24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b08b      	sub	sp, #44	@ 0x2c
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	089b      	lsrs	r3, r3, #2
 800820a:	b29b      	uxth	r3, r3
 800820c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	e014      	b.n	8008246 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008226:	601a      	str	r2, [r3, #0]
    pDest++;
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	3301      	adds	r3, #1
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	3301      	adds	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	3301      	adds	r3, #1
 8008238:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	3301      	adds	r3, #1
 800823e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	3301      	adds	r3, #1
 8008244:	623b      	str	r3, [r7, #32]
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	429a      	cmp	r2, r3
 800824c:	d3e6      	bcc.n	800821c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800824e:	8bfb      	ldrh	r3, [r7, #30]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01e      	beq.n	8008292 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800825e:	461a      	mov	r2, r3
 8008260:	f107 0310 	add.w	r3, r7, #16
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
 8008274:	b2da      	uxtb	r2, r3
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	701a      	strb	r2, [r3, #0]
      i++;
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	3301      	adds	r3, #1
 800827e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	3301      	adds	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008286:	8bfb      	ldrh	r3, [r7, #30]
 8008288:	3b01      	subs	r3, #1
 800828a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800828c:	8bfb      	ldrh	r3, [r7, #30]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ea      	bne.n	8008268 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008294:	4618      	mov	r0, r3
 8008296:	372c      	adds	r7, #44	@ 0x2c
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d12c      	bne.n	8008316 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	db12      	blt.n	80082f4 <USB_EPSetStall+0x54>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00f      	beq.n	80082f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	e02b      	b.n	800836e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	db12      	blt.n	800834e <USB_EPSetStall+0xae>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00f      	beq.n	800834e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008348:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800834c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	440a      	add	r2, r1
 8008364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008368:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800836c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d128      	bne.n	80083ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d003      	beq.n	80083c8 <USB_EPClearStall+0x4c>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d138      	bne.n	800843a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e027      	b.n	800843a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008404:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008408:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d003      	beq.n	800841a <USB_EPClearStall+0x9e>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d10f      	bne.n	800843a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008438:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008466:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800846a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800847c:	68f9      	ldr	r1, [r7, #12]
 800847e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008482:	4313      	orrs	r3, r2
 8008484:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084c2:	f023 0302 	bic.w	r3, r3, #2
 80084c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4013      	ands	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008530:	68fb      	ldr	r3, [r7, #12]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	4013      	ands	r3, r2
 8008560:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	0c1b      	lsrs	r3, r3, #16
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4013      	ands	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	b29b      	uxth	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	4013      	ands	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085d4:	68bb      	ldr	r3, [r7, #8]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b087      	sub	sp, #28
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008604:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	b2db      	uxtb	r3, r3
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4013      	ands	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008630:	68bb      	ldr	r3, [r7, #8]
}
 8008632:	4618      	mov	r0, r3
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0301 	and.w	r3, r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008676:	4619      	mov	r1, r3
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <USB_ActivateSetup+0x44>)
 800867a:	4013      	ands	r3, r2
 800867c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800868c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	fffff800 	.word	0xfffff800

080086a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	460b      	mov	r3, r1
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	333c      	adds	r3, #60	@ 0x3c
 80086ba:	3304      	adds	r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	4a26      	ldr	r2, [pc, #152]	@ (800875c <USB_EP0_OutStart+0xb8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d90a      	bls.n	80086de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d8:	d101      	bne.n	80086de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	e037      	b.n	800874e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e4:	461a      	mov	r2, r3
 80086e6:	2300      	movs	r3, #0
 80086e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870c:	f043 0318 	orr.w	r3, r3, #24
 8008710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008720:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008724:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d10f      	bne.n	800874c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008746:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800874a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	4f54300a 	.word	0x4f54300a

08008760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008778:	d901      	bls.n	800877e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e01b      	b.n	80087b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	daf2      	bge.n	800876c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f043 0201 	orr.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087a2:	d901      	bls.n	80087a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e006      	b.n	80087b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d0f0      	beq.n	8008796 <USB_CoreReset+0x36>

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
	...

080087c4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80087d0:	2010      	movs	r0, #16
 80087d2:	f002 f9a9 	bl	800ab28 <USBD_static_malloc>
 80087d6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	32b0      	adds	r2, #176	@ 0xb0
 80087e8:	2100      	movs	r1, #0
 80087ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087ee:	2302      	movs	r3, #2
 80087f0:	e048      	b.n	8008884 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	32b0      	adds	r2, #176	@ 0xb0
 80087fc:	68f9      	ldr	r1, [r7, #12]
 80087fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	32b0      	adds	r2, #176	@ 0xb0
 800880c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	7c1b      	ldrb	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10d      	bne.n	800883a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800881e:	4b1b      	ldr	r3, [pc, #108]	@ (800888c <USBD_HID_Init+0xc8>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 020f 	and.w	r2, r3, #15
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	3326      	adds	r3, #38	@ 0x26
 8008834:	2207      	movs	r2, #7
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	e00c      	b.n	8008854 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800883a:	4b14      	ldr	r3, [pc, #80]	@ (800888c <USBD_HID_Init+0xc8>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	f003 020f 	and.w	r2, r3, #15
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	3326      	adds	r3, #38	@ 0x26
 8008850:	220a      	movs	r2, #10
 8008852:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008854:	4b0d      	ldr	r3, [pc, #52]	@ (800888c <USBD_HID_Init+0xc8>)
 8008856:	7819      	ldrb	r1, [r3, #0]
 8008858:	2304      	movs	r3, #4
 800885a:	2203      	movs	r2, #3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f002 f852 	bl	800a906 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008862:	4b0a      	ldr	r3, [pc, #40]	@ (800888c <USBD_HID_Init+0xc8>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	f003 020f 	and.w	r2, r3, #15
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	3324      	adds	r3, #36	@ 0x24
 8008878:	2201      	movs	r2, #1
 800887a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	240000c3 	.word	0x240000c3

08008890 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800889c:	4b1f      	ldr	r3, [pc, #124]	@ (800891c <USBD_HID_DeInit+0x8c>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f002 f855 	bl	800a952 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80088a8:	4b1c      	ldr	r3, [pc, #112]	@ (800891c <USBD_HID_DeInit+0x8c>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 020f 	and.w	r2, r3, #15
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	3324      	adds	r3, #36	@ 0x24
 80088be:	2200      	movs	r2, #0
 80088c0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80088c2:	4b16      	ldr	r3, [pc, #88]	@ (800891c <USBD_HID_DeInit+0x8c>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f003 020f 	and.w	r2, r3, #15
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	3326      	adds	r3, #38	@ 0x26
 80088d8:	2200      	movs	r2, #0
 80088da:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	32b0      	adds	r2, #176	@ 0xb0
 80088e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d011      	beq.n	8008912 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	32b0      	adds	r2, #176	@ 0xb0
 80088f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f002 f921 	bl	800ab44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	32b0      	adds	r2, #176	@ 0xb0
 800890c:	2100      	movs	r1, #0
 800890e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	240000c3 	.word	0x240000c3

08008920 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	32b0      	adds	r2, #176	@ 0xb0
 8008934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008938:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008948:	2303      	movs	r3, #3
 800894a:	e0e8      	b.n	8008b1e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008954:	2b00      	cmp	r3, #0
 8008956:	d046      	beq.n	80089e6 <USBD_HID_Setup+0xc6>
 8008958:	2b20      	cmp	r3, #32
 800895a:	f040 80d8 	bne.w	8008b0e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	3b02      	subs	r3, #2
 8008964:	2b09      	cmp	r3, #9
 8008966:	d836      	bhi.n	80089d6 <USBD_HID_Setup+0xb6>
 8008968:	a201      	add	r2, pc, #4	@ (adr r2, 8008970 <USBD_HID_Setup+0x50>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	080089c7 	.word	0x080089c7
 8008974:	080089a7 	.word	0x080089a7
 8008978:	080089d7 	.word	0x080089d7
 800897c:	080089d7 	.word	0x080089d7
 8008980:	080089d7 	.word	0x080089d7
 8008984:	080089d7 	.word	0x080089d7
 8008988:	080089d7 	.word	0x080089d7
 800898c:	080089d7 	.word	0x080089d7
 8008990:	080089b5 	.word	0x080089b5
 8008994:	08008999 	.word	0x08008999
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	885b      	ldrh	r3, [r3, #2]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	601a      	str	r2, [r3, #0]
          break;
 80089a4:	e01e      	b.n	80089e4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fbdf 	bl	800a170 <USBD_CtlSendData>
          break;
 80089b2:	e017      	b.n	80089e4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	885b      	ldrh	r3, [r3, #2]
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	605a      	str	r2, [r3, #4]
          break;
 80089c4:	e00e      	b.n	80089e4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	2201      	movs	r2, #1
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fbce 	bl	800a170 <USBD_CtlSendData>
          break;
 80089d4:	e006      	b.n	80089e4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fb4c 	bl	800a076 <USBD_CtlError>
          ret = USBD_FAIL;
 80089de:	2303      	movs	r3, #3
 80089e0:	75fb      	strb	r3, [r7, #23]
          break;
 80089e2:	bf00      	nop
      }
      break;
 80089e4:	e09a      	b.n	8008b1c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	2b0b      	cmp	r3, #11
 80089ec:	f200 8086 	bhi.w	8008afc <USBD_HID_Setup+0x1dc>
 80089f0:	a201      	add	r2, pc, #4	@ (adr r2, 80089f8 <USBD_HID_Setup+0xd8>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a29 	.word	0x08008a29
 80089fc:	08008b0b 	.word	0x08008b0b
 8008a00:	08008afd 	.word	0x08008afd
 8008a04:	08008afd 	.word	0x08008afd
 8008a08:	08008afd 	.word	0x08008afd
 8008a0c:	08008afd 	.word	0x08008afd
 8008a10:	08008a53 	.word	0x08008a53
 8008a14:	08008afd 	.word	0x08008afd
 8008a18:	08008afd 	.word	0x08008afd
 8008a1c:	08008afd 	.word	0x08008afd
 8008a20:	08008aab 	.word	0x08008aab
 8008a24:	08008ad5 	.word	0x08008ad5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d107      	bne.n	8008a44 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a34:	f107 030a 	add.w	r3, r7, #10
 8008a38:	2202      	movs	r2, #2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 fb97 	bl	800a170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a42:	e063      	b.n	8008b0c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fb15 	bl	800a076 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8008a50:	e05c      	b.n	8008b0c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	885b      	ldrh	r3, [r3, #2]
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b22      	cmp	r3, #34	@ 0x22
 8008a5c:	d108      	bne.n	8008a70 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a64:	bf28      	it	cs
 8008a66:	233f      	movcs	r3, #63	@ 0x3f
 8008a68:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b28 <USBD_HID_Setup+0x208>)
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	e015      	b.n	8008a9c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	885b      	ldrh	r3, [r3, #2]
 8008a74:	0a1b      	lsrs	r3, r3, #8
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	2b21      	cmp	r3, #33	@ 0x21
 8008a7a:	d108      	bne.n	8008a8e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008b2c <USBD_HID_Setup+0x20c>)
 8008a7e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	bf28      	it	cs
 8008a88:	2309      	movcs	r3, #9
 8008a8a:	82bb      	strh	r3, [r7, #20]
 8008a8c:	e006      	b.n	8008a9c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 faf0 	bl	800a076 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a96:	2303      	movs	r3, #3
 8008a98:	75fb      	strb	r3, [r7, #23]
            break;
 8008a9a:	e037      	b.n	8008b0c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a9c:	8abb      	ldrh	r3, [r7, #20]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6939      	ldr	r1, [r7, #16]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 fb64 	bl	800a170 <USBD_CtlSendData>
          break;
 8008aa8:	e030      	b.n	8008b0c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d107      	bne.n	8008ac6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	2201      	movs	r2, #1
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fb56 	bl	800a170 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ac4:	e022      	b.n	8008b0c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f001 fad4 	bl	800a076 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	75fb      	strb	r3, [r7, #23]
          break;
 8008ad2:	e01b      	b.n	8008b0c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d106      	bne.n	8008aee <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	885b      	ldrh	r3, [r3, #2]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aec:	e00e      	b.n	8008b0c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 fac0 	bl	800a076 <USBD_CtlError>
            ret = USBD_FAIL;
 8008af6:	2303      	movs	r3, #3
 8008af8:	75fb      	strb	r3, [r7, #23]
          break;
 8008afa:	e007      	b.n	8008b0c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fab9 	bl	800a076 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b04:	2303      	movs	r3, #3
 8008b06:	75fb      	strb	r3, [r7, #23]
          break;
 8008b08:	e000      	b.n	8008b0c <USBD_HID_Setup+0x1ec>
          break;
 8008b0a:	bf00      	nop
      }
      break;
 8008b0c:	e006      	b.n	8008b1c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 fab0 	bl	800a076 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1a:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	24000084 	.word	0x24000084
 8008b2c:	2400006c 	.word	0x2400006c

08008b30 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008b38:	2181      	movs	r1, #129	@ 0x81
 8008b3a:	4809      	ldr	r0, [pc, #36]	@ (8008b60 <USBD_HID_GetFSCfgDesc+0x30>)
 8008b3c:	f000 fc3b 	bl	80093b6 <USBD_GetEpDesc>
 8008b40:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	220a      	movs	r2, #10
 8008b4c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2222      	movs	r2, #34	@ 0x22
 8008b52:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008b54:	4b02      	ldr	r3, [pc, #8]	@ (8008b60 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	24000048 	.word	0x24000048

08008b64 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008b6c:	2181      	movs	r1, #129	@ 0x81
 8008b6e:	4809      	ldr	r0, [pc, #36]	@ (8008b94 <USBD_HID_GetHSCfgDesc+0x30>)
 8008b70:	f000 fc21 	bl	80093b6 <USBD_GetEpDesc>
 8008b74:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2207      	movs	r2, #7
 8008b80:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2222      	movs	r2, #34	@ 0x22
 8008b86:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008b88:	4b02      	ldr	r3, [pc, #8]	@ (8008b94 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	24000048 	.word	0x24000048

08008b98 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008ba0:	2181      	movs	r1, #129	@ 0x81
 8008ba2:	4809      	ldr	r0, [pc, #36]	@ (8008bc8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008ba4:	f000 fc07 	bl	80093b6 <USBD_GetEpDesc>
 8008ba8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2222      	movs	r2, #34	@ 0x22
 8008bba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008bbc:	4b02      	ldr	r3, [pc, #8]	@ (8008bc8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	24000048 	.word	0x24000048

08008bcc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	32b0      	adds	r2, #176	@ 0xb0
 8008be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be6:	2200      	movs	r2, #0
 8008be8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	220a      	movs	r2, #10
 8008c04:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008c06:	4b03      	ldr	r3, [pc, #12]	@ (8008c14 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	24000078 	.word	0x24000078

08008c18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e01f      	b.n	8008c70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	79fa      	ldrb	r2, [r7, #7]
 8008c62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f001 fde1 	bl	800a82c <USBD_LL_Init>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e025      	b.n	8008cdc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	32ae      	adds	r2, #174	@ 0xae
 8008ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00f      	beq.n	8008ccc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32ae      	adds	r2, #174	@ 0xae
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	f107 020e 	add.w	r2, r7, #14
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fdef 	bl	800a8d0 <USBD_LL_Start>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 f936 	bl	800a002 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d01a      	beq.n	8008df0 <USBD_LL_SetupStage+0x72>
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d822      	bhi.n	8008e04 <USBD_LL_SetupStage+0x86>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <USBD_LL_SetupStage+0x4a>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d00a      	beq.n	8008ddc <USBD_LL_SetupStage+0x5e>
 8008dc6:	e01d      	b.n	8008e04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fb63 	bl	800949c <USBD_StdDevReq>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dda:	e020      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fbcb 	bl	8009580 <USBD_StdItfReq>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]
      break;
 8008dee:	e016      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc2d 	bl	8009658 <USBD_StdEPReq>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
      break;
 8008e02:	e00c      	b.n	8008e1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fdbc 	bl	800a990 <USBD_LL_StallEP>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1c:	bf00      	nop
  }

  return ret;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	460b      	mov	r3, r1
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d16e      	bne.n	8008f1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	f040 8098 	bne.w	8008f84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d913      	bls.n	8008e88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	1ad2      	subs	r2, r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bf28      	it	cs
 8008e7a:	4613      	movcs	r3, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f001 f9a1 	bl	800a1c8 <USBD_CtlContinueRx>
 8008e86:	e07d      	b.n	8008f84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e8e:	f003 031f 	and.w	r3, r3, #31
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d014      	beq.n	8008ec0 <USBD_LL_DataOutStage+0x98>
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d81d      	bhi.n	8008ed6 <USBD_LL_DataOutStage+0xae>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x7c>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d003      	beq.n	8008eaa <USBD_LL_DataOutStage+0x82>
 8008ea2:	e018      	b.n	8008ed6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea8:	e018      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fa64 	bl	8009382 <USBD_CoreFindIF>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ebe:	e00d      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	4619      	mov	r1, r3
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fa66 	bl	800939c <USBD_CoreFindEP>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ed4:	e002      	b.n	8008edc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d119      	bne.n	8008f16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d113      	bne.n	8008f16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eee:	7dba      	ldrb	r2, [r7, #22]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	32ae      	adds	r2, #174	@ 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008efe:	7dba      	ldrb	r2, [r7, #22]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f06:	7dba      	ldrb	r2, [r7, #22]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	32ae      	adds	r2, #174	@ 0xae
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 f967 	bl	800a1ea <USBD_CtlSendStatus>
 8008f1c:	e032      	b.n	8008f84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	4619      	mov	r1, r3
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fa37 	bl	800939c <USBD_CoreFindEP>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f32:	7dbb      	ldrb	r3, [r7, #22]
 8008f34:	2bff      	cmp	r3, #255	@ 0xff
 8008f36:	d025      	beq.n	8008f84 <USBD_LL_DataOutStage+0x15c>
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d122      	bne.n	8008f84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d117      	bne.n	8008f7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f4a:	7dba      	ldrb	r2, [r7, #22]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	32ae      	adds	r2, #174	@ 0xae
 8008f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00f      	beq.n	8008f7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f5a:	7dba      	ldrb	r2, [r7, #22]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f62:	7dba      	ldrb	r2, [r7, #22]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	32ae      	adds	r2, #174	@ 0xae
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	7afa      	ldrb	r2, [r7, #11]
 8008f70:	4611      	mov	r1, r2
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	e000      	b.n	8008f86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	460b      	mov	r3, r1
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f9c:	7afb      	ldrb	r3, [r7, #11]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d16f      	bne.n	8009082 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d15a      	bne.n	8009068 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d914      	bls.n	8008fe8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6879      	ldr	r1, [r7, #4]
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f001 f8e6 	bl	800a1a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fd7f 	bl	800aae4 <USBD_LL_PrepareReceive>
 8008fe6:	e03f      	b.n	8009068 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d11c      	bne.n	800902e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d316      	bcc.n	800902e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800900a:	429a      	cmp	r2, r3
 800900c:	d20f      	bcs.n	800902e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f001 f8c7 	bl	800a1a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f001 fd5c 	bl	800aae4 <USBD_LL_PrepareReceive>
 800902c:	e01c      	b.n	8009068 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d10f      	bne.n	800905a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d009      	beq.n	800905a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800905a:	2180      	movs	r1, #128	@ 0x80
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f001 fc97 	bl	800a990 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f001 f8d4 	bl	800a210 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d03a      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fe42 	bl	8008cfc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009080:	e032      	b.n	80090e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f985 	bl	800939c <USBD_CoreFindEP>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2bff      	cmp	r3, #255	@ 0xff
 800909a:	d025      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d122      	bne.n	80090e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d11c      	bne.n	80090e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090ae:	7dfa      	ldrb	r2, [r7, #23]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	32ae      	adds	r2, #174	@ 0xae
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d014      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090be:	7dfa      	ldrb	r2, [r7, #23]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090c6:	7dfa      	ldrb	r2, [r7, #23]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	32ae      	adds	r2, #174	@ 0xae
 80090cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	7afa      	ldrb	r2, [r7, #11]
 80090d4:	4611      	mov	r1, r2
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	4798      	blx	r3
 80090da:	4603      	mov	r3, r0
 80090dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090de:	7dbb      	ldrb	r3, [r7, #22]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090e4:	7dbb      	ldrb	r3, [r7, #22]
 80090e6:	e000      	b.n	80090ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00e      	beq.n	8009158 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6852      	ldr	r2, [r2, #4]
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	4611      	mov	r1, r2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fbd1 	bl	800a906 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2240      	movs	r2, #64	@ 0x40
 8009170:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009174:	2340      	movs	r3, #64	@ 0x40
 8009176:	2200      	movs	r2, #0
 8009178:	2180      	movs	r1, #128	@ 0x80
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fbc3 	bl	800a906 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2240      	movs	r2, #64	@ 0x40
 800918a:	621a      	str	r2, [r3, #32]

  return ret;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d006      	beq.n	80091d8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2204      	movs	r2, #4
 80091dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d106      	bne.n	8009210 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009208:	b2da      	uxtb	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b03      	cmp	r3, #3
 8009230:	d110      	bne.n	8009254 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	32ae      	adds	r2, #174	@ 0xae
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e01c      	b.n	80092ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b03      	cmp	r3, #3
 800928a:	d115      	bne.n	80092b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	32ae      	adds	r2, #174	@ 0xae
 8009296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	32ae      	adds	r2, #174	@ 0xae
 80092aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	4611      	mov	r1, r2
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	460b      	mov	r3, r1
 80092cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	32ae      	adds	r2, #174	@ 0xae
 80092d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e01c      	b.n	800931e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d115      	bne.n	800931c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	32ae      	adds	r2, #174	@ 0xae
 80092fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	32ae      	adds	r2, #174	@ 0xae
 800930e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00e      	beq.n	8009378 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6852      	ldr	r2, [r2, #4]
 8009366:	b2d2      	uxtb	r2, r2
 8009368:	4611      	mov	r1, r2
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800938e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	885b      	ldrh	r3, [r3, #2]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	4293      	cmp	r3, r2
 80093da:	d91f      	bls.n	800941c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093e2:	e013      	b.n	800940c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093e4:	f107 030a 	add.w	r3, r7, #10
 80093e8:	4619      	mov	r1, r3
 80093ea:	6978      	ldr	r0, [r7, #20]
 80093ec:	f000 f81b 	bl	8009426 <USBD_GetNextDesc>
 80093f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	2b05      	cmp	r3, #5
 80093f8:	d108      	bne.n	800940c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	789b      	ldrb	r3, [r3, #2]
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	429a      	cmp	r2, r3
 8009406:	d008      	beq.n	800941a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	885b      	ldrh	r3, [r3, #2]
 8009410:	b29a      	uxth	r2, r3
 8009412:	897b      	ldrh	r3, [r7, #10]
 8009414:	429a      	cmp	r2, r3
 8009416:	d8e5      	bhi.n	80093e4 <USBD_GetEpDesc+0x2e>
 8009418:	e000      	b.n	800941c <USBD_GetEpDesc+0x66>
          break;
 800941a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800941c:	693b      	ldr	r3, [r7, #16]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	7812      	ldrb	r2, [r2, #0]
 800943c:	4413      	add	r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009450:	68fb      	ldr	r3, [r7, #12]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800945e:	b480      	push	{r7}
 8009460:	b087      	sub	sp, #28
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	3301      	adds	r3, #1
 8009474:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800947c:	8a3b      	ldrh	r3, [r7, #16]
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	b21a      	sxth	r2, r3
 8009482:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009486:	4313      	orrs	r3, r2
 8009488:	b21b      	sxth	r3, r3
 800948a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800948c:	89fb      	ldrh	r3, [r7, #14]
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094b2:	2b40      	cmp	r3, #64	@ 0x40
 80094b4:	d005      	beq.n	80094c2 <USBD_StdDevReq+0x26>
 80094b6:	2b40      	cmp	r3, #64	@ 0x40
 80094b8:	d857      	bhi.n	800956a <USBD_StdDevReq+0xce>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00f      	beq.n	80094de <USBD_StdDevReq+0x42>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d153      	bne.n	800956a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	32ae      	adds	r2, #174	@ 0xae
 80094cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	4798      	blx	r3
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]
      break;
 80094dc:	e04a      	b.n	8009574 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	2b09      	cmp	r3, #9
 80094e4:	d83b      	bhi.n	800955e <USBD_StdDevReq+0xc2>
 80094e6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <USBD_StdDevReq+0x50>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009541 	.word	0x08009541
 80094f0:	08009555 	.word	0x08009555
 80094f4:	0800955f 	.word	0x0800955f
 80094f8:	0800954b 	.word	0x0800954b
 80094fc:	0800955f 	.word	0x0800955f
 8009500:	0800951f 	.word	0x0800951f
 8009504:	08009515 	.word	0x08009515
 8009508:	0800955f 	.word	0x0800955f
 800950c:	08009537 	.word	0x08009537
 8009510:	08009529 	.word	0x08009529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa3c 	bl	8009994 <USBD_GetDescriptor>
          break;
 800951c:	e024      	b.n	8009568 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fbcb 	bl	8009cbc <USBD_SetAddress>
          break;
 8009526:	e01f      	b.n	8009568 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fc0a 	bl	8009d44 <USBD_SetConfig>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
          break;
 8009534:	e018      	b.n	8009568 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fcad 	bl	8009e98 <USBD_GetConfig>
          break;
 800953e:	e013      	b.n	8009568 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fcde 	bl	8009f04 <USBD_GetStatus>
          break;
 8009548:	e00e      	b.n	8009568 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fd0d 	bl	8009f6c <USBD_SetFeature>
          break;
 8009552:	e009      	b.n	8009568 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fd31 	bl	8009fbe <USBD_ClrFeature>
          break;
 800955c:	e004      	b.n	8009568 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fd88 	bl	800a076 <USBD_CtlError>
          break;
 8009566:	bf00      	nop
      }
      break;
 8009568:	e004      	b.n	8009574 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fd82 	bl	800a076 <USBD_CtlError>
      break;
 8009572:	bf00      	nop
  }

  return ret;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop

08009580 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009596:	2b40      	cmp	r3, #64	@ 0x40
 8009598:	d005      	beq.n	80095a6 <USBD_StdItfReq+0x26>
 800959a:	2b40      	cmp	r3, #64	@ 0x40
 800959c:	d852      	bhi.n	8009644 <USBD_StdItfReq+0xc4>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <USBD_StdItfReq+0x26>
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d14e      	bne.n	8009644 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d840      	bhi.n	8009636 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	889b      	ldrh	r3, [r3, #4]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d836      	bhi.n	800962c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	889b      	ldrh	r3, [r3, #4]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fedb 	bl	8009382 <USBD_CoreFindIF>
 80095cc:	4603      	mov	r3, r0
 80095ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2bff      	cmp	r3, #255	@ 0xff
 80095d4:	d01d      	beq.n	8009612 <USBD_StdItfReq+0x92>
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11a      	bne.n	8009612 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095dc:	7bba      	ldrb	r2, [r7, #14]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	32ae      	adds	r2, #174	@ 0xae
 80095e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00f      	beq.n	800960c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095ec:	7bba      	ldrb	r2, [r7, #14]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095f4:	7bba      	ldrb	r2, [r7, #14]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32ae      	adds	r2, #174	@ 0xae
 80095fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800960a:	e004      	b.n	8009616 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009610:	e001      	b.n	8009616 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009612:	2303      	movs	r3, #3
 8009614:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	88db      	ldrh	r3, [r3, #6]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d110      	bne.n	8009640 <USBD_StdItfReq+0xc0>
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10d      	bne.n	8009640 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fde0 	bl	800a1ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800962a:	e009      	b.n	8009640 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fd21 	bl	800a076 <USBD_CtlError>
          break;
 8009634:	e004      	b.n	8009640 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fd1c 	bl	800a076 <USBD_CtlError>
          break;
 800963e:	e000      	b.n	8009642 <USBD_StdItfReq+0xc2>
          break;
 8009640:	bf00      	nop
      }
      break;
 8009642:	e004      	b.n	800964e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fd15 	bl	800a076 <USBD_CtlError>
      break;
 800964c:	bf00      	nop
  }

  return ret;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	889b      	ldrh	r3, [r3, #4]
 800966a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009674:	2b40      	cmp	r3, #64	@ 0x40
 8009676:	d007      	beq.n	8009688 <USBD_StdEPReq+0x30>
 8009678:	2b40      	cmp	r3, #64	@ 0x40
 800967a:	f200 817f 	bhi.w	800997c <USBD_StdEPReq+0x324>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d02a      	beq.n	80096d8 <USBD_StdEPReq+0x80>
 8009682:	2b20      	cmp	r3, #32
 8009684:	f040 817a 	bne.w	800997c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fe85 	bl	800939c <USBD_CoreFindEP>
 8009692:	4603      	mov	r3, r0
 8009694:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009696:	7b7b      	ldrb	r3, [r7, #13]
 8009698:	2bff      	cmp	r3, #255	@ 0xff
 800969a:	f000 8174 	beq.w	8009986 <USBD_StdEPReq+0x32e>
 800969e:	7b7b      	ldrb	r3, [r7, #13]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f040 8170 	bne.w	8009986 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096a6:	7b7a      	ldrb	r2, [r7, #13]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096ae:	7b7a      	ldrb	r2, [r7, #13]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	32ae      	adds	r2, #174	@ 0xae
 80096b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 8163 	beq.w	8009986 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096c0:	7b7a      	ldrb	r2, [r7, #13]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	32ae      	adds	r2, #174	@ 0xae
 80096c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
 80096d2:	4603      	mov	r3, r0
 80096d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096d6:	e156      	b.n	8009986 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d008      	beq.n	80096f2 <USBD_StdEPReq+0x9a>
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	f300 8145 	bgt.w	8009970 <USBD_StdEPReq+0x318>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 809b 	beq.w	8009822 <USBD_StdEPReq+0x1ca>
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d03c      	beq.n	800976a <USBD_StdEPReq+0x112>
 80096f0:	e13e      	b.n	8009970 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d002      	beq.n	8009704 <USBD_StdEPReq+0xac>
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d016      	beq.n	8009730 <USBD_StdEPReq+0xd8>
 8009702:	e02c      	b.n	800975e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00d      	beq.n	8009726 <USBD_StdEPReq+0xce>
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b80      	cmp	r3, #128	@ 0x80
 800970e:	d00a      	beq.n	8009726 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f93b 	bl	800a990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800971a:	2180      	movs	r1, #128	@ 0x80
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 f937 	bl	800a990 <USBD_LL_StallEP>
 8009722:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009724:	e020      	b.n	8009768 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fca4 	bl	800a076 <USBD_CtlError>
              break;
 800972e:	e01b      	b.n	8009768 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	885b      	ldrh	r3, [r3, #2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10e      	bne.n	8009756 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <USBD_StdEPReq+0xfe>
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b80      	cmp	r3, #128	@ 0x80
 8009742:	d008      	beq.n	8009756 <USBD_StdEPReq+0xfe>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	88db      	ldrh	r3, [r3, #6]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 f91d 	bl	800a990 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fd47 	bl	800a1ea <USBD_CtlSendStatus>

              break;
 800975c:	e004      	b.n	8009768 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fc88 	bl	800a076 <USBD_CtlError>
              break;
 8009766:	bf00      	nop
          }
          break;
 8009768:	e107      	b.n	800997a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d002      	beq.n	800977c <USBD_StdEPReq+0x124>
 8009776:	2b03      	cmp	r3, #3
 8009778:	d016      	beq.n	80097a8 <USBD_StdEPReq+0x150>
 800977a:	e04b      	b.n	8009814 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00d      	beq.n	800979e <USBD_StdEPReq+0x146>
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	2b80      	cmp	r3, #128	@ 0x80
 8009786:	d00a      	beq.n	800979e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f8ff 	bl	800a990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009792:	2180      	movs	r1, #128	@ 0x80
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 f8fb 	bl	800a990 <USBD_LL_StallEP>
 800979a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800979c:	e040      	b.n	8009820 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fc68 	bl	800a076 <USBD_CtlError>
              break;
 80097a6:	e03b      	b.n	8009820 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	885b      	ldrh	r3, [r3, #2]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d136      	bne.n	800981e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d004      	beq.n	80097c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097ba:	7bbb      	ldrb	r3, [r7, #14]
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f001 f905 	bl	800a9ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fd10 	bl	800a1ea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff fde4 	bl	800939c <USBD_CoreFindEP>
 80097d4:	4603      	mov	r3, r0
 80097d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097d8:	7b7b      	ldrb	r3, [r7, #13]
 80097da:	2bff      	cmp	r3, #255	@ 0xff
 80097dc:	d01f      	beq.n	800981e <USBD_StdEPReq+0x1c6>
 80097de:	7b7b      	ldrb	r3, [r7, #13]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11c      	bne.n	800981e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097e4:	7b7a      	ldrb	r2, [r7, #13]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097ec:	7b7a      	ldrb	r2, [r7, #13]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	32ae      	adds	r2, #174	@ 0xae
 80097f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d010      	beq.n	800981e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097fc:	7b7a      	ldrb	r2, [r7, #13]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	32ae      	adds	r2, #174	@ 0xae
 8009802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009812:	e004      	b.n	800981e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fc2d 	bl	800a076 <USBD_CtlError>
              break;
 800981c:	e000      	b.n	8009820 <USBD_StdEPReq+0x1c8>
              break;
 800981e:	bf00      	nop
          }
          break;
 8009820:	e0ab      	b.n	800997a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b02      	cmp	r3, #2
 800982c:	d002      	beq.n	8009834 <USBD_StdEPReq+0x1dc>
 800982e:	2b03      	cmp	r3, #3
 8009830:	d032      	beq.n	8009898 <USBD_StdEPReq+0x240>
 8009832:	e097      	b.n	8009964 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d007      	beq.n	800984a <USBD_StdEPReq+0x1f2>
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	2b80      	cmp	r3, #128	@ 0x80
 800983e:	d004      	beq.n	800984a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fc17 	bl	800a076 <USBD_CtlError>
                break;
 8009848:	e091      	b.n	800996e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800984a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800984e:	2b00      	cmp	r3, #0
 8009850:	da0b      	bge.n	800986a <USBD_StdEPReq+0x212>
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	3310      	adds	r3, #16
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	4413      	add	r3, r2
 8009866:	3304      	adds	r3, #4
 8009868:	e00b      	b.n	8009882 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800986a:	7bbb      	ldrb	r3, [r7, #14]
 800986c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4413      	add	r3, r2
 8009880:	3304      	adds	r3, #4
 8009882:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2202      	movs	r2, #2
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc6d 	bl	800a170 <USBD_CtlSendData>
              break;
 8009896:	e06a      	b.n	800996e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800989c:	2b00      	cmp	r3, #0
 800989e:	da11      	bge.n	80098c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	f003 020f 	and.w	r2, r3, #15
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	3324      	adds	r3, #36	@ 0x24
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d117      	bne.n	80098ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fbda 	bl	800a076 <USBD_CtlError>
                  break;
 80098c2:	e054      	b.n	800996e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	f003 020f 	and.w	r2, r3, #15
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	440b      	add	r3, r1
 80098d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d104      	bne.n	80098ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fbc7 	bl	800a076 <USBD_CtlError>
                  break;
 80098e8:	e041      	b.n	800996e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da0b      	bge.n	800990a <USBD_StdEPReq+0x2b2>
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	3310      	adds	r3, #16
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4413      	add	r3, r2
 8009906:	3304      	adds	r3, #4
 8009908:	e00b      	b.n	8009922 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	4413      	add	r3, r2
 8009920:	3304      	adds	r3, #4
 8009922:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <USBD_StdEPReq+0x2d8>
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b80      	cmp	r3, #128	@ 0x80
 800992e:	d103      	bne.n	8009938 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e00e      	b.n	8009956 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f865 	bl	800aa0c <USBD_LL_IsStallEP>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e002      	b.n	8009956 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2202      	movs	r2, #2
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fc07 	bl	800a170 <USBD_CtlSendData>
              break;
 8009962:	e004      	b.n	800996e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb85 	bl	800a076 <USBD_CtlError>
              break;
 800996c:	bf00      	nop
          }
          break;
 800996e:	e004      	b.n	800997a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fb7f 	bl	800a076 <USBD_CtlError>
          break;
 8009978:	bf00      	nop
      }
      break;
 800997a:	e005      	b.n	8009988 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fb79 	bl	800a076 <USBD_CtlError>
      break;
 8009984:	e000      	b.n	8009988 <USBD_StdEPReq+0x330>
      break;
 8009986:	bf00      	nop
  }

  return ret;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	885b      	ldrh	r3, [r3, #2]
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	2b0e      	cmp	r3, #14
 80099b6:	f200 8152 	bhi.w	8009c5e <USBD_GetDescriptor+0x2ca>
 80099ba:	a201      	add	r2, pc, #4	@ (adr r2, 80099c0 <USBD_GetDescriptor+0x2c>)
 80099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c0:	08009a31 	.word	0x08009a31
 80099c4:	08009a49 	.word	0x08009a49
 80099c8:	08009a89 	.word	0x08009a89
 80099cc:	08009c5f 	.word	0x08009c5f
 80099d0:	08009c5f 	.word	0x08009c5f
 80099d4:	08009bff 	.word	0x08009bff
 80099d8:	08009c2b 	.word	0x08009c2b
 80099dc:	08009c5f 	.word	0x08009c5f
 80099e0:	08009c5f 	.word	0x08009c5f
 80099e4:	08009c5f 	.word	0x08009c5f
 80099e8:	08009c5f 	.word	0x08009c5f
 80099ec:	08009c5f 	.word	0x08009c5f
 80099f0:	08009c5f 	.word	0x08009c5f
 80099f4:	08009c5f 	.word	0x08009c5f
 80099f8:	080099fd 	.word	0x080099fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a1e:	e126      	b.n	8009c6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fb27 	bl	800a076 <USBD_CtlError>
        err++;
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a2e:	e11e      	b.n	8009c6e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
      break;
 8009a46:	e112      	b.n	8009c6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7c1b      	ldrb	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10d      	bne.n	8009a6c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a58:	f107 0208 	add.w	r2, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	2202      	movs	r2, #2
 8009a68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a6a:	e100      	b.n	8009c6e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a74:	f107 0208 	add.w	r2, r7, #8
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	2202      	movs	r2, #2
 8009a84:	701a      	strb	r2, [r3, #0]
      break;
 8009a86:	e0f2      	b.n	8009c6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	885b      	ldrh	r3, [r3, #2]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	f200 80ac 	bhi.w	8009bec <USBD_GetDescriptor+0x258>
 8009a94:	a201      	add	r2, pc, #4	@ (adr r2, 8009a9c <USBD_GetDescriptor+0x108>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009ae9 	.word	0x08009ae9
 8009aa4:	08009b1d 	.word	0x08009b1d
 8009aa8:	08009b51 	.word	0x08009b51
 8009aac:	08009b85 	.word	0x08009b85
 8009ab0:	08009bb9 	.word	0x08009bb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	7c12      	ldrb	r2, [r2, #16]
 8009acc:	f107 0108 	add.w	r1, r7, #8
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
 8009ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad6:	e091      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 facb 	bl	800a076 <USBD_CtlError>
            err++;
 8009ae0:	7afb      	ldrb	r3, [r7, #11]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae6:	e089      	b.n	8009bfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7c12      	ldrb	r2, [r2, #16]
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
 8009b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b0a:	e077      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fab1 	bl	800a076 <USBD_CtlError>
            err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
          break;
 8009b1a:	e06f      	b.n	8009bfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b3e:	e05d      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa97 	bl	800a076 <USBD_CtlError>
            err++;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4e:	e055      	b.n	8009bfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	7c12      	ldrb	r2, [r2, #16]
 8009b68:	f107 0108 	add.w	r1, r7, #8
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b72:	e043      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa7d 	bl	800a076 <USBD_CtlError>
            err++;
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	72fb      	strb	r3, [r7, #11]
          break;
 8009b82:	e03b      	b.n	8009bfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7c12      	ldrb	r2, [r2, #16]
 8009b9c:	f107 0108 	add.w	r1, r7, #8
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4798      	blx	r3
 8009ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ba6:	e029      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa63 	bl	800a076 <USBD_CtlError>
            err++;
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bb6:	e021      	b.n	8009bfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	7c12      	ldrb	r2, [r2, #16]
 8009bd0:	f107 0108 	add.w	r1, r7, #8
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bda:	e00f      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa49 	bl	800a076 <USBD_CtlError>
            err++;
 8009be4:	7afb      	ldrb	r3, [r7, #11]
 8009be6:	3301      	adds	r3, #1
 8009be8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bea:	e007      	b.n	8009bfc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa41 	bl	800a076 <USBD_CtlError>
          err++;
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009bfa:	bf00      	nop
      }
      break;
 8009bfc:	e037      	b.n	8009c6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7c1b      	ldrb	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0e:	f107 0208 	add.w	r2, r7, #8
 8009c12:	4610      	mov	r0, r2
 8009c14:	4798      	blx	r3
 8009c16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c18:	e029      	b.n	8009c6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fa2a 	bl	800a076 <USBD_CtlError>
        err++;
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	3301      	adds	r3, #1
 8009c26:	72fb      	strb	r3, [r7, #11]
      break;
 8009c28:	e021      	b.n	8009c6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	7c1b      	ldrb	r3, [r3, #16]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10d      	bne.n	8009c4e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3a:	f107 0208 	add.w	r2, r7, #8
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4798      	blx	r3
 8009c42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	2207      	movs	r2, #7
 8009c4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c4c:	e00f      	b.n	8009c6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fa10 	bl	800a076 <USBD_CtlError>
        err++;
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c5c:	e007      	b.n	8009c6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fa08 	bl	800a076 <USBD_CtlError>
      err++;
 8009c66:	7afb      	ldrb	r3, [r7, #11]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c6c:	bf00      	nop
  }

  if (err != 0U)
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11e      	bne.n	8009cb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	88db      	ldrh	r3, [r3, #6]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d016      	beq.n	8009caa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c7c:	893b      	ldrh	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00e      	beq.n	8009ca0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	88da      	ldrh	r2, [r3, #6]
 8009c86:	893b      	ldrh	r3, [r7, #8]
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	bf28      	it	cs
 8009c8c:	4613      	movcs	r3, r2
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c92:	893b      	ldrh	r3, [r7, #8]
 8009c94:	461a      	mov	r2, r3
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa69 	bl	800a170 <USBD_CtlSendData>
 8009c9e:	e009      	b.n	8009cb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9e7 	bl	800a076 <USBD_CtlError>
 8009ca8:	e004      	b.n	8009cb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa9d 	bl	800a1ea <USBD_CtlSendStatus>
 8009cb0:	e000      	b.n	8009cb4 <USBD_GetDescriptor+0x320>
    return;
 8009cb2:	bf00      	nop
  }
}
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop

08009cbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	889b      	ldrh	r3, [r3, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d131      	bne.n	8009d32 <USBD_SetAddress+0x76>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	88db      	ldrh	r3, [r3, #6]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d12d      	bne.n	8009d32 <USBD_SetAddress+0x76>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	885b      	ldrh	r3, [r3, #2]
 8009cda:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cdc:	d829      	bhi.n	8009d32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	885b      	ldrh	r3, [r3, #2]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d104      	bne.n	8009d00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f9bc 	bl	800a076 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfe:	e01d      	b.n	8009d3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7bfa      	ldrb	r2, [r7, #15]
 8009d04:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fea9 	bl	800aa64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa69 	bl	800a1ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2202      	movs	r2, #2
 8009d22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d26:	e009      	b.n	8009d3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d30:	e004      	b.n	8009d3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f99e 	bl	800a076 <USBD_CtlError>
  }
}
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	885b      	ldrh	r3, [r3, #2]
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	4b4e      	ldr	r3, [pc, #312]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009d5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d905      	bls.n	8009d70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f985 	bl	800a076 <USBD_CtlError>
    return USBD_FAIL;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e08c      	b.n	8009e8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d002      	beq.n	8009d82 <USBD_SetConfig+0x3e>
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d029      	beq.n	8009dd4 <USBD_SetConfig+0x90>
 8009d80:	e075      	b.n	8009e6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d82:	4b44      	ldr	r3, [pc, #272]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d020      	beq.n	8009dcc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d8a:	4b42      	ldr	r3, [pc, #264]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d94:	4b3f      	ldr	r3, [pc, #252]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fe ffb9 	bl	8008d12 <USBD_SetClassConfig>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f962 	bl	800a076 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2202      	movs	r2, #2
 8009db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dba:	e065      	b.n	8009e88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fa14 	bl	800a1ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009dca:	e05d      	b.n	8009e88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa0c 	bl	800a1ea <USBD_CtlSendStatus>
      break;
 8009dd2:	e059      	b.n	8009e88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d112      	bne.n	8009e02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009de4:	4b2b      	ldr	r3, [pc, #172]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dee:	4b29      	ldr	r3, [pc, #164]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7fe ffa8 	bl	8008d4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9f5 	bl	800a1ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e00:	e042      	b.n	8009e88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e02:	4b24      	ldr	r3, [pc, #144]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d02a      	beq.n	8009e66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7fe ff96 	bl	8008d4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e28:	4b1a      	ldr	r3, [pc, #104]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fe ff6f 	bl	8008d12 <USBD_SetClassConfig>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00f      	beq.n	8009e5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f918 	bl	800a076 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fe ff7b 	bl	8008d4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e5c:	e014      	b.n	8009e88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f9c3 	bl	800a1ea <USBD_CtlSendStatus>
      break;
 8009e64:	e010      	b.n	8009e88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9bf 	bl	800a1ea <USBD_CtlSendStatus>
      break;
 8009e6c:	e00c      	b.n	8009e88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f900 	bl	800a076 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e76:	4b07      	ldr	r3, [pc, #28]	@ (8009e94 <USBD_SetConfig+0x150>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7fe ff64 	bl	8008d4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e82:	2303      	movs	r3, #3
 8009e84:	73fb      	strb	r3, [r7, #15]
      break;
 8009e86:	bf00      	nop
  }

  return ret;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	24000248 	.word	0x24000248

08009e98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88db      	ldrh	r3, [r3, #6]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d004      	beq.n	8009eb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f8e2 	bl	800a076 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009eb2:	e023      	b.n	8009efc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	dc02      	bgt.n	8009ec6 <USBD_GetConfig+0x2e>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc03      	bgt.n	8009ecc <USBD_GetConfig+0x34>
 8009ec4:	e015      	b.n	8009ef2 <USBD_GetConfig+0x5a>
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d00b      	beq.n	8009ee2 <USBD_GetConfig+0x4a>
 8009eca:	e012      	b.n	8009ef2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f948 	bl	800a170 <USBD_CtlSendData>
        break;
 8009ee0:	e00c      	b.n	8009efc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f940 	bl	800a170 <USBD_CtlSendData>
        break;
 8009ef0:	e004      	b.n	8009efc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f8be 	bl	800a076 <USBD_CtlError>
        break;
 8009efa:	bf00      	nop
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	3b01      	subs	r3, #1
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d81e      	bhi.n	8009f5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	88db      	ldrh	r3, [r3, #6]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d004      	beq.n	8009f2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f8a5 	bl	800a076 <USBD_CtlError>
        break;
 8009f2c:	e01a      	b.n	8009f64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	f043 0202 	orr.w	r2, r3, #2
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	330c      	adds	r3, #12
 8009f4e:	2202      	movs	r2, #2
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f90c 	bl	800a170 <USBD_CtlSendData>
      break;
 8009f58:	e004      	b.n	8009f64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f88a 	bl	800a076 <USBD_CtlError>
      break;
 8009f62:	bf00      	nop
  }
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	885b      	ldrh	r3, [r3, #2]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d107      	bne.n	8009f8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f92f 	bl	800a1ea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f8c:	e013      	b.n	8009fb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	885b      	ldrh	r3, [r3, #2]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d10b      	bne.n	8009fae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	889b      	ldrh	r3, [r3, #4]
 8009f9a:	0a1b      	lsrs	r3, r3, #8
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f91f 	bl	800a1ea <USBD_CtlSendStatus>
}
 8009fac:	e003      	b.n	8009fb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f860 	bl	800a076 <USBD_CtlError>
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d80b      	bhi.n	8009fee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d10c      	bne.n	8009ff8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f8ff 	bl	800a1ea <USBD_CtlSendStatus>
      }
      break;
 8009fec:	e004      	b.n	8009ff8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f840 	bl	800a076 <USBD_CtlError>
      break;
 8009ff6:	e000      	b.n	8009ffa <USBD_ClrFeature+0x3c>
      break;
 8009ff8:	bf00      	nop
  }
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	781a      	ldrb	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff fa16 	bl	800945e <SWAPBYTE>
 800a032:	4603      	mov	r3, r0
 800a034:	461a      	mov	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3301      	adds	r3, #1
 800a03e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3301      	adds	r3, #1
 800a044:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff fa09 	bl	800945e <SWAPBYTE>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3301      	adds	r3, #1
 800a058:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff f9fc 	bl	800945e <SWAPBYTE>
 800a066:	4603      	mov	r3, r0
 800a068:	461a      	mov	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	80da      	strh	r2, [r3, #6]
}
 800a06e:	bf00      	nop
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a080:	2180      	movs	r1, #128	@ 0x80
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fc84 	bl	800a990 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a088:	2100      	movs	r1, #0
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fc80 	bl	800a990 <USBD_LL_StallEP>
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d042      	beq.n	800a134 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a0b2:	6938      	ldr	r0, [r7, #16]
 800a0b4:	f000 f842 	bl	800a13c <USBD_GetLen>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c2:	d808      	bhi.n	800a0d6 <USBD_GetString+0x3e>
 800a0c4:	6938      	ldr	r0, [r7, #16]
 800a0c6:	f000 f839 	bl	800a13c <USBD_GetLen>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	e001      	b.n	800a0da <USBD_GetString+0x42>
 800a0d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a100:	e013      	b.n	800a12a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	4413      	add	r3, r2
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	7812      	ldrb	r2, [r2, #0]
 800a10c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	3301      	adds	r3, #1
 800a112:	613b      	str	r3, [r7, #16]
    idx++;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	3301      	adds	r3, #1
 800a118:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	4413      	add	r3, r2
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
    idx++;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	3301      	adds	r3, #1
 800a128:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e7      	bne.n	800a102 <USBD_GetString+0x6a>
 800a132:	e000      	b.n	800a136 <USBD_GetString+0x9e>
    return;
 800a134:	bf00      	nop
  }
}
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a14c:	e005      	b.n	800a15a <USBD_GetLen+0x1e>
  {
    len++;
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	3301      	adds	r3, #1
 800a152:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	3301      	adds	r3, #1
 800a158:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1f5      	bne.n	800a14e <USBD_GetLen+0x12>
  }

  return len;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2202      	movs	r2, #2
 800a180:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	2100      	movs	r1, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fc83 	bl	800aaa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 fc72 	bl	800aaa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	2100      	movs	r1, #0
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 fc82 	bl	800aae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2204      	movs	r2, #4
 800a1f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2100      	movs	r1, #0
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fc4e 	bl	800aaa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2205      	movs	r2, #5
 800a21c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a220:	2300      	movs	r3, #0
 800a222:	2200      	movs	r2, #0
 800a224:	2100      	movs	r1, #0
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fc5c 	bl	800aae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a23c:	2201      	movs	r2, #1
 800a23e:	490f      	ldr	r1, [pc, #60]	@ (800a27c <MX_USB_DEVICE_Init+0x44>)
 800a240:	480f      	ldr	r0, [pc, #60]	@ (800a280 <MX_USB_DEVICE_Init+0x48>)
 800a242:	f7fe fce9 	bl	8008c18 <USBD_Init>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a24c:	f7f6 ff48 	bl	80010e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800a250:	490c      	ldr	r1, [pc, #48]	@ (800a284 <MX_USB_DEVICE_Init+0x4c>)
 800a252:	480b      	ldr	r0, [pc, #44]	@ (800a280 <MX_USB_DEVICE_Init+0x48>)
 800a254:	f7fe fd10 	bl	8008c78 <USBD_RegisterClass>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a25e:	f7f6 ff3f 	bl	80010e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a262:	4807      	ldr	r0, [pc, #28]	@ (800a280 <MX_USB_DEVICE_Init+0x48>)
 800a264:	f7fe fd3e 	bl	8008ce4 <USBD_Start>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a26e:	f7f6 ff37 	bl	80010e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a272:	f7f8 ffa9 	bl	80031c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a276:	bf00      	nop
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	240000c4 	.word	0x240000c4
 800a280:	2400024c 	.word	0x2400024c
 800a284:	24000010 	.word	0x24000010

0800a288 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	6039      	str	r1, [r7, #0]
 800a292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2212      	movs	r2, #18
 800a298:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a29a:	4b03      	ldr	r3, [pc, #12]	@ (800a2a8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	240000e4 	.word	0x240000e4

0800a2ac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2be:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	240000f8 	.word	0x240000f8

0800a2d0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4907      	ldr	r1, [pc, #28]	@ (800a304 <USBD_HS_ProductStrDescriptor+0x34>)
 800a2e6:	4808      	ldr	r0, [pc, #32]	@ (800a308 <USBD_HS_ProductStrDescriptor+0x38>)
 800a2e8:	f7ff fed6 	bl	800a098 <USBD_GetString>
 800a2ec:	e004      	b.n	800a2f8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4904      	ldr	r1, [pc, #16]	@ (800a304 <USBD_HS_ProductStrDescriptor+0x34>)
 800a2f2:	4805      	ldr	r0, [pc, #20]	@ (800a308 <USBD_HS_ProductStrDescriptor+0x38>)
 800a2f4:	f7ff fed0 	bl	800a098 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f8:	4b02      	ldr	r3, [pc, #8]	@ (800a304 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	24000528 	.word	0x24000528
 800a308:	0800b6dc 	.word	0x0800b6dc

0800a30c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	4904      	ldr	r1, [pc, #16]	@ (800a32c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a31c:	4804      	ldr	r0, [pc, #16]	@ (800a330 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a31e:	f7ff febb 	bl	800a098 <USBD_GetString>
  return USBD_StrDesc;
 800a322:	4b02      	ldr	r3, [pc, #8]	@ (800a32c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	24000528 	.word	0x24000528
 800a330:	0800b6f4 	.word	0x0800b6f4

0800a334 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	221a      	movs	r2, #26
 800a344:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a346:	f000 f843 	bl	800a3d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a34a:	4b02      	ldr	r3, [pc, #8]	@ (800a354 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	240000fc 	.word	0x240000fc

0800a358 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	6039      	str	r1, [r7, #0]
 800a362:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d105      	bne.n	800a376 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	4907      	ldr	r1, [pc, #28]	@ (800a38c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a36e:	4808      	ldr	r0, [pc, #32]	@ (800a390 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a370:	f7ff fe92 	bl	800a098 <USBD_GetString>
 800a374:	e004      	b.n	800a380 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	4904      	ldr	r1, [pc, #16]	@ (800a38c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a37a:	4805      	ldr	r0, [pc, #20]	@ (800a390 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a37c:	f7ff fe8c 	bl	800a098 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a380:	4b02      	ldr	r3, [pc, #8]	@ (800a38c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	24000528 	.word	0x24000528
 800a390:	0800b708 	.word	0x0800b708

0800a394 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d105      	bne.n	800a3b2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	4907      	ldr	r1, [pc, #28]	@ (800a3c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a3aa:	4808      	ldr	r0, [pc, #32]	@ (800a3cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a3ac:	f7ff fe74 	bl	800a098 <USBD_GetString>
 800a3b0:	e004      	b.n	800a3bc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	4904      	ldr	r1, [pc, #16]	@ (800a3c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a3b6:	4805      	ldr	r0, [pc, #20]	@ (800a3cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a3b8:	f7ff fe6e 	bl	800a098 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3bc:	4b02      	ldr	r3, [pc, #8]	@ (800a3c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	24000528 	.word	0x24000528
 800a3cc:	0800b714 	.word	0x0800b714

0800a3d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <Get_SerialNum+0x44>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a418 <Get_SerialNum+0x48>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a41c <Get_SerialNum+0x4c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3f6:	2208      	movs	r2, #8
 800a3f8:	4909      	ldr	r1, [pc, #36]	@ (800a420 <Get_SerialNum+0x50>)
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f814 	bl	800a428 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a400:	2204      	movs	r2, #4
 800a402:	4908      	ldr	r1, [pc, #32]	@ (800a424 <Get_SerialNum+0x54>)
 800a404:	68b8      	ldr	r0, [r7, #8]
 800a406:	f000 f80f 	bl	800a428 <IntToUnicode>
  }
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	1ff1e800 	.word	0x1ff1e800
 800a418:	1ff1e804 	.word	0x1ff1e804
 800a41c:	1ff1e808 	.word	0x1ff1e808
 800a420:	240000fe 	.word	0x240000fe
 800a424:	2400010e 	.word	0x2400010e

0800a428 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a43a:	2300      	movs	r3, #0
 800a43c:	75fb      	strb	r3, [r7, #23]
 800a43e:	e027      	b.n	800a490 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	0f1b      	lsrs	r3, r3, #28
 800a444:	2b09      	cmp	r3, #9
 800a446:	d80b      	bhi.n	800a460 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	0f1b      	lsrs	r3, r3, #28
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4619      	mov	r1, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	440b      	add	r3, r1
 800a458:	3230      	adds	r2, #48	@ 0x30
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	e00a      	b.n	800a476 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	0f1b      	lsrs	r3, r3, #28
 800a464:	b2da      	uxtb	r2, r3
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	4619      	mov	r1, r3
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	440b      	add	r3, r1
 800a470:	3237      	adds	r2, #55	@ 0x37
 800a472:	b2d2      	uxtb	r2, r2
 800a474:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	3301      	adds	r3, #1
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	4413      	add	r3, r2
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a48a:	7dfb      	ldrb	r3, [r7, #23]
 800a48c:	3301      	adds	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
 800a490:	7dfa      	ldrb	r2, [r7, #23]
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	429a      	cmp	r2, r3
 800a496:	d3d3      	bcc.n	800a440 <IntToUnicode+0x18>
  }
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
	...

0800a4a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b0bc      	sub	sp, #240	@ 0xf0
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	605a      	str	r2, [r3, #4]
 800a4ba:	609a      	str	r2, [r3, #8]
 800a4bc:	60da      	str	r2, [r3, #12]
 800a4be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a4c0:	f107 0320 	add.w	r3, r7, #32
 800a4c4:	22b8      	movs	r2, #184	@ 0xb8
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 fb91 	bl	800abf0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a58      	ldr	r2, [pc, #352]	@ (800a634 <HAL_PCD_MspInit+0x18c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	f040 80a9 	bne.w	800a62c <HAL_PCD_MspInit+0x184>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a4da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a4e6:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800a4ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4ee:	f107 0320 	add.w	r3, r7, #32
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f9 fdde 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800a4fe:	f7f6 fdef 	bl	80010e0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800a502:	f7f8 fe61 	bl	80031c8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a506:	4b4c      	ldr	r3, [pc, #304]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a50c:	4a4a      	ldr	r2, [pc, #296]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a50e:	f043 0304 	orr.w	r3, r3, #4
 800a512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a516:	4b48      	ldr	r3, [pc, #288]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	61fb      	str	r3, [r7, #28]
 800a522:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a524:	4b44      	ldr	r3, [pc, #272]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a52a:	4a43      	ldr	r2, [pc, #268]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a52c:	f043 0301 	orr.w	r3, r3, #1
 800a530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a534:	4b40      	ldr	r3, [pc, #256]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	61bb      	str	r3, [r7, #24]
 800a540:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a542:	4b3d      	ldr	r3, [pc, #244]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a548:	4a3b      	ldr	r2, [pc, #236]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a54a:	f043 0302 	orr.w	r3, r3, #2
 800a54e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a552:	4b39      	ldr	r3, [pc, #228]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800a560:	230d      	movs	r3, #13
 800a562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a566:	2302      	movs	r3, #2
 800a568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a572:	2302      	movs	r3, #2
 800a574:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a578:	230a      	movs	r3, #10
 800a57a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a57e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a582:	4619      	mov	r1, r3
 800a584:	482d      	ldr	r0, [pc, #180]	@ (800a63c <HAL_PCD_MspInit+0x194>)
 800a586:	f7f7 f9b5 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800a58a:	2328      	movs	r3, #40	@ 0x28
 800a58c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a590:	2302      	movs	r3, #2
 800a592:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a596:	2300      	movs	r3, #0
 800a598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a59c:	2302      	movs	r3, #2
 800a59e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a5a2:	230a      	movs	r3, #10
 800a5a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4824      	ldr	r0, [pc, #144]	@ (800a640 <HAL_PCD_MspInit+0x198>)
 800a5b0:	f7f7 f9a0 	bl	80018f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800a5b4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800a5b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800a5ce:	230a      	movs	r3, #10
 800a5d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800a5d8:	4619      	mov	r1, r3
 800a5da:	481a      	ldr	r0, [pc, #104]	@ (800a644 <HAL_PCD_MspInit+0x19c>)
 800a5dc:	f7f7 f98a 	bl	80018f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a5e0:	4b15      	ldr	r3, [pc, #84]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a5e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5e6:	4a14      	ldr	r2, [pc, #80]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a5e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a5ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a5f0:	4b11      	ldr	r3, [pc, #68]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a5f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5fa:	613b      	str	r3, [r7, #16]
 800a5fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a604:	4a0c      	ldr	r2, [pc, #48]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a606:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a60a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a60e:	4b0a      	ldr	r3, [pc, #40]	@ (800a638 <HAL_PCD_MspInit+0x190>)
 800a610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a614:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a61c:	2200      	movs	r2, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	204d      	movs	r0, #77	@ 0x4d
 800a622:	f7f7 f8ba 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a626:	204d      	movs	r0, #77	@ 0x4d
 800a628:	f7f7 f8d1 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a62c:	bf00      	nop
 800a62e:	37f0      	adds	r7, #240	@ 0xf0
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	40040000 	.word	0x40040000
 800a638:	58024400 	.word	0x58024400
 800a63c:	58020800 	.word	0x58020800
 800a640:	58020000 	.word	0x58020000
 800a644:	58020400 	.word	0x58020400

0800a648 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	f7fe fb8d 	bl	8008d7e <USBD_LL_SetupStage>
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4613      	mov	r3, r2
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	4413      	add	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	4619      	mov	r1, r3
 800a696:	f7fe fbc7 	bl	8008e28 <USBD_LL_DataOutStage>
}
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6b4:	78fa      	ldrb	r2, [r7, #3]
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	00db      	lsls	r3, r3, #3
 800a6bc:	4413      	add	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	440b      	add	r3, r1
 800a6c2:	3320      	adds	r3, #32
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	f7fe fc60 	bl	8008f8e <USBD_LL_DataInStage>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe fd9a 	bl	800921e <USBD_LL_SOF>
}
 800a6ea:	bf00      	nop
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	79db      	ldrb	r3, [r3, #7]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
 800a70a:	e008      	b.n	800a71e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	79db      	ldrb	r3, [r3, #7]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d102      	bne.n	800a71a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a714:	2301      	movs	r3, #1
 800a716:	73fb      	strb	r3, [r7, #15]
 800a718:	e001      	b.n	800a71e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a71a:	f7f6 fce1 	bl	80010e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a724:	7bfa      	ldrb	r2, [r7, #15]
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fd34 	bl	8009196 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fcdc 	bl	80090f2 <USBD_LL_Reset>
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe fd2f 	bl	80091b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	7adb      	ldrb	r3, [r3, #11]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a778:	4b04      	ldr	r3, [pc, #16]	@ (800a78c <HAL_PCD_SuspendCallback+0x48>)
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	4a03      	ldr	r2, [pc, #12]	@ (800a78c <HAL_PCD_SuspendCallback+0x48>)
 800a77e:	f043 0306 	orr.w	r3, r3, #6
 800a782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	e000ed00 	.word	0xe000ed00

0800a790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fd25 	bl	80091ee <USBD_LL_Resume>
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fd7d 	bl	80092c2 <USBD_LL_IsoOUTIncomplete>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fd39 	bl	800925e <USBD_LL_IsoINIncomplete>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fd8f 	bl	8009326 <USBD_LL_DevConnected>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fd8c 	bl	800933c <USBD_LL_DevDisconnected>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d140      	bne.n	800a8be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a83c:	4a22      	ldr	r2, [pc, #136]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a20      	ldr	r2, [pc, #128]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a848:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a84c:	4b1e      	ldr	r3, [pc, #120]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a84e:	4a1f      	ldr	r2, [pc, #124]	@ (800a8cc <USBD_LL_Init+0xa0>)
 800a850:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a852:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a854:	2209      	movs	r2, #9
 800a856:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800a858:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a85e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a860:	2200      	movs	r2, #0
 800a862:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a864:	4b18      	ldr	r3, [pc, #96]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a866:	2201      	movs	r2, #1
 800a868:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a86a:	4b17      	ldr	r3, [pc, #92]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a870:	4b15      	ldr	r3, [pc, #84]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a872:	2200      	movs	r2, #0
 800a874:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a876:	4b14      	ldr	r3, [pc, #80]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a878:	2200      	movs	r2, #0
 800a87a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a87c:	4b12      	ldr	r3, [pc, #72]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a87e:	2200      	movs	r2, #0
 800a880:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a882:	4b11      	ldr	r3, [pc, #68]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a884:	2200      	movs	r2, #0
 800a886:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a888:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a88e:	480e      	ldr	r0, [pc, #56]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a890:	f7f7 f9d8 	bl	8001c44 <HAL_PCD_Init>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a89a:	f7f6 fc21 	bl	80010e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a89e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a8a2:	4809      	ldr	r0, [pc, #36]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a8a4:	f7f8 fc15 	bl	80030d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a8a8:	2280      	movs	r2, #128	@ 0x80
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4806      	ldr	r0, [pc, #24]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a8ae:	f7f8 fbc9 	bl	8003044 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a8b2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	4803      	ldr	r0, [pc, #12]	@ (800a8c8 <USBD_LL_Init+0x9c>)
 800a8ba:	f7f8 fbc3 	bl	8003044 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	24000728 	.word	0x24000728
 800a8cc:	40040000 	.word	0x40040000

0800a8d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7f7 fab8 	bl	8001e5c <HAL_PCD_Start>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 f930 	bl	800ab58 <USBD_Get_USB_Status>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	461a      	mov	r2, r3
 800a914:	4603      	mov	r3, r0
 800a916:	70fb      	strb	r3, [r7, #3]
 800a918:	460b      	mov	r3, r1
 800a91a:	70bb      	strb	r3, [r7, #2]
 800a91c:	4613      	mov	r3, r2
 800a91e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a92e:	78bb      	ldrb	r3, [r7, #2]
 800a930:	883a      	ldrh	r2, [r7, #0]
 800a932:	78f9      	ldrb	r1, [r7, #3]
 800a934:	f7f7 ffb9 	bl	80028aa <HAL_PCD_EP_Open>
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 f90a 	bl	800ab58 <USBD_Get_USB_Status>
 800a944:	4603      	mov	r3, r0
 800a946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a948:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	460b      	mov	r3, r1
 800a95c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a96c:	78fa      	ldrb	r2, [r7, #3]
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7f8 f804 	bl	800297e <HAL_PCD_EP_Close>
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 f8eb 	bl	800ab58 <USBD_Get_USB_Status>
 800a982:	4603      	mov	r3, r0
 800a984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a986:	7bbb      	ldrb	r3, [r7, #14]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9aa:	78fa      	ldrb	r2, [r7, #3]
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f8 f8a4 	bl	8002afc <HAL_PCD_EP_SetStall>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f8cc 	bl	800ab58 <USBD_Get_USB_Status>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9e8:	78fa      	ldrb	r2, [r7, #3]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f8 f8e8 	bl	8002bc2 <HAL_PCD_EP_ClrStall>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 f8ad 	bl	800ab58 <USBD_Get_USB_Status>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	da0b      	bge.n	800aa40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	4613      	mov	r3, r2
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	440b      	add	r3, r1
 800aa3a:	3316      	adds	r3, #22
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	e00b      	b.n	800aa58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa46:	68f9      	ldr	r1, [r7, #12]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	440b      	add	r3, r1
 800aa52:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aa56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa7e:	78fa      	ldrb	r2, [r7, #3]
 800aa80:	4611      	mov	r1, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f7 feed 	bl	8002862 <HAL_PCD_SetAddress>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 f862 	bl	800ab58 <USBD_Get_USB_Status>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
 800aaae:	460b      	mov	r3, r1
 800aab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aac0:	7af9      	ldrb	r1, [r7, #11]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	f7f7 ffdf 	bl	8002a88 <HAL_PCD_EP_Transmit>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 f841 	bl	800ab58 <USBD_Get_USB_Status>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aada:	7dbb      	ldrb	r3, [r7, #22]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	607a      	str	r2, [r7, #4]
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab02:	7af9      	ldrb	r1, [r7, #11]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	f7f7 ff83 	bl	8002a12 <HAL_PCD_EP_Receive>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f820 	bl	800ab58 <USBD_Get_USB_Status>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab30:	4b03      	ldr	r3, [pc, #12]	@ (800ab40 <USBD_static_malloc+0x18>)
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	24000c0c 	.word	0x24000c0c

0800ab44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d817      	bhi.n	800ab9c <USBD_Get_USB_Status+0x44>
 800ab6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab74 <USBD_Get_USB_Status+0x1c>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab8b 	.word	0x0800ab8b
 800ab7c:	0800ab91 	.word	0x0800ab91
 800ab80:	0800ab97 	.word	0x0800ab97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
    break;
 800ab88:	e00b      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8e:	e008      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
    break;
 800ab94:	e005      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab96:	2303      	movs	r3, #3
 800ab98:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9a:	e002      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aba0:	bf00      	nop
  }
  return usb_status;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <siprintf>:
 800abb0:	b40e      	push	{r1, r2, r3}
 800abb2:	b500      	push	{lr}
 800abb4:	b09c      	sub	sp, #112	@ 0x70
 800abb6:	ab1d      	add	r3, sp, #116	@ 0x74
 800abb8:	9002      	str	r0, [sp, #8]
 800abba:	9006      	str	r0, [sp, #24]
 800abbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800abc0:	4809      	ldr	r0, [pc, #36]	@ (800abe8 <siprintf+0x38>)
 800abc2:	9107      	str	r1, [sp, #28]
 800abc4:	9104      	str	r1, [sp, #16]
 800abc6:	4909      	ldr	r1, [pc, #36]	@ (800abec <siprintf+0x3c>)
 800abc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	a902      	add	r1, sp, #8
 800abd4:	f000 f994 	bl	800af00 <_svfiprintf_r>
 800abd8:	9b02      	ldr	r3, [sp, #8]
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
 800abde:	b01c      	add	sp, #112	@ 0x70
 800abe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe4:	b003      	add	sp, #12
 800abe6:	4770      	bx	lr
 800abe8:	24000118 	.word	0x24000118
 800abec:	ffff0208 	.word	0xffff0208

0800abf0 <memset>:
 800abf0:	4402      	add	r2, r0
 800abf2:	4603      	mov	r3, r0
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d100      	bne.n	800abfa <memset+0xa>
 800abf8:	4770      	bx	lr
 800abfa:	f803 1b01 	strb.w	r1, [r3], #1
 800abfe:	e7f9      	b.n	800abf4 <memset+0x4>

0800ac00 <__errno>:
 800ac00:	4b01      	ldr	r3, [pc, #4]	@ (800ac08 <__errno+0x8>)
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	24000118 	.word	0x24000118

0800ac0c <__libc_init_array>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	4d0d      	ldr	r5, [pc, #52]	@ (800ac44 <__libc_init_array+0x38>)
 800ac10:	4c0d      	ldr	r4, [pc, #52]	@ (800ac48 <__libc_init_array+0x3c>)
 800ac12:	1b64      	subs	r4, r4, r5
 800ac14:	10a4      	asrs	r4, r4, #2
 800ac16:	2600      	movs	r6, #0
 800ac18:	42a6      	cmp	r6, r4
 800ac1a:	d109      	bne.n	800ac30 <__libc_init_array+0x24>
 800ac1c:	4d0b      	ldr	r5, [pc, #44]	@ (800ac4c <__libc_init_array+0x40>)
 800ac1e:	4c0c      	ldr	r4, [pc, #48]	@ (800ac50 <__libc_init_array+0x44>)
 800ac20:	f000 fc66 	bl	800b4f0 <_init>
 800ac24:	1b64      	subs	r4, r4, r5
 800ac26:	10a4      	asrs	r4, r4, #2
 800ac28:	2600      	movs	r6, #0
 800ac2a:	42a6      	cmp	r6, r4
 800ac2c:	d105      	bne.n	800ac3a <__libc_init_array+0x2e>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac34:	4798      	blx	r3
 800ac36:	3601      	adds	r6, #1
 800ac38:	e7ee      	b.n	800ac18 <__libc_init_array+0xc>
 800ac3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3e:	4798      	blx	r3
 800ac40:	3601      	adds	r6, #1
 800ac42:	e7f2      	b.n	800ac2a <__libc_init_array+0x1e>
 800ac44:	0800b798 	.word	0x0800b798
 800ac48:	0800b798 	.word	0x0800b798
 800ac4c:	0800b798 	.word	0x0800b798
 800ac50:	0800b79c 	.word	0x0800b79c

0800ac54 <__retarget_lock_acquire_recursive>:
 800ac54:	4770      	bx	lr

0800ac56 <__retarget_lock_release_recursive>:
 800ac56:	4770      	bx	lr

0800ac58 <_free_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	d041      	beq.n	800ace4 <_free_r+0x8c>
 800ac60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac64:	1f0c      	subs	r4, r1, #4
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bfb8      	it	lt
 800ac6a:	18e4      	addlt	r4, r4, r3
 800ac6c:	f000 f8e0 	bl	800ae30 <__malloc_lock>
 800ac70:	4a1d      	ldr	r2, [pc, #116]	@ (800ace8 <_free_r+0x90>)
 800ac72:	6813      	ldr	r3, [r2, #0]
 800ac74:	b933      	cbnz	r3, 800ac84 <_free_r+0x2c>
 800ac76:	6063      	str	r3, [r4, #4]
 800ac78:	6014      	str	r4, [r2, #0]
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac80:	f000 b8dc 	b.w	800ae3c <__malloc_unlock>
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	d908      	bls.n	800ac9a <_free_r+0x42>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	1821      	adds	r1, r4, r0
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	bf01      	itttt	eq
 800ac90:	6819      	ldreq	r1, [r3, #0]
 800ac92:	685b      	ldreq	r3, [r3, #4]
 800ac94:	1809      	addeq	r1, r1, r0
 800ac96:	6021      	streq	r1, [r4, #0]
 800ac98:	e7ed      	b.n	800ac76 <_free_r+0x1e>
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	b10b      	cbz	r3, 800aca4 <_free_r+0x4c>
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	d9fa      	bls.n	800ac9a <_free_r+0x42>
 800aca4:	6811      	ldr	r1, [r2, #0]
 800aca6:	1850      	adds	r0, r2, r1
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d10b      	bne.n	800acc4 <_free_r+0x6c>
 800acac:	6820      	ldr	r0, [r4, #0]
 800acae:	4401      	add	r1, r0
 800acb0:	1850      	adds	r0, r2, r1
 800acb2:	4283      	cmp	r3, r0
 800acb4:	6011      	str	r1, [r2, #0]
 800acb6:	d1e0      	bne.n	800ac7a <_free_r+0x22>
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	6053      	str	r3, [r2, #4]
 800acbe:	4408      	add	r0, r1
 800acc0:	6010      	str	r0, [r2, #0]
 800acc2:	e7da      	b.n	800ac7a <_free_r+0x22>
 800acc4:	d902      	bls.n	800accc <_free_r+0x74>
 800acc6:	230c      	movs	r3, #12
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	e7d6      	b.n	800ac7a <_free_r+0x22>
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	1821      	adds	r1, r4, r0
 800acd0:	428b      	cmp	r3, r1
 800acd2:	bf04      	itt	eq
 800acd4:	6819      	ldreq	r1, [r3, #0]
 800acd6:	685b      	ldreq	r3, [r3, #4]
 800acd8:	6063      	str	r3, [r4, #4]
 800acda:	bf04      	itt	eq
 800acdc:	1809      	addeq	r1, r1, r0
 800acde:	6021      	streq	r1, [r4, #0]
 800ace0:	6054      	str	r4, [r2, #4]
 800ace2:	e7ca      	b.n	800ac7a <_free_r+0x22>
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	24000d64 	.word	0x24000d64

0800acec <sbrk_aligned>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	4e0f      	ldr	r6, [pc, #60]	@ (800ad2c <sbrk_aligned+0x40>)
 800acf0:	460c      	mov	r4, r1
 800acf2:	6831      	ldr	r1, [r6, #0]
 800acf4:	4605      	mov	r5, r0
 800acf6:	b911      	cbnz	r1, 800acfe <sbrk_aligned+0x12>
 800acf8:	f000 fba6 	bl	800b448 <_sbrk_r>
 800acfc:	6030      	str	r0, [r6, #0]
 800acfe:	4621      	mov	r1, r4
 800ad00:	4628      	mov	r0, r5
 800ad02:	f000 fba1 	bl	800b448 <_sbrk_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d103      	bne.n	800ad12 <sbrk_aligned+0x26>
 800ad0a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad0e:	4620      	mov	r0, r4
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
 800ad12:	1cc4      	adds	r4, r0, #3
 800ad14:	f024 0403 	bic.w	r4, r4, #3
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d0f8      	beq.n	800ad0e <sbrk_aligned+0x22>
 800ad1c:	1a21      	subs	r1, r4, r0
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 fb92 	bl	800b448 <_sbrk_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	d1f2      	bne.n	800ad0e <sbrk_aligned+0x22>
 800ad28:	e7ef      	b.n	800ad0a <sbrk_aligned+0x1e>
 800ad2a:	bf00      	nop
 800ad2c:	24000d60 	.word	0x24000d60

0800ad30 <_malloc_r>:
 800ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad34:	1ccd      	adds	r5, r1, #3
 800ad36:	f025 0503 	bic.w	r5, r5, #3
 800ad3a:	3508      	adds	r5, #8
 800ad3c:	2d0c      	cmp	r5, #12
 800ad3e:	bf38      	it	cc
 800ad40:	250c      	movcc	r5, #12
 800ad42:	2d00      	cmp	r5, #0
 800ad44:	4606      	mov	r6, r0
 800ad46:	db01      	blt.n	800ad4c <_malloc_r+0x1c>
 800ad48:	42a9      	cmp	r1, r5
 800ad4a:	d904      	bls.n	800ad56 <_malloc_r+0x26>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	6033      	str	r3, [r6, #0]
 800ad50:	2000      	movs	r0, #0
 800ad52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae2c <_malloc_r+0xfc>
 800ad5a:	f000 f869 	bl	800ae30 <__malloc_lock>
 800ad5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad62:	461c      	mov	r4, r3
 800ad64:	bb44      	cbnz	r4, 800adb8 <_malloc_r+0x88>
 800ad66:	4629      	mov	r1, r5
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7ff ffbf 	bl	800acec <sbrk_aligned>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	4604      	mov	r4, r0
 800ad72:	d158      	bne.n	800ae26 <_malloc_r+0xf6>
 800ad74:	f8d8 4000 	ldr.w	r4, [r8]
 800ad78:	4627      	mov	r7, r4
 800ad7a:	2f00      	cmp	r7, #0
 800ad7c:	d143      	bne.n	800ae06 <_malloc_r+0xd6>
 800ad7e:	2c00      	cmp	r4, #0
 800ad80:	d04b      	beq.n	800ae1a <_malloc_r+0xea>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	4639      	mov	r1, r7
 800ad86:	4630      	mov	r0, r6
 800ad88:	eb04 0903 	add.w	r9, r4, r3
 800ad8c:	f000 fb5c 	bl	800b448 <_sbrk_r>
 800ad90:	4581      	cmp	r9, r0
 800ad92:	d142      	bne.n	800ae1a <_malloc_r+0xea>
 800ad94:	6821      	ldr	r1, [r4, #0]
 800ad96:	1a6d      	subs	r5, r5, r1
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7ff ffa6 	bl	800acec <sbrk_aligned>
 800ada0:	3001      	adds	r0, #1
 800ada2:	d03a      	beq.n	800ae1a <_malloc_r+0xea>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	442b      	add	r3, r5
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	f8d8 3000 	ldr.w	r3, [r8]
 800adae:	685a      	ldr	r2, [r3, #4]
 800adb0:	bb62      	cbnz	r2, 800ae0c <_malloc_r+0xdc>
 800adb2:	f8c8 7000 	str.w	r7, [r8]
 800adb6:	e00f      	b.n	800add8 <_malloc_r+0xa8>
 800adb8:	6822      	ldr	r2, [r4, #0]
 800adba:	1b52      	subs	r2, r2, r5
 800adbc:	d420      	bmi.n	800ae00 <_malloc_r+0xd0>
 800adbe:	2a0b      	cmp	r2, #11
 800adc0:	d917      	bls.n	800adf2 <_malloc_r+0xc2>
 800adc2:	1961      	adds	r1, r4, r5
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	6025      	str	r5, [r4, #0]
 800adc8:	bf18      	it	ne
 800adca:	6059      	strne	r1, [r3, #4]
 800adcc:	6863      	ldr	r3, [r4, #4]
 800adce:	bf08      	it	eq
 800add0:	f8c8 1000 	streq.w	r1, [r8]
 800add4:	5162      	str	r2, [r4, r5]
 800add6:	604b      	str	r3, [r1, #4]
 800add8:	4630      	mov	r0, r6
 800adda:	f000 f82f 	bl	800ae3c <__malloc_unlock>
 800adde:	f104 000b 	add.w	r0, r4, #11
 800ade2:	1d23      	adds	r3, r4, #4
 800ade4:	f020 0007 	bic.w	r0, r0, #7
 800ade8:	1ac2      	subs	r2, r0, r3
 800adea:	bf1c      	itt	ne
 800adec:	1a1b      	subne	r3, r3, r0
 800adee:	50a3      	strne	r3, [r4, r2]
 800adf0:	e7af      	b.n	800ad52 <_malloc_r+0x22>
 800adf2:	6862      	ldr	r2, [r4, #4]
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	bf0c      	ite	eq
 800adf8:	f8c8 2000 	streq.w	r2, [r8]
 800adfc:	605a      	strne	r2, [r3, #4]
 800adfe:	e7eb      	b.n	800add8 <_malloc_r+0xa8>
 800ae00:	4623      	mov	r3, r4
 800ae02:	6864      	ldr	r4, [r4, #4]
 800ae04:	e7ae      	b.n	800ad64 <_malloc_r+0x34>
 800ae06:	463c      	mov	r4, r7
 800ae08:	687f      	ldr	r7, [r7, #4]
 800ae0a:	e7b6      	b.n	800ad7a <_malloc_r+0x4a>
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	d1fb      	bne.n	800ae0c <_malloc_r+0xdc>
 800ae14:	2300      	movs	r3, #0
 800ae16:	6053      	str	r3, [r2, #4]
 800ae18:	e7de      	b.n	800add8 <_malloc_r+0xa8>
 800ae1a:	230c      	movs	r3, #12
 800ae1c:	6033      	str	r3, [r6, #0]
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f000 f80c 	bl	800ae3c <__malloc_unlock>
 800ae24:	e794      	b.n	800ad50 <_malloc_r+0x20>
 800ae26:	6005      	str	r5, [r0, #0]
 800ae28:	e7d6      	b.n	800add8 <_malloc_r+0xa8>
 800ae2a:	bf00      	nop
 800ae2c:	24000d64 	.word	0x24000d64

0800ae30 <__malloc_lock>:
 800ae30:	4801      	ldr	r0, [pc, #4]	@ (800ae38 <__malloc_lock+0x8>)
 800ae32:	f7ff bf0f 	b.w	800ac54 <__retarget_lock_acquire_recursive>
 800ae36:	bf00      	nop
 800ae38:	24000d5c 	.word	0x24000d5c

0800ae3c <__malloc_unlock>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	@ (800ae44 <__malloc_unlock+0x8>)
 800ae3e:	f7ff bf0a 	b.w	800ac56 <__retarget_lock_release_recursive>
 800ae42:	bf00      	nop
 800ae44:	24000d5c 	.word	0x24000d5c

0800ae48 <__ssputs_r>:
 800ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4c:	688e      	ldr	r6, [r1, #8]
 800ae4e:	461f      	mov	r7, r3
 800ae50:	42be      	cmp	r6, r7
 800ae52:	680b      	ldr	r3, [r1, #0]
 800ae54:	4682      	mov	sl, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	4690      	mov	r8, r2
 800ae5a:	d82d      	bhi.n	800aeb8 <__ssputs_r+0x70>
 800ae5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae64:	d026      	beq.n	800aeb4 <__ssputs_r+0x6c>
 800ae66:	6965      	ldr	r5, [r4, #20]
 800ae68:	6909      	ldr	r1, [r1, #16]
 800ae6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae6e:	eba3 0901 	sub.w	r9, r3, r1
 800ae72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae76:	1c7b      	adds	r3, r7, #1
 800ae78:	444b      	add	r3, r9
 800ae7a:	106d      	asrs	r5, r5, #1
 800ae7c:	429d      	cmp	r5, r3
 800ae7e:	bf38      	it	cc
 800ae80:	461d      	movcc	r5, r3
 800ae82:	0553      	lsls	r3, r2, #21
 800ae84:	d527      	bpl.n	800aed6 <__ssputs_r+0x8e>
 800ae86:	4629      	mov	r1, r5
 800ae88:	f7ff ff52 	bl	800ad30 <_malloc_r>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	b360      	cbz	r0, 800aeea <__ssputs_r+0xa2>
 800ae90:	6921      	ldr	r1, [r4, #16]
 800ae92:	464a      	mov	r2, r9
 800ae94:	f000 fae8 	bl	800b468 <memcpy>
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	6126      	str	r6, [r4, #16]
 800aea6:	6165      	str	r5, [r4, #20]
 800aea8:	444e      	add	r6, r9
 800aeaa:	eba5 0509 	sub.w	r5, r5, r9
 800aeae:	6026      	str	r6, [r4, #0]
 800aeb0:	60a5      	str	r5, [r4, #8]
 800aeb2:	463e      	mov	r6, r7
 800aeb4:	42be      	cmp	r6, r7
 800aeb6:	d900      	bls.n	800aeba <__ssputs_r+0x72>
 800aeb8:	463e      	mov	r6, r7
 800aeba:	6820      	ldr	r0, [r4, #0]
 800aebc:	4632      	mov	r2, r6
 800aebe:	4641      	mov	r1, r8
 800aec0:	f000 faa8 	bl	800b414 <memmove>
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	1b9b      	subs	r3, r3, r6
 800aec8:	60a3      	str	r3, [r4, #8]
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	4433      	add	r3, r6
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	2000      	movs	r0, #0
 800aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed6:	462a      	mov	r2, r5
 800aed8:	f000 fad4 	bl	800b484 <_realloc_r>
 800aedc:	4606      	mov	r6, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	d1e0      	bne.n	800aea4 <__ssputs_r+0x5c>
 800aee2:	6921      	ldr	r1, [r4, #16]
 800aee4:	4650      	mov	r0, sl
 800aee6:	f7ff feb7 	bl	800ac58 <_free_r>
 800aeea:	230c      	movs	r3, #12
 800aeec:	f8ca 3000 	str.w	r3, [sl]
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aef6:	81a3      	strh	r3, [r4, #12]
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	e7e9      	b.n	800aed2 <__ssputs_r+0x8a>
	...

0800af00 <_svfiprintf_r>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	4698      	mov	r8, r3
 800af06:	898b      	ldrh	r3, [r1, #12]
 800af08:	061b      	lsls	r3, r3, #24
 800af0a:	b09d      	sub	sp, #116	@ 0x74
 800af0c:	4607      	mov	r7, r0
 800af0e:	460d      	mov	r5, r1
 800af10:	4614      	mov	r4, r2
 800af12:	d510      	bpl.n	800af36 <_svfiprintf_r+0x36>
 800af14:	690b      	ldr	r3, [r1, #16]
 800af16:	b973      	cbnz	r3, 800af36 <_svfiprintf_r+0x36>
 800af18:	2140      	movs	r1, #64	@ 0x40
 800af1a:	f7ff ff09 	bl	800ad30 <_malloc_r>
 800af1e:	6028      	str	r0, [r5, #0]
 800af20:	6128      	str	r0, [r5, #16]
 800af22:	b930      	cbnz	r0, 800af32 <_svfiprintf_r+0x32>
 800af24:	230c      	movs	r3, #12
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	b01d      	add	sp, #116	@ 0x74
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af32:	2340      	movs	r3, #64	@ 0x40
 800af34:	616b      	str	r3, [r5, #20]
 800af36:	2300      	movs	r3, #0
 800af38:	9309      	str	r3, [sp, #36]	@ 0x24
 800af3a:	2320      	movs	r3, #32
 800af3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af40:	f8cd 800c 	str.w	r8, [sp, #12]
 800af44:	2330      	movs	r3, #48	@ 0x30
 800af46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0e4 <_svfiprintf_r+0x1e4>
 800af4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af4e:	f04f 0901 	mov.w	r9, #1
 800af52:	4623      	mov	r3, r4
 800af54:	469a      	mov	sl, r3
 800af56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5a:	b10a      	cbz	r2, 800af60 <_svfiprintf_r+0x60>
 800af5c:	2a25      	cmp	r2, #37	@ 0x25
 800af5e:	d1f9      	bne.n	800af54 <_svfiprintf_r+0x54>
 800af60:	ebba 0b04 	subs.w	fp, sl, r4
 800af64:	d00b      	beq.n	800af7e <_svfiprintf_r+0x7e>
 800af66:	465b      	mov	r3, fp
 800af68:	4622      	mov	r2, r4
 800af6a:	4629      	mov	r1, r5
 800af6c:	4638      	mov	r0, r7
 800af6e:	f7ff ff6b 	bl	800ae48 <__ssputs_r>
 800af72:	3001      	adds	r0, #1
 800af74:	f000 80a7 	beq.w	800b0c6 <_svfiprintf_r+0x1c6>
 800af78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af7a:	445a      	add	r2, fp
 800af7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af7e:	f89a 3000 	ldrb.w	r3, [sl]
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 809f 	beq.w	800b0c6 <_svfiprintf_r+0x1c6>
 800af88:	2300      	movs	r3, #0
 800af8a:	f04f 32ff 	mov.w	r2, #4294967295
 800af8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af92:	f10a 0a01 	add.w	sl, sl, #1
 800af96:	9304      	str	r3, [sp, #16]
 800af98:	9307      	str	r3, [sp, #28]
 800af9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800afa0:	4654      	mov	r4, sl
 800afa2:	2205      	movs	r2, #5
 800afa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa8:	484e      	ldr	r0, [pc, #312]	@ (800b0e4 <_svfiprintf_r+0x1e4>)
 800afaa:	f7f5 f9b9 	bl	8000320 <memchr>
 800afae:	9a04      	ldr	r2, [sp, #16]
 800afb0:	b9d8      	cbnz	r0, 800afea <_svfiprintf_r+0xea>
 800afb2:	06d0      	lsls	r0, r2, #27
 800afb4:	bf44      	itt	mi
 800afb6:	2320      	movmi	r3, #32
 800afb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afbc:	0711      	lsls	r1, r2, #28
 800afbe:	bf44      	itt	mi
 800afc0:	232b      	movmi	r3, #43	@ 0x2b
 800afc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afc6:	f89a 3000 	ldrb.w	r3, [sl]
 800afca:	2b2a      	cmp	r3, #42	@ 0x2a
 800afcc:	d015      	beq.n	800affa <_svfiprintf_r+0xfa>
 800afce:	9a07      	ldr	r2, [sp, #28]
 800afd0:	4654      	mov	r4, sl
 800afd2:	2000      	movs	r0, #0
 800afd4:	f04f 0c0a 	mov.w	ip, #10
 800afd8:	4621      	mov	r1, r4
 800afda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afde:	3b30      	subs	r3, #48	@ 0x30
 800afe0:	2b09      	cmp	r3, #9
 800afe2:	d94b      	bls.n	800b07c <_svfiprintf_r+0x17c>
 800afe4:	b1b0      	cbz	r0, 800b014 <_svfiprintf_r+0x114>
 800afe6:	9207      	str	r2, [sp, #28]
 800afe8:	e014      	b.n	800b014 <_svfiprintf_r+0x114>
 800afea:	eba0 0308 	sub.w	r3, r0, r8
 800afee:	fa09 f303 	lsl.w	r3, r9, r3
 800aff2:	4313      	orrs	r3, r2
 800aff4:	9304      	str	r3, [sp, #16]
 800aff6:	46a2      	mov	sl, r4
 800aff8:	e7d2      	b.n	800afa0 <_svfiprintf_r+0xa0>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	1d19      	adds	r1, r3, #4
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	9103      	str	r1, [sp, #12]
 800b002:	2b00      	cmp	r3, #0
 800b004:	bfbb      	ittet	lt
 800b006:	425b      	neglt	r3, r3
 800b008:	f042 0202 	orrlt.w	r2, r2, #2
 800b00c:	9307      	strge	r3, [sp, #28]
 800b00e:	9307      	strlt	r3, [sp, #28]
 800b010:	bfb8      	it	lt
 800b012:	9204      	strlt	r2, [sp, #16]
 800b014:	7823      	ldrb	r3, [r4, #0]
 800b016:	2b2e      	cmp	r3, #46	@ 0x2e
 800b018:	d10a      	bne.n	800b030 <_svfiprintf_r+0x130>
 800b01a:	7863      	ldrb	r3, [r4, #1]
 800b01c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b01e:	d132      	bne.n	800b086 <_svfiprintf_r+0x186>
 800b020:	9b03      	ldr	r3, [sp, #12]
 800b022:	1d1a      	adds	r2, r3, #4
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	9203      	str	r2, [sp, #12]
 800b028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b02c:	3402      	adds	r4, #2
 800b02e:	9305      	str	r3, [sp, #20]
 800b030:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0f4 <_svfiprintf_r+0x1f4>
 800b034:	7821      	ldrb	r1, [r4, #0]
 800b036:	2203      	movs	r2, #3
 800b038:	4650      	mov	r0, sl
 800b03a:	f7f5 f971 	bl	8000320 <memchr>
 800b03e:	b138      	cbz	r0, 800b050 <_svfiprintf_r+0x150>
 800b040:	9b04      	ldr	r3, [sp, #16]
 800b042:	eba0 000a 	sub.w	r0, r0, sl
 800b046:	2240      	movs	r2, #64	@ 0x40
 800b048:	4082      	lsls	r2, r0
 800b04a:	4313      	orrs	r3, r2
 800b04c:	3401      	adds	r4, #1
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b054:	4824      	ldr	r0, [pc, #144]	@ (800b0e8 <_svfiprintf_r+0x1e8>)
 800b056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b05a:	2206      	movs	r2, #6
 800b05c:	f7f5 f960 	bl	8000320 <memchr>
 800b060:	2800      	cmp	r0, #0
 800b062:	d036      	beq.n	800b0d2 <_svfiprintf_r+0x1d2>
 800b064:	4b21      	ldr	r3, [pc, #132]	@ (800b0ec <_svfiprintf_r+0x1ec>)
 800b066:	bb1b      	cbnz	r3, 800b0b0 <_svfiprintf_r+0x1b0>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	3307      	adds	r3, #7
 800b06c:	f023 0307 	bic.w	r3, r3, #7
 800b070:	3308      	adds	r3, #8
 800b072:	9303      	str	r3, [sp, #12]
 800b074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b076:	4433      	add	r3, r6
 800b078:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07a:	e76a      	b.n	800af52 <_svfiprintf_r+0x52>
 800b07c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b080:	460c      	mov	r4, r1
 800b082:	2001      	movs	r0, #1
 800b084:	e7a8      	b.n	800afd8 <_svfiprintf_r+0xd8>
 800b086:	2300      	movs	r3, #0
 800b088:	3401      	adds	r4, #1
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	4619      	mov	r1, r3
 800b08e:	f04f 0c0a 	mov.w	ip, #10
 800b092:	4620      	mov	r0, r4
 800b094:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b098:	3a30      	subs	r2, #48	@ 0x30
 800b09a:	2a09      	cmp	r2, #9
 800b09c:	d903      	bls.n	800b0a6 <_svfiprintf_r+0x1a6>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0c6      	beq.n	800b030 <_svfiprintf_r+0x130>
 800b0a2:	9105      	str	r1, [sp, #20]
 800b0a4:	e7c4      	b.n	800b030 <_svfiprintf_r+0x130>
 800b0a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e7f0      	b.n	800b092 <_svfiprintf_r+0x192>
 800b0b0:	ab03      	add	r3, sp, #12
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f0 <_svfiprintf_r+0x1f0>)
 800b0b8:	a904      	add	r1, sp, #16
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	f3af 8000 	nop.w
 800b0c0:	1c42      	adds	r2, r0, #1
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	d1d6      	bne.n	800b074 <_svfiprintf_r+0x174>
 800b0c6:	89ab      	ldrh	r3, [r5, #12]
 800b0c8:	065b      	lsls	r3, r3, #25
 800b0ca:	f53f af2d 	bmi.w	800af28 <_svfiprintf_r+0x28>
 800b0ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0d0:	e72c      	b.n	800af2c <_svfiprintf_r+0x2c>
 800b0d2:	ab03      	add	r3, sp, #12
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	4b05      	ldr	r3, [pc, #20]	@ (800b0f0 <_svfiprintf_r+0x1f0>)
 800b0da:	a904      	add	r1, sp, #16
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f000 f879 	bl	800b1d4 <_printf_i>
 800b0e2:	e7ed      	b.n	800b0c0 <_svfiprintf_r+0x1c0>
 800b0e4:	0800b75c 	.word	0x0800b75c
 800b0e8:	0800b766 	.word	0x0800b766
 800b0ec:	00000000 	.word	0x00000000
 800b0f0:	0800ae49 	.word	0x0800ae49
 800b0f4:	0800b762 	.word	0x0800b762

0800b0f8 <_printf_common>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	4616      	mov	r6, r2
 800b0fe:	4698      	mov	r8, r3
 800b100:	688a      	ldr	r2, [r1, #8]
 800b102:	690b      	ldr	r3, [r1, #16]
 800b104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b108:	4293      	cmp	r3, r2
 800b10a:	bfb8      	it	lt
 800b10c:	4613      	movlt	r3, r2
 800b10e:	6033      	str	r3, [r6, #0]
 800b110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b114:	4607      	mov	r7, r0
 800b116:	460c      	mov	r4, r1
 800b118:	b10a      	cbz	r2, 800b11e <_printf_common+0x26>
 800b11a:	3301      	adds	r3, #1
 800b11c:	6033      	str	r3, [r6, #0]
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	0699      	lsls	r1, r3, #26
 800b122:	bf42      	ittt	mi
 800b124:	6833      	ldrmi	r3, [r6, #0]
 800b126:	3302      	addmi	r3, #2
 800b128:	6033      	strmi	r3, [r6, #0]
 800b12a:	6825      	ldr	r5, [r4, #0]
 800b12c:	f015 0506 	ands.w	r5, r5, #6
 800b130:	d106      	bne.n	800b140 <_printf_common+0x48>
 800b132:	f104 0a19 	add.w	sl, r4, #25
 800b136:	68e3      	ldr	r3, [r4, #12]
 800b138:	6832      	ldr	r2, [r6, #0]
 800b13a:	1a9b      	subs	r3, r3, r2
 800b13c:	42ab      	cmp	r3, r5
 800b13e:	dc26      	bgt.n	800b18e <_printf_common+0x96>
 800b140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b144:	6822      	ldr	r2, [r4, #0]
 800b146:	3b00      	subs	r3, #0
 800b148:	bf18      	it	ne
 800b14a:	2301      	movne	r3, #1
 800b14c:	0692      	lsls	r2, r2, #26
 800b14e:	d42b      	bmi.n	800b1a8 <_printf_common+0xb0>
 800b150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b154:	4641      	mov	r1, r8
 800b156:	4638      	mov	r0, r7
 800b158:	47c8      	blx	r9
 800b15a:	3001      	adds	r0, #1
 800b15c:	d01e      	beq.n	800b19c <_printf_common+0xa4>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	6922      	ldr	r2, [r4, #16]
 800b162:	f003 0306 	and.w	r3, r3, #6
 800b166:	2b04      	cmp	r3, #4
 800b168:	bf02      	ittt	eq
 800b16a:	68e5      	ldreq	r5, [r4, #12]
 800b16c:	6833      	ldreq	r3, [r6, #0]
 800b16e:	1aed      	subeq	r5, r5, r3
 800b170:	68a3      	ldr	r3, [r4, #8]
 800b172:	bf0c      	ite	eq
 800b174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b178:	2500      	movne	r5, #0
 800b17a:	4293      	cmp	r3, r2
 800b17c:	bfc4      	itt	gt
 800b17e:	1a9b      	subgt	r3, r3, r2
 800b180:	18ed      	addgt	r5, r5, r3
 800b182:	2600      	movs	r6, #0
 800b184:	341a      	adds	r4, #26
 800b186:	42b5      	cmp	r5, r6
 800b188:	d11a      	bne.n	800b1c0 <_printf_common+0xc8>
 800b18a:	2000      	movs	r0, #0
 800b18c:	e008      	b.n	800b1a0 <_printf_common+0xa8>
 800b18e:	2301      	movs	r3, #1
 800b190:	4652      	mov	r2, sl
 800b192:	4641      	mov	r1, r8
 800b194:	4638      	mov	r0, r7
 800b196:	47c8      	blx	r9
 800b198:	3001      	adds	r0, #1
 800b19a:	d103      	bne.n	800b1a4 <_printf_common+0xac>
 800b19c:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a4:	3501      	adds	r5, #1
 800b1a6:	e7c6      	b.n	800b136 <_printf_common+0x3e>
 800b1a8:	18e1      	adds	r1, r4, r3
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	2030      	movs	r0, #48	@ 0x30
 800b1ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1b2:	4422      	add	r2, r4
 800b1b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1bc:	3302      	adds	r3, #2
 800b1be:	e7c7      	b.n	800b150 <_printf_common+0x58>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	4641      	mov	r1, r8
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	47c8      	blx	r9
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	d0e6      	beq.n	800b19c <_printf_common+0xa4>
 800b1ce:	3601      	adds	r6, #1
 800b1d0:	e7d9      	b.n	800b186 <_printf_common+0x8e>
	...

0800b1d4 <_printf_i>:
 800b1d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d8:	7e0f      	ldrb	r7, [r1, #24]
 800b1da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1dc:	2f78      	cmp	r7, #120	@ 0x78
 800b1de:	4691      	mov	r9, r2
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	469a      	mov	sl, r3
 800b1e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1ea:	d807      	bhi.n	800b1fc <_printf_i+0x28>
 800b1ec:	2f62      	cmp	r7, #98	@ 0x62
 800b1ee:	d80a      	bhi.n	800b206 <_printf_i+0x32>
 800b1f0:	2f00      	cmp	r7, #0
 800b1f2:	f000 80d2 	beq.w	800b39a <_printf_i+0x1c6>
 800b1f6:	2f58      	cmp	r7, #88	@ 0x58
 800b1f8:	f000 80b9 	beq.w	800b36e <_printf_i+0x19a>
 800b1fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b204:	e03a      	b.n	800b27c <_printf_i+0xa8>
 800b206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b20a:	2b15      	cmp	r3, #21
 800b20c:	d8f6      	bhi.n	800b1fc <_printf_i+0x28>
 800b20e:	a101      	add	r1, pc, #4	@ (adr r1, 800b214 <_printf_i+0x40>)
 800b210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b214:	0800b26d 	.word	0x0800b26d
 800b218:	0800b281 	.word	0x0800b281
 800b21c:	0800b1fd 	.word	0x0800b1fd
 800b220:	0800b1fd 	.word	0x0800b1fd
 800b224:	0800b1fd 	.word	0x0800b1fd
 800b228:	0800b1fd 	.word	0x0800b1fd
 800b22c:	0800b281 	.word	0x0800b281
 800b230:	0800b1fd 	.word	0x0800b1fd
 800b234:	0800b1fd 	.word	0x0800b1fd
 800b238:	0800b1fd 	.word	0x0800b1fd
 800b23c:	0800b1fd 	.word	0x0800b1fd
 800b240:	0800b381 	.word	0x0800b381
 800b244:	0800b2ab 	.word	0x0800b2ab
 800b248:	0800b33b 	.word	0x0800b33b
 800b24c:	0800b1fd 	.word	0x0800b1fd
 800b250:	0800b1fd 	.word	0x0800b1fd
 800b254:	0800b3a3 	.word	0x0800b3a3
 800b258:	0800b1fd 	.word	0x0800b1fd
 800b25c:	0800b2ab 	.word	0x0800b2ab
 800b260:	0800b1fd 	.word	0x0800b1fd
 800b264:	0800b1fd 	.word	0x0800b1fd
 800b268:	0800b343 	.word	0x0800b343
 800b26c:	6833      	ldr	r3, [r6, #0]
 800b26e:	1d1a      	adds	r2, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6032      	str	r2, [r6, #0]
 800b274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b27c:	2301      	movs	r3, #1
 800b27e:	e09d      	b.n	800b3bc <_printf_i+0x1e8>
 800b280:	6833      	ldr	r3, [r6, #0]
 800b282:	6820      	ldr	r0, [r4, #0]
 800b284:	1d19      	adds	r1, r3, #4
 800b286:	6031      	str	r1, [r6, #0]
 800b288:	0606      	lsls	r6, r0, #24
 800b28a:	d501      	bpl.n	800b290 <_printf_i+0xbc>
 800b28c:	681d      	ldr	r5, [r3, #0]
 800b28e:	e003      	b.n	800b298 <_printf_i+0xc4>
 800b290:	0645      	lsls	r5, r0, #25
 800b292:	d5fb      	bpl.n	800b28c <_printf_i+0xb8>
 800b294:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b298:	2d00      	cmp	r5, #0
 800b29a:	da03      	bge.n	800b2a4 <_printf_i+0xd0>
 800b29c:	232d      	movs	r3, #45	@ 0x2d
 800b29e:	426d      	negs	r5, r5
 800b2a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2a4:	4859      	ldr	r0, [pc, #356]	@ (800b40c <_printf_i+0x238>)
 800b2a6:	230a      	movs	r3, #10
 800b2a8:	e011      	b.n	800b2ce <_printf_i+0xfa>
 800b2aa:	6821      	ldr	r1, [r4, #0]
 800b2ac:	6833      	ldr	r3, [r6, #0]
 800b2ae:	0608      	lsls	r0, r1, #24
 800b2b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2b4:	d402      	bmi.n	800b2bc <_printf_i+0xe8>
 800b2b6:	0649      	lsls	r1, r1, #25
 800b2b8:	bf48      	it	mi
 800b2ba:	b2ad      	uxthmi	r5, r5
 800b2bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2be:	4853      	ldr	r0, [pc, #332]	@ (800b40c <_printf_i+0x238>)
 800b2c0:	6033      	str	r3, [r6, #0]
 800b2c2:	bf14      	ite	ne
 800b2c4:	230a      	movne	r3, #10
 800b2c6:	2308      	moveq	r3, #8
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2ce:	6866      	ldr	r6, [r4, #4]
 800b2d0:	60a6      	str	r6, [r4, #8]
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	bfa2      	ittt	ge
 800b2d6:	6821      	ldrge	r1, [r4, #0]
 800b2d8:	f021 0104 	bicge.w	r1, r1, #4
 800b2dc:	6021      	strge	r1, [r4, #0]
 800b2de:	b90d      	cbnz	r5, 800b2e4 <_printf_i+0x110>
 800b2e0:	2e00      	cmp	r6, #0
 800b2e2:	d04b      	beq.n	800b37c <_printf_i+0x1a8>
 800b2e4:	4616      	mov	r6, r2
 800b2e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2ea:	fb03 5711 	mls	r7, r3, r1, r5
 800b2ee:	5dc7      	ldrb	r7, [r0, r7]
 800b2f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2f4:	462f      	mov	r7, r5
 800b2f6:	42bb      	cmp	r3, r7
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	d9f4      	bls.n	800b2e6 <_printf_i+0x112>
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d10b      	bne.n	800b318 <_printf_i+0x144>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	07df      	lsls	r7, r3, #31
 800b304:	d508      	bpl.n	800b318 <_printf_i+0x144>
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	6861      	ldr	r1, [r4, #4]
 800b30a:	4299      	cmp	r1, r3
 800b30c:	bfde      	ittt	le
 800b30e:	2330      	movle	r3, #48	@ 0x30
 800b310:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b314:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b318:	1b92      	subs	r2, r2, r6
 800b31a:	6122      	str	r2, [r4, #16]
 800b31c:	f8cd a000 	str.w	sl, [sp]
 800b320:	464b      	mov	r3, r9
 800b322:	aa03      	add	r2, sp, #12
 800b324:	4621      	mov	r1, r4
 800b326:	4640      	mov	r0, r8
 800b328:	f7ff fee6 	bl	800b0f8 <_printf_common>
 800b32c:	3001      	adds	r0, #1
 800b32e:	d14a      	bne.n	800b3c6 <_printf_i+0x1f2>
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	b004      	add	sp, #16
 800b336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	f043 0320 	orr.w	r3, r3, #32
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	4833      	ldr	r0, [pc, #204]	@ (800b410 <_printf_i+0x23c>)
 800b344:	2778      	movs	r7, #120	@ 0x78
 800b346:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	6831      	ldr	r1, [r6, #0]
 800b34e:	061f      	lsls	r7, r3, #24
 800b350:	f851 5b04 	ldr.w	r5, [r1], #4
 800b354:	d402      	bmi.n	800b35c <_printf_i+0x188>
 800b356:	065f      	lsls	r7, r3, #25
 800b358:	bf48      	it	mi
 800b35a:	b2ad      	uxthmi	r5, r5
 800b35c:	6031      	str	r1, [r6, #0]
 800b35e:	07d9      	lsls	r1, r3, #31
 800b360:	bf44      	itt	mi
 800b362:	f043 0320 	orrmi.w	r3, r3, #32
 800b366:	6023      	strmi	r3, [r4, #0]
 800b368:	b11d      	cbz	r5, 800b372 <_printf_i+0x19e>
 800b36a:	2310      	movs	r3, #16
 800b36c:	e7ac      	b.n	800b2c8 <_printf_i+0xf4>
 800b36e:	4827      	ldr	r0, [pc, #156]	@ (800b40c <_printf_i+0x238>)
 800b370:	e7e9      	b.n	800b346 <_printf_i+0x172>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	f023 0320 	bic.w	r3, r3, #32
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	e7f6      	b.n	800b36a <_printf_i+0x196>
 800b37c:	4616      	mov	r6, r2
 800b37e:	e7bd      	b.n	800b2fc <_printf_i+0x128>
 800b380:	6833      	ldr	r3, [r6, #0]
 800b382:	6825      	ldr	r5, [r4, #0]
 800b384:	6961      	ldr	r1, [r4, #20]
 800b386:	1d18      	adds	r0, r3, #4
 800b388:	6030      	str	r0, [r6, #0]
 800b38a:	062e      	lsls	r6, r5, #24
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	d501      	bpl.n	800b394 <_printf_i+0x1c0>
 800b390:	6019      	str	r1, [r3, #0]
 800b392:	e002      	b.n	800b39a <_printf_i+0x1c6>
 800b394:	0668      	lsls	r0, r5, #25
 800b396:	d5fb      	bpl.n	800b390 <_printf_i+0x1bc>
 800b398:	8019      	strh	r1, [r3, #0]
 800b39a:	2300      	movs	r3, #0
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	4616      	mov	r6, r2
 800b3a0:	e7bc      	b.n	800b31c <_printf_i+0x148>
 800b3a2:	6833      	ldr	r3, [r6, #0]
 800b3a4:	1d1a      	adds	r2, r3, #4
 800b3a6:	6032      	str	r2, [r6, #0]
 800b3a8:	681e      	ldr	r6, [r3, #0]
 800b3aa:	6862      	ldr	r2, [r4, #4]
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7f4 ffb6 	bl	8000320 <memchr>
 800b3b4:	b108      	cbz	r0, 800b3ba <_printf_i+0x1e6>
 800b3b6:	1b80      	subs	r0, r0, r6
 800b3b8:	6060      	str	r0, [r4, #4]
 800b3ba:	6863      	ldr	r3, [r4, #4]
 800b3bc:	6123      	str	r3, [r4, #16]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c4:	e7aa      	b.n	800b31c <_printf_i+0x148>
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	4632      	mov	r2, r6
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	4640      	mov	r0, r8
 800b3ce:	47d0      	blx	sl
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d0ad      	beq.n	800b330 <_printf_i+0x15c>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	079b      	lsls	r3, r3, #30
 800b3d8:	d413      	bmi.n	800b402 <_printf_i+0x22e>
 800b3da:	68e0      	ldr	r0, [r4, #12]
 800b3dc:	9b03      	ldr	r3, [sp, #12]
 800b3de:	4298      	cmp	r0, r3
 800b3e0:	bfb8      	it	lt
 800b3e2:	4618      	movlt	r0, r3
 800b3e4:	e7a6      	b.n	800b334 <_printf_i+0x160>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	47d0      	blx	sl
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d09d      	beq.n	800b330 <_printf_i+0x15c>
 800b3f4:	3501      	adds	r5, #1
 800b3f6:	68e3      	ldr	r3, [r4, #12]
 800b3f8:	9903      	ldr	r1, [sp, #12]
 800b3fa:	1a5b      	subs	r3, r3, r1
 800b3fc:	42ab      	cmp	r3, r5
 800b3fe:	dcf2      	bgt.n	800b3e6 <_printf_i+0x212>
 800b400:	e7eb      	b.n	800b3da <_printf_i+0x206>
 800b402:	2500      	movs	r5, #0
 800b404:	f104 0619 	add.w	r6, r4, #25
 800b408:	e7f5      	b.n	800b3f6 <_printf_i+0x222>
 800b40a:	bf00      	nop
 800b40c:	0800b76d 	.word	0x0800b76d
 800b410:	0800b77e 	.word	0x0800b77e

0800b414 <memmove>:
 800b414:	4288      	cmp	r0, r1
 800b416:	b510      	push	{r4, lr}
 800b418:	eb01 0402 	add.w	r4, r1, r2
 800b41c:	d902      	bls.n	800b424 <memmove+0x10>
 800b41e:	4284      	cmp	r4, r0
 800b420:	4623      	mov	r3, r4
 800b422:	d807      	bhi.n	800b434 <memmove+0x20>
 800b424:	1e43      	subs	r3, r0, #1
 800b426:	42a1      	cmp	r1, r4
 800b428:	d008      	beq.n	800b43c <memmove+0x28>
 800b42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b42e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b432:	e7f8      	b.n	800b426 <memmove+0x12>
 800b434:	4402      	add	r2, r0
 800b436:	4601      	mov	r1, r0
 800b438:	428a      	cmp	r2, r1
 800b43a:	d100      	bne.n	800b43e <memmove+0x2a>
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b446:	e7f7      	b.n	800b438 <memmove+0x24>

0800b448 <_sbrk_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d06      	ldr	r5, [pc, #24]	@ (800b464 <_sbrk_r+0x1c>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f5 ff06 	bl	8001264 <_sbrk>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_sbrk_r+0x1a>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_sbrk_r+0x1a>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	24000d58 	.word	0x24000d58

0800b468 <memcpy>:
 800b468:	440a      	add	r2, r1
 800b46a:	4291      	cmp	r1, r2
 800b46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b470:	d100      	bne.n	800b474 <memcpy+0xc>
 800b472:	4770      	bx	lr
 800b474:	b510      	push	{r4, lr}
 800b476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b47e:	4291      	cmp	r1, r2
 800b480:	d1f9      	bne.n	800b476 <memcpy+0xe>
 800b482:	bd10      	pop	{r4, pc}

0800b484 <_realloc_r>:
 800b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	4680      	mov	r8, r0
 800b48a:	4615      	mov	r5, r2
 800b48c:	460c      	mov	r4, r1
 800b48e:	b921      	cbnz	r1, 800b49a <_realloc_r+0x16>
 800b490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b494:	4611      	mov	r1, r2
 800b496:	f7ff bc4b 	b.w	800ad30 <_malloc_r>
 800b49a:	b92a      	cbnz	r2, 800b4a8 <_realloc_r+0x24>
 800b49c:	f7ff fbdc 	bl	800ac58 <_free_r>
 800b4a0:	2400      	movs	r4, #0
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a8:	f000 f81a 	bl	800b4e0 <_malloc_usable_size_r>
 800b4ac:	4285      	cmp	r5, r0
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	d802      	bhi.n	800b4b8 <_realloc_r+0x34>
 800b4b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b4b6:	d8f4      	bhi.n	800b4a2 <_realloc_r+0x1e>
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	f7ff fc38 	bl	800ad30 <_malloc_r>
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d0ec      	beq.n	800b4a0 <_realloc_r+0x1c>
 800b4c6:	42b5      	cmp	r5, r6
 800b4c8:	462a      	mov	r2, r5
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	bf28      	it	cs
 800b4ce:	4632      	movcs	r2, r6
 800b4d0:	f7ff ffca 	bl	800b468 <memcpy>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	f7ff fbbe 	bl	800ac58 <_free_r>
 800b4dc:	463c      	mov	r4, r7
 800b4de:	e7e0      	b.n	800b4a2 <_realloc_r+0x1e>

0800b4e0 <_malloc_usable_size_r>:
 800b4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4e4:	1f18      	subs	r0, r3, #4
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	bfbc      	itt	lt
 800b4ea:	580b      	ldrlt	r3, [r1, r0]
 800b4ec:	18c0      	addlt	r0, r0, r3
 800b4ee:	4770      	bx	lr

0800b4f0 <_init>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	bf00      	nop
 800b4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f6:	bc08      	pop	{r3}
 800b4f8:	469e      	mov	lr, r3
 800b4fa:	4770      	bx	lr

0800b4fc <_fini>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	bf00      	nop
 800b500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b502:	bc08      	pop	{r3}
 800b504:	469e      	mov	lr, r3
 800b506:	4770      	bx	lr
