
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  0000a1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800815c  0800815c  0000915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008164  08008164  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008164  08008164  00009164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008168  08008168  00009168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800816c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1ec  2**0
                  CONTENTS
 10 .bss          000013f8  200001f0  200001f0  0000a1f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200015e8  200015e8  0000a1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e5f  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d94  00000000  00000000  0001b07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000000e2  00000000  00000000  0001de0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d68  00000000  00000000  0001def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000abd  00000000  00000000  0001ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000236b9  00000000  00000000  0001f71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012165  00000000  00000000  00042dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6f7c  00000000  00000000  00054f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0011beb7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003bac  00000000  00000000  0011befc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  0011faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008038 	.word	0x08008038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08008038 	.word	0x08008038

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <PressKeycodes>:
   MatrixState[i] = pinState; // High 1, Low 0
}

void PressKeycodes(int i)
{
    if(Keycode[LayerState][i] >= 10000)
 8000570:	4b55      	ldr	r3, [pc, #340]	@ (80006c8 <PressKeycodes+0x158>)
 8000572:	4956      	ldr	r1, [pc, #344]	@ (80006cc <PressKeycodes+0x15c>)
{
 8000574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(Keycode[LayerState][i] >= 10000)
 8000578:	681d      	ldr	r5, [r3, #0]
 800057a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800057e:	4403      	add	r3, r0
 8000580:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000584:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000588:	4293      	cmp	r3, r2
{
 800058a:	b09a      	sub	sp, #104	@ 0x68
    if(Keycode[LayerState][i] >= 10000)
 800058c:	d824      	bhi.n	80005d8 <PressKeycodes+0x68>
    	LayerState = 1; // Layer1 when pressed
    }
    else
    {
    	TempKeycode = 0;
    	TempKeycode = Keycode[LayerState][i];
 800058e:	4950      	ldr	r1, [pc, #320]	@ (80006d0 <PressKeycodes+0x160>)

        if (keyboardReport.Keycode1 == 0x00)
 8000590:	4a50      	ldr	r2, [pc, #320]	@ (80006d4 <PressKeycodes+0x164>)
    	TempKeycode = Keycode[LayerState][i];
 8000592:	600b      	str	r3, [r1, #0]
        if (keyboardReport.Keycode1 == 0x00)
 8000594:	7891      	ldrb	r1, [r2, #2]
 8000596:	b9c9      	cbnz	r1, 80005cc <PressKeycodes+0x5c>
        {
            keyboardReport.Keycode1 = TempKeycode;
 8000598:	7093      	strb	r3, [r2, #2]
        else if (keyboardReport.Keycode6 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode5 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
        {
            keyboardReport.Keycode6 = TempKeycode;
        }

        WhichLayer[i] = LayerState;
 800059a:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <PressKeycodes+0x168>)

		char message4[100];
		sprintf(message4, "PressKeycodes \n\r");
 800059c:	4c4f      	ldr	r4, [pc, #316]	@ (80006dc <PressKeycodes+0x16c>)
        WhichLayer[i] = LayerState;
 800059e:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
		sprintf(message4, "PressKeycodes \n\r");
 80005a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005a4:	f10d 0c04 	add.w	ip, sp, #4
 80005a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	f88c 3000 	strb.w	r3, [ip]
		HAL_UART_Transmit(&huart4, (uint8_t*)message4, strlen(message4), HAL_MAX_DELAY);
 80005b2:	a801      	add	r0, sp, #4
 80005b4:	f7ff fe0c 	bl	80001d0 <strlen>
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	b282      	uxth	r2, r0
 80005be:	a901      	add	r1, sp, #4
 80005c0:	4847      	ldr	r0, [pc, #284]	@ (80006e0 <PressKeycodes+0x170>)
 80005c2:	f002 fe7d 	bl	80032c0 <HAL_UART_Transmit>
    }
}
 80005c6:	b01a      	add	sp, #104	@ 0x68
 80005c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if (keyboardReport.Keycode2 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 80005cc:	78d4      	ldrb	r4, [r2, #3]
 80005ce:	b9bc      	cbnz	r4, 8000600 <PressKeycodes+0x90>
 80005d0:	428b      	cmp	r3, r1
 80005d2:	d034      	beq.n	800063e <PressKeycodes+0xce>
            keyboardReport.Keycode2 = TempKeycode;
 80005d4:	70d3      	strb	r3, [r2, #3]
 80005d6:	e7e0      	b.n	800059a <PressKeycodes+0x2a>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i]-10000];
 80005d8:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80005dc:	4a41      	ldr	r2, [pc, #260]	@ (80006e4 <PressKeycodes+0x174>)
 80005de:	4942      	ldr	r1, [pc, #264]	@ (80006e8 <PressKeycodes+0x178>)
        sprintf(message1, "ModifierPress \n\r");
 80005e0:	4d42      	ldr	r5, [pc, #264]	@ (80006ec <PressKeycodes+0x17c>)
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i]-10000];
 80005e2:	3b10      	subs	r3, #16
        sprintf(message1, "ModifierPress \n\r");
 80005e4:	ac01      	add	r4, sp, #4
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i]-10000];
 80005e6:	f811 1023 	ldrb.w	r1, [r1, r3, lsl #2]
 80005ea:	7813      	ldrb	r3, [r2, #0]
 80005ec:	430b      	orrs	r3, r1
 80005ee:	7013      	strb	r3, [r2, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 80005f0:	4a38      	ldr	r2, [pc, #224]	@ (80006d4 <PressKeycodes+0x164>)
 80005f2:	7013      	strb	r3, [r2, #0]
        sprintf(message1, "ModifierPress \n\r");
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart4, (uint8_t*)message1, strlen(message1), HAL_MAX_DELAY);
 80005fc:	a801      	add	r0, sp, #4
 80005fe:	e7d9      	b.n	80005b4 <PressKeycodes+0x44>
        else if (keyboardReport.Keycode3 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000600:	7916      	ldrb	r6, [r2, #4]
 8000602:	b9f6      	cbnz	r6, 8000642 <PressKeycodes+0xd2>
 8000604:	42a3      	cmp	r3, r4
 8000606:	d131      	bne.n	800066c <PressKeycodes+0xfc>
        else if (keyboardReport.Keycode4 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000608:	7957      	ldrb	r7, [r2, #5]
        else if (keyboardReport.Keycode5 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 800060a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800060e:	f1bc 0f00 	cmp.w	ip, #0
 8000612:	d102      	bne.n	800061a <PressKeycodes+0xaa>
 8000614:	42bb      	cmp	r3, r7
 8000616:	46b8      	mov	r8, r7
 8000618:	d11f      	bne.n	800065a <PressKeycodes+0xea>
        else if (keyboardReport.Keycode6 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode5 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 800061a:	f892 e007 	ldrb.w	lr, [r2, #7]
 800061e:	f1be 0f00 	cmp.w	lr, #0
 8000622:	d1ba      	bne.n	800059a <PressKeycodes+0x2a>
 8000624:	4563      	cmp	r3, ip
 8000626:	d0b8      	beq.n	800059a <PressKeycodes+0x2a>
 8000628:	42bb      	cmp	r3, r7
 800062a:	d0b6      	beq.n	800059a <PressKeycodes+0x2a>
 800062c:	42b3      	cmp	r3, r6
 800062e:	d0b4      	beq.n	800059a <PressKeycodes+0x2a>
        else if (keyboardReport.Keycode3 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000630:	46a6      	mov	lr, r4
        else if (keyboardReport.Keycode6 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode5 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000632:	4573      	cmp	r3, lr
 8000634:	d0b1      	beq.n	800059a <PressKeycodes+0x2a>
 8000636:	428b      	cmp	r3, r1
            keyboardReport.Keycode6 = TempKeycode;
 8000638:	bf18      	it	ne
 800063a:	71d3      	strbne	r3, [r2, #7]
 800063c:	e7ad      	b.n	800059a <PressKeycodes+0x2a>
        else if (keyboardReport.Keycode3 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 800063e:	7916      	ldrb	r6, [r2, #4]
 8000640:	b1c6      	cbz	r6, 8000674 <PressKeycodes+0x104>
        else if (keyboardReport.Keycode4 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000642:	7957      	ldrb	r7, [r2, #5]
 8000644:	2f00      	cmp	r7, #0
 8000646:	d1e0      	bne.n	800060a <PressKeycodes+0x9a>
 8000648:	42b3      	cmp	r3, r6
 800064a:	46b0      	mov	r8, r6
 800064c:	d120      	bne.n	8000690 <PressKeycodes+0x120>
        else if (keyboardReport.Keycode5 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 800064e:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000652:	f1bc 0f00 	cmp.w	ip, #0
 8000656:	d1e0      	bne.n	800061a <PressKeycodes+0xaa>
 8000658:	46b8      	mov	r8, r7
 800065a:	42b3      	cmp	r3, r6
 800065c:	d01f      	beq.n	800069e <PressKeycodes+0x12e>
 800065e:	42a3      	cmp	r3, r4
 8000660:	46a6      	mov	lr, r4
 8000662:	d01c      	beq.n	800069e <PressKeycodes+0x12e>
 8000664:	428b      	cmp	r3, r1
 8000666:	d020      	beq.n	80006aa <PressKeycodes+0x13a>
            keyboardReport.Keycode5 = TempKeycode;
 8000668:	7193      	strb	r3, [r2, #6]
 800066a:	e796      	b.n	800059a <PressKeycodes+0x2a>
        else if (keyboardReport.Keycode3 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 800066c:	428b      	cmp	r3, r1
 800066e:	d025      	beq.n	80006bc <PressKeycodes+0x14c>
            keyboardReport.Keycode3 = TempKeycode;
 8000670:	7113      	strb	r3, [r2, #4]
 8000672:	e792      	b.n	800059a <PressKeycodes+0x2a>
        else if (keyboardReport.Keycode4 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000674:	7957      	ldrb	r7, [r2, #5]
 8000676:	2f00      	cmp	r7, #0
 8000678:	d1c7      	bne.n	800060a <PressKeycodes+0x9a>
 800067a:	46b8      	mov	r8, r7
 800067c:	46be      	mov	lr, r7
        else if (keyboardReport.Keycode5 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 800067e:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000682:	f1bc 0f00 	cmp.w	ip, #0
 8000686:	d10d      	bne.n	80006a4 <PressKeycodes+0x134>
 8000688:	4543      	cmp	r3, r8
 800068a:	d00b      	beq.n	80006a4 <PressKeycodes+0x134>
 800068c:	46e0      	mov	r8, ip
 800068e:	e7e9      	b.n	8000664 <PressKeycodes+0xf4>
        else if (keyboardReport.Keycode4 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 8000690:	42a3      	cmp	r3, r4
 8000692:	46a6      	mov	lr, r4
 8000694:	d0b9      	beq.n	800060a <PressKeycodes+0x9a>
 8000696:	428b      	cmp	r3, r1
 8000698:	d00e      	beq.n	80006b8 <PressKeycodes+0x148>
            keyboardReport.Keycode4 = TempKeycode;
 800069a:	7153      	strb	r3, [r2, #5]
 800069c:	e77d      	b.n	800059a <PressKeycodes+0x2a>
 800069e:	f04f 0c00 	mov.w	ip, #0
 80006a2:	e7ba      	b.n	800061a <PressKeycodes+0xaa>
        else if (keyboardReport.Keycode5 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 80006a4:	463e      	mov	r6, r7
 80006a6:	2700      	movs	r7, #0
 80006a8:	e7b7      	b.n	800061a <PressKeycodes+0xaa>
        else if (keyboardReport.Keycode6 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode5 && Keycode[LayerState][i] != keyboardReport.Keycode4 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 80006aa:	79d4      	ldrb	r4, [r2, #7]
 80006ac:	2c00      	cmp	r4, #0
 80006ae:	f47f af74 	bne.w	800059a <PressKeycodes+0x2a>
 80006b2:	4543      	cmp	r3, r8
 80006b4:	d1bd      	bne.n	8000632 <PressKeycodes+0xc2>
 80006b6:	e770      	b.n	800059a <PressKeycodes+0x2a>
 80006b8:	4637      	mov	r7, r6
 80006ba:	e7e0      	b.n	800067e <PressKeycodes+0x10e>
        else if (keyboardReport.Keycode4 == 0x00 && Keycode[LayerState][i] != keyboardReport.Keycode3 && Keycode[LayerState][i] != keyboardReport.Keycode2 && Keycode[LayerState][i] != keyboardReport.Keycode1)
 80006bc:	7957      	ldrb	r7, [r2, #5]
 80006be:	2f00      	cmp	r7, #0
 80006c0:	d1a3      	bne.n	800060a <PressKeycodes+0x9a>
 80006c2:	46a6      	mov	lr, r4
 80006c4:	46b8      	mov	r8, r7
 80006c6:	e7da      	b.n	800067e <PressKeycodes+0x10e>
 80006c8:	20000224 	.word	0x20000224
 80006cc:	20000020 	.word	0x20000020
 80006d0:	2000020c 	.word	0x2000020c
 80006d4:	200002f8 	.word	0x200002f8
 80006d8:	20000210 	.word	0x20000210
 80006dc:	080080ac 	.word	0x080080ac
 80006e0:	200002b0 	.word	0x200002b0
 80006e4:	20000250 	.word	0x20000250
 80006e8:	20000000 	.word	0x20000000
 80006ec:	08008098 	.word	0x08008098

080006f0 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
    if(Keycode[LayerState][i] >= 10000)
 80006f0:	4b38      	ldr	r3, [pc, #224]	@ (80007d4 <ReleaseKeycodes+0xe4>)
 80006f2:	4939      	ldr	r1, [pc, #228]	@ (80007d8 <ReleaseKeycodes+0xe8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
 80006fa:	b530      	push	{r4, r5, lr}
    if(Keycode[LayerState][i] >= 10000)
 80006fc:	4403      	add	r3, r0
 80006fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000702:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000706:	4293      	cmp	r3, r2
{
 8000708:	b09b      	sub	sp, #108	@ 0x6c
    if(Keycode[LayerState][i] >= 10000)
 800070a:	d841      	bhi.n	8000790 <ReleaseKeycodes+0xa0>
    	LayerState = 0; // Layer0 when released
    }
    else
    {
    	TempKeycode = 0;
    	TempKeycode = Keycode[WhichLayer[i]][i];
 800070c:	4a33      	ldr	r2, [pc, #204]	@ (80007dc <ReleaseKeycodes+0xec>)

        if (keyboardReport.Keycode1 == TempKeycode)
 800070e:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <ReleaseKeycodes+0xf0>)
    	TempKeycode = Keycode[WhichLayer[i]][i];
 8000710:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000714:	4c33      	ldr	r4, [pc, #204]	@ (80007e4 <ReleaseKeycodes+0xf4>)
 8000716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800071a:	4402      	add	r2, r0
        if (keyboardReport.Keycode1 == TempKeycode)
 800071c:	7898      	ldrb	r0, [r3, #2]
    	TempKeycode = Keycode[WhichLayer[i]][i];
 800071e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000722:	6022      	str	r2, [r4, #0]
        if (keyboardReport.Keycode1 == TempKeycode)
 8000724:	4282      	cmp	r2, r0
        {
            keyboardReport.Keycode1 = 0x00;
 8000726:	bf04      	itt	eq
 8000728:	2100      	moveq	r1, #0
 800072a:	7099      	strbeq	r1, [r3, #2]
        }
        if (keyboardReport.Keycode2 == TempKeycode)
 800072c:	78d9      	ldrb	r1, [r3, #3]
        {
            keyboardReport.Keycode6 = 0x00;
        }

		char message5[100];
		sprintf(message5, "ReleaseKeycodes \n\r");
 800072e:	4c2e      	ldr	r4, [pc, #184]	@ (80007e8 <ReleaseKeycodes+0xf8>)
        if (keyboardReport.Keycode2 == TempKeycode)
 8000730:	428a      	cmp	r2, r1
            keyboardReport.Keycode2 = 0x00;
 8000732:	bf04      	itt	eq
 8000734:	2100      	moveq	r1, #0
 8000736:	70d9      	strbeq	r1, [r3, #3]
        if (keyboardReport.Keycode3 == TempKeycode)
 8000738:	7919      	ldrb	r1, [r3, #4]
 800073a:	428a      	cmp	r2, r1
            keyboardReport.Keycode3 = 0x00;
 800073c:	bf04      	itt	eq
 800073e:	2100      	moveq	r1, #0
 8000740:	7119      	strbeq	r1, [r3, #4]
        if (keyboardReport.Keycode4 == TempKeycode)
 8000742:	7959      	ldrb	r1, [r3, #5]
 8000744:	428a      	cmp	r2, r1
            keyboardReport.Keycode4 = 0x00;
 8000746:	bf04      	itt	eq
 8000748:	2100      	moveq	r1, #0
 800074a:	7159      	strbeq	r1, [r3, #5]
        if (keyboardReport.Keycode5 == TempKeycode)
 800074c:	7999      	ldrb	r1, [r3, #6]
 800074e:	428a      	cmp	r2, r1
            keyboardReport.Keycode5 = 0x00;
 8000750:	bf04      	itt	eq
 8000752:	2100      	moveq	r1, #0
 8000754:	7199      	strbeq	r1, [r3, #6]
        if (keyboardReport.Keycode6 == TempKeycode)
 8000756:	79d9      	ldrb	r1, [r3, #7]
 8000758:	428a      	cmp	r2, r1
            keyboardReport.Keycode6 = 0x00;
 800075a:	bf04      	itt	eq
 800075c:	2200      	moveq	r2, #0
 800075e:	71da      	strbeq	r2, [r3, #7]
		sprintf(message5, "ReleaseKeycodes \n\r");
 8000760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000762:	f10d 0c04 	add.w	ip, sp, #4
 8000766:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f82c 3b02 	strh.w	r3, [ip], #2
 8000770:	0c1a      	lsrs	r2, r3, #16
 8000772:	f88c 2000 	strb.w	r2, [ip]
		HAL_UART_Transmit(&huart4, (uint8_t*)message5, strlen(message5), HAL_MAX_DELAY);
 8000776:	a801      	add	r0, sp, #4
 8000778:	f7ff fd2a 	bl	80001d0 <strlen>
 800077c:	4602      	mov	r2, r0
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	b292      	uxth	r2, r2
 8000784:	a901      	add	r1, sp, #4
 8000786:	4819      	ldr	r0, [pc, #100]	@ (80007ec <ReleaseKeycodes+0xfc>)
 8000788:	f002 fd9a 	bl	80032c0 <HAL_UART_Transmit>
    }
}
 800078c:	b01b      	add	sp, #108	@ 0x6c
 800078e:	bd30      	pop	{r4, r5, pc}
		Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i]-10000]);
 8000790:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000794:	4a16      	ldr	r2, [pc, #88]	@ (80007f0 <ReleaseKeycodes+0x100>)
 8000796:	4917      	ldr	r1, [pc, #92]	@ (80007f4 <ReleaseKeycodes+0x104>)
        sprintf(message2, "ModifierRelease \n\r");
 8000798:	4d17      	ldr	r5, [pc, #92]	@ (80007f8 <ReleaseKeycodes+0x108>)
		Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i]-10000]);
 800079a:	3b10      	subs	r3, #16
        sprintf(message2, "ModifierRelease \n\r");
 800079c:	ac01      	add	r4, sp, #4
		Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i]-10000]);
 800079e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80007a2:	7813      	ldrb	r3, [r2, #0]
 80007a4:	ea23 0301 	bic.w	r3, r3, r1
 80007a8:	7013      	strb	r3, [r2, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <ReleaseKeycodes+0xf0>)
 80007ac:	7013      	strb	r3, [r2, #0]
        sprintf(message2, "ModifierRelease \n\r");
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	682b      	ldr	r3, [r5, #0]
 80007b4:	f824 3b02 	strh.w	r3, [r4], #2
 80007b8:	0c1a      	lsrs	r2, r3, #16
 80007ba:	7022      	strb	r2, [r4, #0]
        HAL_UART_Transmit(&huart4, (uint8_t*)message2, strlen(message2), HAL_MAX_DELAY);
 80007bc:	a801      	add	r0, sp, #4
 80007be:	f7ff fd07 	bl	80001d0 <strlen>
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	b282      	uxth	r2, r0
 80007c8:	a901      	add	r1, sp, #4
 80007ca:	4808      	ldr	r0, [pc, #32]	@ (80007ec <ReleaseKeycodes+0xfc>)
 80007cc:	f002 fd78 	bl	80032c0 <HAL_UART_Transmit>
}
 80007d0:	b01b      	add	sp, #108	@ 0x6c
 80007d2:	bd30      	pop	{r4, r5, pc}
 80007d4:	20000224 	.word	0x20000224
 80007d8:	20000020 	.word	0x20000020
 80007dc:	20000210 	.word	0x20000210
 80007e0:	200002f8 	.word	0x200002f8
 80007e4:	2000020c 	.word	0x2000020c
 80007e8:	080080d4 	.word	0x080080d4
 80007ec:	200002b0 	.word	0x200002b0
 80007f0:	20000250 	.word	0x20000250
 80007f4:	20000000 	.word	0x20000000
 80007f8:	080080c0 	.word	0x080080c0

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	2300      	movs	r3, #0
{
 8000800:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000806:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800080e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4922      	ldr	r1, [pc, #136]	@ (800089c <SystemClock_Config+0xa0>)
 8000814:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000816:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081a:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000820:	6408      	str	r0, [r1, #64]	@ 0x40
 8000822:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000824:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000828:	9101      	str	r1, [sp, #4]
 800082a:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	6813      	ldr	r3, [r2, #0]
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2001      	movs	r0, #1
 800083a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000842:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000846:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000848:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000852:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2107      	movs	r1, #7
 8000856:	2002      	movs	r0, #2
 8000858:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 800085c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 336;
 800085e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000866:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f002 f842 	bl	80028f0 <HAL_RCC_OscConfig>
 800086c:	b108      	cbz	r0, 8000872 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	220f      	movs	r2, #15
 8000874:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087a:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000882:	a803      	add	r0, sp, #12
 8000884:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000886:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088a:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088c:	f002 faa8 	bl	8002de0 <HAL_RCC_ClockConfig>
 8000890:	b108      	cbz	r0, 8000896 <SystemClock_Config+0x9a>
 8000892:	b672      	cpsid	i
  while (1)
 8000894:	e7fe      	b.n	8000894 <SystemClock_Config+0x98>
}
 8000896:	b015      	add	sp, #84	@ 0x54
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <main>:
{
 80008a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2400      	movs	r4, #0
{
 80008aa:	b0a1      	sub	sp, #132	@ 0x84
  HAL_Init();
 80008ac:	f000 fa8a 	bl	8000dc4 <HAL_Init>
  SystemClock_Config();
 80008b0:	f7ff ffa4 	bl	80007fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b8:	4b6f      	ldr	r3, [pc, #444]	@ (8000a78 <main+0x1d4>)
 80008ba:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80008be:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <main+0x1d8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008cc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80008d0:	9201      	str	r2, [sp, #4]
 80008d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d4:	9402      	str	r4, [sp, #8]
 80008d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d8:	f042 0204 	orr.w	r2, r2, #4
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80008de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008e0:	f002 0204 	and.w	r2, r2, #4
 80008e4:	9202      	str	r2, [sp, #8]
 80008e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	9403      	str	r4, [sp, #12]
 80008ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ec:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	432a      	orrs	r2, r5
 80008f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80008f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008f4:	402a      	ands	r2, r5
 80008f6:	9203      	str	r2, [sp, #12]
 80008f8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	9404      	str	r4, [sp, #16]
 80008fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008fe:	f042 0202 	orr.w	r2, r2, #2
 8000902:	631a      	str	r2, [r3, #48]	@ 0x30
 8000904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000906:	f002 0202 	and.w	r2, r2, #2
 800090a:	9204      	str	r2, [sp, #16]
 800090c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	9405      	str	r4, [sp, #20]
 8000910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000912:	f042 0208 	orr.w	r2, r2, #8
 8000916:	631a      	str	r2, [r3, #48]	@ 0x30
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000922:	2302      	movs	r3, #2
 8000924:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	9508      	str	r5, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f000 fbf3 	bl	8001114 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800092e:	223b      	movs	r2, #59	@ 0x3b
 8000930:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000932:	4853      	ldr	r0, [pc, #332]	@ (8000a80 <main+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000934:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000938:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f000 fbea 	bl	8001114 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000940:	f006 f902 	bl	8006b48 <MX_USB_DEVICE_Init>
  huart4.Instance = UART4;
 8000944:	4a4f      	ldr	r2, [pc, #316]	@ (8000a84 <main+0x1e0>)
 8000946:	4b50      	ldr	r3, [pc, #320]	@ (8000a88 <main+0x1e4>)
  huart4.Init.BaudRate = 115200;
 8000948:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart4.Init.Mode = UART_MODE_TX;
 800094c:	2508      	movs	r5, #8
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800094e:	4610      	mov	r0, r2
  huart4.Init.BaudRate = 115200;
 8000950:	e9c2 3600 	strd	r3, r6, [r2]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000954:	e9c2 4402 	strd	r4, r4, [r2, #8]
  huart4.Init.Mode = UART_MODE_TX;
 8000958:	e9c2 4504 	strd	r4, r5, [r2, #16]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	e9c2 4406 	strd	r4, r4, [r2, #24]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000960:	f002 fc5e 	bl	8003220 <HAL_UART_Init>
 8000964:	b108      	cbz	r0, 800096a <main+0xc6>
 8000966:	b672      	cpsid	i
  while (1)
 8000968:	e7fe      	b.n	8000968 <main+0xc4>
  huart5.Instance = UART5;
 800096a:	4603      	mov	r3, r0
 800096c:	4847      	ldr	r0, [pc, #284]	@ (8000a8c <main+0x1e8>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	e9c0 6301 	strd	r6, r3, [r0, #4]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000972:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart5.Init.Mode = UART_MODE_TX;
 8000976:	e9c0 5305 	strd	r5, r3, [r0, #20]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800097a:	61c3      	str	r3, [r0, #28]
  huart5.Instance = UART5;
 800097c:	4b44      	ldr	r3, [pc, #272]	@ (8000a90 <main+0x1ec>)
 800097e:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000980:	f002 fc4e 	bl	8003220 <HAL_UART_Init>
 8000984:	2800      	cmp	r0, #0
 8000986:	d160      	bne.n	8000a4a <main+0x1a6>
 8000988:	f8df a130 	ldr.w	sl, [pc, #304]	@ 8000abc <main+0x218>
 800098c:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 8000ac0 <main+0x21c>
 8000990:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8000ac4 <main+0x220>
 8000994:	4f3f      	ldr	r7, [pc, #252]	@ (8000a94 <main+0x1f0>)
   Timer = HAL_GetTick();
 8000996:	f000 fa7b 	bl	8000e90 <HAL_GetTick>
   if ( Timer - LastTimer >= 1000)
 800099a:	f8da 3000 	ldr.w	r3, [sl]
   Timer = HAL_GetTick();
 800099e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a98 <main+0x1f4>)
   if ( Timer - LastTimer >= 1000)
 80009a0:	1ac3      	subs	r3, r0, r3
 80009a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
   Timer = HAL_GetTick();
 80009a6:	6010      	str	r0, [r2, #0]
      sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r",Timer,Scanrate);
 80009a8:	f8d9 3000 	ldr.w	r3, [r9]
   if ( Timer - LastTimer >= 1000)
 80009ac:	da4f      	bge.n	8000a4e <main+0x1aa>
   Scanrate = Scanrate + 1;
 80009ae:	3301      	adds	r3, #1
   memcpy(LastMatrixState, MatrixState, sizeof(MatrixState));
 80009b0:	4d3a      	ldr	r5, [pc, #232]	@ (8000a9c <main+0x1f8>)
   Scanrate = Scanrate + 1;
 80009b2:	f8c9 3000 	str.w	r3, [r9]
   memcpy(LastMatrixState, MatrixState, sizeof(MatrixState));
 80009b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b8:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8000aa8 <main+0x204>
 80009bc:	4c38      	ldr	r4, [pc, #224]	@ (8000aa0 <main+0x1fc>)
 80009be:	4e39      	ldr	r6, [pc, #228]	@ (8000aa4 <main+0x200>)
 80009c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009c4:	f855 3910 	ldr.w	r3, [r5], #-16
 80009c8:	f8cc 3000 	str.w	r3, [ip]
 80009cc:	46ab      	mov	fp, r5
   pinState = HAL_GPIO_ReadPin(GPIO_ABC[i], GPIO_Num[i]);
 80009ce:	f856 1b04 	ldr.w	r1, [r6], #4
 80009d2:	f854 0b04 	ldr.w	r0, [r4], #4
 80009d6:	b289      	uxth	r1, r1
 80009d8:	f000 fd38 	bl	800144c <HAL_GPIO_ReadPin>
   for (int i=0; i<KEY_NUMBER; ++i)
 80009dc:	4544      	cmp	r4, r8
   MatrixState[i] = pinState; // High 1, Low 0
 80009de:	f84b 0b04 	str.w	r0, [fp], #4
   pinState = HAL_GPIO_ReadPin(GPIO_ABC[i], GPIO_Num[i]);
 80009e2:	7038      	strb	r0, [r7, #0]
   for (int i=0; i<KEY_NUMBER; ++i)
 80009e4:	d1f3      	bne.n	80009ce <main+0x12a>
   if ( memcmp(LastMatrixState, MatrixState, sizeof(MatrixState)) != 0)
 80009e6:	4830      	ldr	r0, [pc, #192]	@ (8000aa8 <main+0x204>)
 80009e8:	492c      	ldr	r1, [pc, #176]	@ (8000a9c <main+0x1f8>)
 80009ea:	2214      	movs	r2, #20
 80009ec:	f006 fe9c 	bl	8007728 <memcmp>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d0d0      	beq.n	8000996 <main+0xf2>
       sprintf(message3, "%d \n\r", memcmp(LastMatrixState, MatrixState, sizeof(MatrixState)));
 80009f4:	4602      	mov	r2, r0
 80009f6:	492d      	ldr	r1, [pc, #180]	@ (8000aac <main+0x208>)
 80009f8:	4e2b      	ldr	r6, [pc, #172]	@ (8000aa8 <main+0x204>)
 80009fa:	a806      	add	r0, sp, #24
 80009fc:	f006 fe74 	bl	80076e8 <siprintf>
       HAL_UART_Transmit(&huart4, (uint8_t*)message3, strlen(message3), HAL_MAX_DELAY);
 8000a00:	a806      	add	r0, sp, #24
 8000a02:	f7ff fbe5 	bl	80001d0 <strlen>
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	b282      	uxth	r2, r0
 8000a0c:	a906      	add	r1, sp, #24
 8000a0e:	481d      	ldr	r0, [pc, #116]	@ (8000a84 <main+0x1e0>)
 8000a10:	f002 fc56 	bl	80032c0 <HAL_UART_Transmit>
	   for (int i=0; i<KEY_NUMBER; ++i)
 8000a14:	2400      	movs	r4, #0
 8000a16:	e004      	b.n	8000a22 <main+0x17e>
				  PressKeycodes(i);
 8000a18:	f7ff fdaa 	bl	8000570 <PressKeycodes>
	   for (int i=0; i<KEY_NUMBER; ++i)
 8000a1c:	3401      	adds	r4, #1
 8000a1e:	2c05      	cmp	r4, #5
 8000a20:	d00d      	beq.n	8000a3e <main+0x19a>
		   if (LastMatrixState[i] != MatrixState[i])
 8000a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a26:	f856 2b04 	ldr.w	r2, [r6], #4
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d0f6      	beq.n	8000a1c <main+0x178>
				  PressKeycodes(i);
 8000a2e:	4620      	mov	r0, r4
			   if ( MatrixState[i] == 0 )
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f1      	beq.n	8000a18 <main+0x174>
	   for (int i=0; i<KEY_NUMBER; ++i)
 8000a34:	3401      	adds	r4, #1
				  ReleaseKeycodes(i);
 8000a36:	f7ff fe5b 	bl	80006f0 <ReleaseKeycodes>
	   for (int i=0; i<KEY_NUMBER; ++i)
 8000a3a:	2c05      	cmp	r4, #5
 8000a3c:	d1f1      	bne.n	8000a22 <main+0x17e>
      USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000a3e:	491c      	ldr	r1, [pc, #112]	@ (8000ab0 <main+0x20c>)
 8000a40:	481c      	ldr	r0, [pc, #112]	@ (8000ab4 <main+0x210>)
 8000a42:	2208      	movs	r2, #8
 8000a44:	f004 fcf6 	bl	8005434 <USBD_HID_SendReport>
 8000a48:	e7a5      	b.n	8000996 <main+0xf2>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x1a8>
      sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r",Timer,Scanrate);
 8000a4e:	4602      	mov	r2, r0
 8000a50:	4919      	ldr	r1, [pc, #100]	@ (8000ab8 <main+0x214>)
 8000a52:	a806      	add	r0, sp, #24
 8000a54:	f006 fe48 	bl	80076e8 <siprintf>
      HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000a58:	a806      	add	r0, sp, #24
 8000a5a:	f7ff fbb9 	bl	80001d0 <strlen>
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	b282      	uxth	r2, r0
 8000a64:	a906      	add	r1, sp, #24
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <main+0x1e0>)
 8000a68:	f002 fc2a 	bl	80032c0 <HAL_UART_Transmit>
      LastTimer = Timer;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <main+0x1f4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f8ca 3000 	str.w	r3, [sl]
      Scanrate = 0;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e79b      	b.n	80009b0 <main+0x10c>
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	200002b0 	.word	0x200002b0
 8000a88:	40004c00 	.word	0x40004c00
 8000a8c:	20000268 	.word	0x20000268
 8000a90:	40005000 	.word	0x40005000
 8000a94:	20000260 	.word	0x20000260
 8000a98:	20000258 	.word	0x20000258
 8000a9c:	2000023c 	.word	0x2000023c
 8000aa0:	20000048 	.word	0x20000048
 8000aa4:	20000034 	.word	0x20000034
 8000aa8:	20000228 	.word	0x20000228
 8000aac:	08008108 	.word	0x08008108
 8000ab0:	200002f8 	.word	0x200002f8
 8000ab4:	2000030c 	.word	0x2000030c
 8000ab8:	080080e8 	.word	0x080080e8
 8000abc:	20000254 	.word	0x20000254
 8000ac0:	2000025c 	.word	0x2000025c
 8000ac4:	2000005c 	.word	0x2000005c

08000ac8 <Error_Handler>:
 8000ac8:	b672      	cpsid	i
  while (1)
 8000aca:	e7fe      	b.n	8000aca <Error_Handler+0x2>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	@ 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a41      	ldr	r2, [pc, #260]	@ (8000c40 <HAL_UART_MspInit+0x124>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12c      	bne.n	8000b98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	4b40      	ldr	r3, [pc, #256]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a3f      	ldr	r2, [pc, #252]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000b48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	4b39      	ldr	r3, [pc, #228]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a38      	ldr	r2, [pc, #224]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b36      	ldr	r3, [pc, #216]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b76:	2303      	movs	r3, #3
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b86:	2308      	movs	r3, #8
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	482d      	ldr	r0, [pc, #180]	@ (8000c48 <HAL_UART_MspInit+0x12c>)
 8000b92:	f000 fabf 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b96:	e04f      	b.n	8000c38 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==UART5)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c4c <HAL_UART_MspInit+0x130>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d14a      	bne.n	8000c38 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a26      	ldr	r2, [pc, #152]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000bac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_UART_MspInit+0x128>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	480f      	ldr	r0, [pc, #60]	@ (8000c50 <HAL_UART_MspInit+0x134>)
 8000c14:	f000 fa7e 	bl	8001114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <HAL_UART_MspInit+0x138>)
 8000c34:	f000 fa6e 	bl	8001114 <HAL_GPIO_Init>
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	@ 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40004c00 	.word	0x40004c00
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40005000 	.word	0x40005000
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f8db 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f000 fd21 	bl	8001704 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000ac4 	.word	0x20000ac4

08000ccc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <OTG_HS_IRQHandler+0x10>)
 8000cd2:	f000 fd17 	bl	8001704 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000fa8 	.word	0x20000fa8

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f006 fd1a 	bl	8007748 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20020000 	.word	0x20020000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000300 	.word	0x20000300
 8000d48:	200015e8 	.word	0x200015e8

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f006 fcd9 	bl	8007754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fd7f 	bl	80008a4 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000db4:	0800816c 	.word	0x0800816c
  ldr r2, =_sbss
 8000db8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8000dbc:	200015e8 	.word	0x200015e8

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f94f 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe68 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f967 	bl	80010fa <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f92f 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000005c 	.word	0x2000005c
 8000e60:	20000064 	.word	0x20000064
 8000e64:	20000060 	.word	0x20000060

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000064 	.word	0x20000064
 8000e8c:	20000304 	.word	0x20000304

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000304 	.word	0x20000304

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000064 	.word	0x20000064

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	@ (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	@ (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e16b      	b.n	8001408 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 815a 	bne.w	8001402 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d005      	beq.n	8001166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	2b02      	cmp	r3, #2
 8001164:	d130      	bne.n	80011c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 0201 	and.w	r2, r3, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d017      	beq.n	8001204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d123      	bne.n	8001258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80b4 	beq.w	8001402 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b60      	ldr	r3, [pc, #384]	@ (8001420 <HAL_GPIO_Init+0x30c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001420 <HAL_GPIO_Init+0x30c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001420 <HAL_GPIO_Init+0x30c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <HAL_GPIO_Init+0x310>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x314>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d02b      	beq.n	800133a <HAL_GPIO_Init+0x226>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a51      	ldr	r2, [pc, #324]	@ (800142c <HAL_GPIO_Init+0x318>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d025      	beq.n	8001336 <HAL_GPIO_Init+0x222>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a50      	ldr	r2, [pc, #320]	@ (8001430 <HAL_GPIO_Init+0x31c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01f      	beq.n	8001332 <HAL_GPIO_Init+0x21e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001434 <HAL_GPIO_Init+0x320>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x21a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_GPIO_Init+0x324>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x216>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4d      	ldr	r2, [pc, #308]	@ (800143c <HAL_GPIO_Init+0x328>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x212>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <HAL_GPIO_Init+0x32c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x20e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4b      	ldr	r2, [pc, #300]	@ (8001444 <HAL_GPIO_Init+0x330>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x20a>
 800131a:	2307      	movs	r3, #7
 800131c:	e00e      	b.n	800133c <HAL_GPIO_Init+0x228>
 800131e:	2308      	movs	r3, #8
 8001320:	e00c      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001322:	2306      	movs	r3, #6
 8001324:	e00a      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x228>
 800132a:	2304      	movs	r3, #4
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x228>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x228>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x310>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b3b      	ldr	r3, [pc, #236]	@ (8001448 <HAL_GPIO_Init+0x334>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_GPIO_Init+0x334>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_GPIO_Init+0x334>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f ae90 	bls.w	8001130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40021400 	.word	0x40021400
 8001440:	40021800 	.word	0x40021800
 8001444:	40021c00 	.word	0x40021c00
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e001      	b.n	800146e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e101      	b.n	8001692 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d106      	bne.n	80014ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f005 fd45 	bl	8006f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014bc:	d102      	bne.n	80014c4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fbcc 	bl	8003c66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7c1a      	ldrb	r2, [r3, #16]
 80014d6:	f88d 2000 	strb.w	r2, [sp]
 80014da:	3304      	adds	r3, #4
 80014dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014de:	f002 faab 	bl	8003a38 <USB_CoreInit>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0ce      	b.n	8001692 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fbc4 	bl	8003c88 <USB_SetCurrentMode>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0bf      	b.n	8001692 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e04a      	b.n	80015ae <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3315      	adds	r3, #21
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3314      	adds	r3, #20
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	b298      	uxth	r0, r3
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	332e      	adds	r3, #46	@ 0x2e
 8001554:	4602      	mov	r2, r0
 8001556:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3318      	adds	r3, #24
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	331c      	adds	r3, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3320      	adds	r3, #32
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3324      	adds	r3, #36	@ 0x24
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	791b      	ldrb	r3, [r3, #4]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3af      	bcc.n	8001518 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e044      	b.n	8001648 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3b5      	bcc.n	80015be <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7c1a      	ldrb	r2, [r3, #16]
 800165a:	f88d 2000 	strb.w	r2, [sp]
 800165e:	3304      	adds	r3, #4
 8001660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001662:	f002 fb5d 	bl	8003d20 <USB_DevInit>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e00c      	b.n	8001692 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fba7 	bl	8004dde <USB_DevDisconnect>

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_PCD_Start+0x1c>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e022      	b.n	80016fc <HAL_PCD_Start+0x62>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 faae 	bl	8003c44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fb55 	bl	8004d9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b08d      	sub	sp, #52	@ 0x34
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fc13 	bl	8004f46 <USB_GetMode>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 848c 	bne.w	8002040 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fb77 	bl	8004e20 <USB_ReadInterrupts>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8482 	beq.w	800203e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fb64 	bl	8004e20 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f002 0202 	and.w	r2, r2, #2
 8001770:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fb52 	bl	8004e20 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b10      	cmp	r3, #16
 8001784:	d161      	bne.n	800184a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 020f 	and.w	r2, r3, #15
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	3304      	adds	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	0c5b      	lsrs	r3, r3, #17
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d124      	bne.n	800180c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d035      	beq.n	800183a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	6a38      	ldr	r0, [r7, #32]
 80017e2:	f003 f989 	bl	8004af8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f2:	441a      	add	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001804:	441a      	add	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	e016      	b.n	800183a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	0c5b      	lsrs	r3, r3, #17
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	2b06      	cmp	r3, #6
 8001816:	d110      	bne.n	800183a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800181e:	2208      	movs	r2, #8
 8001820:	4619      	mov	r1, r3
 8001822:	6a38      	ldr	r0, [r7, #32]
 8001824:	f003 f968 	bl	8004af8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001834:	441a      	add	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0210 	orr.w	r2, r2, #16
 8001848:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fae6 	bl	8004e20 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800185a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800185e:	f040 80a7 	bne.w	80019b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 faeb 	bl	8004e46 <USB_ReadDevAllOutEpInterrupt>
 8001870:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001872:	e099      	b.n	80019a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 808e 	beq.w	800199c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fb0f 	bl	8004eae <USB_ReadDevOutEPInterrupt>
 8001890:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00c      	beq.n	80018b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	015a      	lsls	r2, r3, #5
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a8:	461a      	mov	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fe8b 	bl	80025cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018cc:	461a      	mov	r2, r3
 80018ce:	2308      	movs	r3, #8
 80018d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 ff61 	bl	800279c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018f0:	461a      	mov	r2, r3
 80018f2:	2310      	movs	r3, #16
 80018f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d030      	beq.n	8001962 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001908:	2b80      	cmp	r3, #128	@ 0x80
 800190a:	d109      	bne.n	8001920 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800191a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	3304      	adds	r3, #4
 8001934:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	78db      	ldrb	r3, [r3, #3]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f005 fc86 	bl	800725c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800195c:	461a      	mov	r2, r3
 800195e:	2302      	movs	r3, #2
 8001960:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001978:	461a      	mov	r2, r3
 800197a:	2320      	movs	r3, #32
 800197c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001994:	461a      	mov	r2, r3
 8001996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800199a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	3301      	adds	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f af62 	bne.w	8001874 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fa33 	bl	8004e20 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019c4:	f040 80db 	bne.w	8001b7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fa54 	bl	8004e7a <USB_ReadDevAllInEpInterrupt>
 80019d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80019d8:	e0cd      	b.n	8001b76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80c2 	beq.w	8001b6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fa7a 	bl	8004eea <USB_ReadDevInEPInterrupt>
 80019f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d057      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	2201      	movs	r2, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69f9      	ldr	r1, [r7, #28]
 8001a1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001a22:	4013      	ands	r3, r2
 8001a24:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a32:	461a      	mov	r2, r3
 8001a34:	2301      	movs	r3, #1
 8001a36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	799b      	ldrb	r3, [r3, #6]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d132      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3320      	adds	r3, #32
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4403      	add	r3, r0
 8001a60:	331c      	adds	r3, #28
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4419      	add	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4403      	add	r3, r0
 8001a74:	3320      	adds	r3, #32
 8001a76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d113      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x3a2>
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3324      	adds	r3, #36	@ 0x24
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d108      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	f003 fa81 	bl	8004fa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f005 fb50 	bl	8007152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2308      	movs	r3, #8
 8001acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2310      	movs	r3, #16
 8001ae8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b00:	461a      	mov	r2, r3
 8001b02:	2340      	movs	r3, #64	@ 0x40
 8001b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d023      	beq.n	8001b58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b12:	6a38      	ldr	r0, [r7, #32]
 8001b14:	f002 fa68 	bl	8003fe8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	3310      	adds	r3, #16
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	3304      	adds	r3, #4
 8001b2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f005 fb9d 	bl	8007280 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b52:	461a      	mov	r2, r3
 8001b54:	2302      	movs	r3, #2
 8001b56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fca5 	bl	80024b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f af2e 	bne.w	80019da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f94c 	bl	8004e20 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b92:	d122      	bne.n	8001bda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fe8b 	bl	80028d8 <HAL_PCDEx_LPM_Callback>
 8001bc2:	e002      	b.n	8001bca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f005 fb3b 	bl	8007240 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f91e 	bl	8004e20 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bee:	d112      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d102      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f005 faf7 	bl	80071f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001c14:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 f900 	bl	8004e20 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c2a:	f040 80b7 	bne.w	8001d9c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2110      	movs	r1, #16
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 f9cd 	bl	8003fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c52:	e046      	b.n	8001ce2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c60:	461a      	mov	r2, r3
 8001c62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c78:	0151      	lsls	r1, r2, #5
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	440a      	add	r2, r1
 8001c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c94:	461a      	mov	r2, r3
 8001c96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cac:	0151      	lsls	r1, r2, #5
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	440a      	add	r2, r1
 8001cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ccc:	0151      	lsls	r1, r2, #5
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	440a      	add	r2, r1
 8001cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001cda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cde:	3301      	adds	r3, #1
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	791b      	ldrb	r3, [r3, #4]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d3b2      	bcc.n	8001c54 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cfc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7bdb      	ldrb	r3, [r3, #15]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d1a:	f043 030b 	orr.w	r3, r3, #11
 8001d1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d30:	f043 030b 	orr.w	r3, r3, #11
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	e015      	b.n	8001d64 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d4a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001d4e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d5e:	f043 030b 	orr.w	r3, r3, #11
 8001d62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d72:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d86:	461a      	mov	r2, r3
 8001d88:	f003 f90e 	bl	8004fa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 f83d 	bl	8004e20 <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db0:	d123      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 f8d3 	bl	8004f62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 f98a 	bl	80040da <USB_GetDevSpeed>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681c      	ldr	r4, [r3, #0]
 8001dd2:	f001 f9f1 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8001dd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4620      	mov	r0, r4
 8001de0:	f001 fe8e 	bl	8003b00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f005 f9dc 	bl	80071a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f80e 	bl	8004e20 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d10a      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f005 f9b9 	bl	8007186 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f002 0208 	and.w	r2, r2, #8
 8001e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fff9 	bl	8004e20 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e34:	2b80      	cmp	r3, #128	@ 0x80
 8001e36:	d123      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e44:	2301      	movs	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e48:	e014      	b.n	8001e74 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 faf2 	bl	8002452 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	3301      	adds	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	791b      	ldrb	r3, [r3, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d3e4      	bcc.n	8001e4a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 ffcb 	bl	8004e20 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e94:	d13c      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e96:	2301      	movs	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e9a:	e02b      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3318      	adds	r3, #24
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d115      	bne.n	8001eee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da12      	bge.n	8001eee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3317      	adds	r3, #23
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fab2 	bl	8002452 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	791b      	ldrb	r3, [r3, #4]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d3cd      	bcc.n	8001e9c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 ff83 	bl	8004e20 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f24:	d156      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f26:	2301      	movs	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2a:	e045      	b.n	8001fb8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d12e      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da2b      	bge.n	8001fb2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001f66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d121      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fae:	6053      	str	r3, [r2, #4]
            break;
 8001fb0:	e008      	b.n	8001fc4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	791b      	ldrb	r3, [r3, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d3b3      	bcc.n	8001f2c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 ff21 	bl	8004e20 <USB_ReadInterrupts>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe8:	d10a      	bne.n	8002000 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f005 f95a 	bl	80072a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f002 ff0b 	bl	8004e20 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d115      	bne.n	8002040 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f005 f94a 	bl	80072c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e000      	b.n	8002040 <HAL_PCD_IRQHandler+0x93c>
      return;
 800203e:	bf00      	nop
    }
  }
}
 8002040:	3734      	adds	r7, #52	@ 0x34
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}

08002046 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_PCD_SetAddress+0x1a>
 800205c:	2302      	movs	r3, #2
 800205e:	e012      	b.n	8002086 <HAL_PCD_SetAddress+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fe6a 	bl	8004d50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	4608      	mov	r0, r1
 8002098:	4611      	mov	r1, r2
 800209a:	461a      	mov	r2, r3
 800209c:	4603      	mov	r3, r0
 800209e:	70fb      	strb	r3, [r7, #3]
 80020a0:	460b      	mov	r3, r1
 80020a2:	803b      	strh	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da0f      	bge.n	80020d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 020f 	and.w	r2, r3, #15
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	3310      	adds	r3, #16
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	3304      	adds	r3, #4
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	705a      	strb	r2, [r3, #1]
 80020d2:	e00f      	b.n	80020f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 020f 	and.w	r2, r3, #15
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002100:	883b      	ldrh	r3, [r7, #0]
 8002102:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	78ba      	ldrb	r2, [r7, #2]
 800210e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002122:	78bb      	ldrb	r3, [r7, #2]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d102      	bne.n	800212e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_PCD_EP_Open+0xae>
 8002138:	2302      	movs	r3, #2
 800213a:	e00e      	b.n	800215a <HAL_PCD_EP_Open+0xcc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f001 ffea 	bl	8004124 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002158:	7afb      	ldrb	r3, [r7, #11]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800216e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0f      	bge.n	8002196 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3310      	adds	r3, #16
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	705a      	strb	r2, [r3, #1]
 8002194:	e00f      	b.n	80021b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 020f 	and.w	r2, r3, #15
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_EP_Close+0x6e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e00e      	b.n	80021ee <HAL_PCD_EP_Close+0x8c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 f828 	bl	8004234 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	460b      	mov	r3, r1
 8002204:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	f003 020f 	and.w	r2, r3, #15
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2200      	movs	r2, #0
 8002236:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	b2da      	uxtb	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	799b      	ldrb	r3, [r3, #6]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d102      	bne.n	8002252 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	799b      	ldrb	r3, [r3, #6]
 800225a:	461a      	mov	r2, r3
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	f002 f8c5 	bl	80043ec <USB_EPStartXfer>

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	460b      	mov	r3, r1
 800227a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3310      	adds	r3, #16
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2201      	movs	r2, #1
 80022aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	799b      	ldrb	r3, [r3, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	461a      	mov	r2, r3
 80022d0:	6979      	ldr	r1, [r7, #20]
 80022d2:	f002 f88b 	bl	80043ec <USB_EPStartXfer>

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	7912      	ldrb	r2, [r2, #4]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e04f      	b.n	800239e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0f      	bge.n	8002326 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	3310      	adds	r3, #16
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	3304      	adds	r3, #4
 800231c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	705a      	strb	r2, [r3, #1]
 8002324:	e00d      	b.n	8002342 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	b2da      	uxtb	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_PCD_EP_SetStall+0x82>
 800235e:	2302      	movs	r3, #2
 8002360:	e01d      	b.n	800239e <HAL_PCD_EP_SetStall+0xbe>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 fc19 	bl	8004ba8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7999      	ldrb	r1, [r3, #6]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800238e:	461a      	mov	r2, r3
 8002390:	f002 fe0a 	bl	8004fa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	7912      	ldrb	r2, [r2, #4]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e042      	b.n	800244a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	da0f      	bge.n	80023ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 020f 	and.w	r2, r3, #15
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	3310      	adds	r3, #16
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	705a      	strb	r2, [r3, #1]
 80023ea:	e00f      	b.n	800240c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	3304      	adds	r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_PCD_EP_ClrStall+0x86>
 8002428:	2302      	movs	r3, #2
 800242a:	e00e      	b.n	800244a <HAL_PCD_EP_ClrStall+0xa4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fc22 	bl	8004c84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800245e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da0c      	bge.n	8002480 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 020f 	and.w	r2, r3, #15
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	3310      	adds	r3, #16
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	3304      	adds	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e00c      	b.n	800249a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 020f 	and.w	r2, r3, #15
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68f9      	ldr	r1, [r7, #12]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fa41 	bl	8004928 <USB_EPStopXfer>
 80024a6:	4603      	mov	r3, r0
 80024a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024aa:	7afb      	ldrb	r3, [r7, #11]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	@ 0x28
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3310      	adds	r3, #16
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	3304      	adds	r3, #4
 80024da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d901      	bls.n	80024ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e06b      	b.n	80025c4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d902      	bls.n	8002508 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3303      	adds	r3, #3
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002510:	e02a      	b.n	8002568 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	d902      	bls.n	800252e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3303      	adds	r3, #3
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	4603      	mov	r3, r0
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f002 fa96 	bl	8004a7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	441a      	add	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	441a      	add	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	429a      	cmp	r2, r3
 800257c:	d809      	bhi.n	8002592 <PCD_WriteEmptyTxFifo+0xde>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002586:	429a      	cmp	r2, r3
 8002588:	d203      	bcs.n	8002592 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1bf      	bne.n	8002512 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	d811      	bhi.n	80025c2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	2201      	movs	r2, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	6939      	ldr	r1, [r7, #16]
 80025ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025be:	4013      	ands	r3, r2
 80025c0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	333c      	adds	r3, #60	@ 0x3c
 80025e4:	3304      	adds	r3, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	799b      	ldrb	r3, [r3, #6]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d17b      	bne.n	80026fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4a61      	ldr	r2, [pc, #388]	@ (8002794 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	f240 80b9 	bls.w	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80b3 	beq.w	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800262e:	461a      	mov	r2, r3
 8002630:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002634:	6093      	str	r3, [r2, #8]
 8002636:	e0a7      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800264e:	461a      	mov	r2, r3
 8002650:	2320      	movs	r3, #32
 8002652:	6093      	str	r3, [r2, #8]
 8002654:	e098      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 8093 	bne.w	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d90f      	bls.n	800268a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002680:	461a      	mov	r2, r3
 8002682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002686:	6093      	str	r3, [r2, #8]
 8002688:	e07e      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	0159      	lsls	r1, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d114      	bne.n	80026ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026d4:	461a      	mov	r2, r3
 80026d6:	2101      	movs	r1, #1
 80026d8:	f002 fc66 	bl	8004fa8 <USB_EP0_OutStart>
 80026dc:	e006      	b.n	80026ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	441a      	add	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f004 fd12 	bl	800711c <HAL_PCD_DataOutStageCallback>
 80026f8:	e046      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d124      	bne.n	800274c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002718:	461a      	mov	r2, r3
 800271a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800271e:	6093      	str	r3, [r2, #8]
 8002720:	e032      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2320      	movs	r3, #32
 800273c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f004 fce9 	bl	800711c <HAL_PCD_DataOutStageCallback>
 800274a:	e01d      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d114      	bne.n	800277c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002774:	461a      	mov	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	f002 fc16 	bl	8004fa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f004 fcca 	bl	800711c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	4f54300a 	.word	0x4f54300a
 8002798:	4f54310a 	.word	0x4f54310a

0800279c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	333c      	adds	r3, #60	@ 0x3c
 80027b4:	3304      	adds	r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <PCD_EP_OutSetupPacket_int+0x88>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d90e      	bls.n	80027f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027e8:	461a      	mov	r2, r3
 80027ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f004 fc81 	bl	80070f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <PCD_EP_OutSetupPacket_int+0x88>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d90c      	bls.n	8002818 <PCD_EP_OutSetupPacket_int+0x7c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	799b      	ldrb	r3, [r3, #6]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002810:	461a      	mov	r2, r3
 8002812:	2101      	movs	r1, #1
 8002814:	f002 fbc8 	bl	8004fa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	4f54300a 	.word	0x4f54300a

08002828 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
 8002834:	4613      	mov	r3, r2
 8002836:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d107      	bne.n	8002856 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002846:	883b      	ldrh	r3, [r7, #0]
 8002848:	0419      	lsls	r1, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	430a      	orrs	r2, r1
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28
 8002854:	e028      	b.n	80028a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	4413      	add	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e00d      	b.n	8002886 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	3340      	adds	r3, #64	@ 0x40
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	3301      	adds	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	3b01      	subs	r3, #1
 800288c:	429a      	cmp	r2, r3
 800288e:	d3ec      	bcc.n	800286a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002890:	883b      	ldrh	r3, [r7, #0]
 8002892:	0418      	lsls	r0, r3, #16
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6819      	ldr	r1, [r3, #0]
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	3b01      	subs	r3, #1
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	4302      	orrs	r2, r0
 80028a0:	3340      	adds	r3, #64	@ 0x40
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e267      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d075      	beq.n	80029fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800290e:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d00c      	beq.n	8002934 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291a:	4b85      	ldr	r3, [pc, #532]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002922:	2b08      	cmp	r3, #8
 8002924:	d112      	bne.n	800294c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002926:	4b82      	ldr	r3, [pc, #520]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002932:	d10b      	bne.n	800294c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	4b7e      	ldr	r3, [pc, #504]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d05b      	beq.n	80029f8 <HAL_RCC_OscConfig+0x108>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d157      	bne.n	80029f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e242      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002954:	d106      	bne.n	8002964 <HAL_RCC_OscConfig+0x74>
 8002956:	4b76      	ldr	r3, [pc, #472]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a75      	ldr	r2, [pc, #468]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0xb0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x98>
 800296e:	4b70      	ldr	r3, [pc, #448]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6f      	ldr	r2, [pc, #444]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6c      	ldr	r2, [pc, #432]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0xb0>
 8002988:	4b69      	ldr	r3, [pc, #420]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a68      	ldr	r2, [pc, #416]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b66      	ldr	r3, [pc, #408]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a65      	ldr	r2, [pc, #404]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800299e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fa72 	bl	8000e90 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fa6e 	bl	8000e90 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e207      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0xc0>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fa5e 	bl	8000e90 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fa5a 	bl	8000e90 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	@ 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1f3      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	4b51      	ldr	r3, [pc, #324]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0xe8>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d063      	beq.n	8002ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a06:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d11c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b44      	ldr	r3, [pc, #272]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d116      	bne.n	8002a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x152>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e1c7      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4937      	ldr	r1, [pc, #220]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	e03a      	b.n	8002ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a60:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x244>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fa13 	bl	8000e90 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fa0f 	bl	8000e90 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1a8      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b28      	ldr	r3, [pc, #160]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4925      	ldr	r1, [pc, #148]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCC_OscConfig+0x244>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe f9f2 	bl	8000e90 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe f9ee 	bl	8000e90 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e187      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d036      	beq.n	8002b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_RCC_OscConfig+0x248>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe f9d2 	bl	8000e90 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe f9ce 	bl	8000e90 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e167      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RCC_OscConfig+0x240>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x200>
 8002b0e:	e01b      	b.n	8002b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b10:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <HAL_RCC_OscConfig+0x248>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b16:	f7fe f9bb 	bl	8000e90 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7fe f9b7 	bl	8000e90 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d907      	bls.n	8002b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e150      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	42470000 	.word	0x42470000
 8002b38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b88      	ldr	r3, [pc, #544]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ea      	bne.n	8002b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8097 	beq.w	8002c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b81      	ldr	r3, [pc, #516]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b76:	4b7a      	ldr	r3, [pc, #488]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b77      	ldr	r3, [pc, #476]	@ (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b74      	ldr	r3, [pc, #464]	@ (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a73      	ldr	r2, [pc, #460]	@ (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe f977 	bl	8000e90 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7fe f973 	bl	8000e90 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e10c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d64 <HAL_RCC_OscConfig+0x474>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x2ea>
 8002bcc:	4b64      	ldr	r3, [pc, #400]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd0:	4a63      	ldr	r2, [pc, #396]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x324>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x30c>
 8002be2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bee:	4b5c      	ldr	r3, [pc, #368]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x324>
 8002bfc:	4b58      	ldr	r3, [pc, #352]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	4a57      	ldr	r2, [pc, #348]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c08:	4b55      	ldr	r3, [pc, #340]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	4a54      	ldr	r2, [pc, #336]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe f938 	bl	8000e90 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe f934 	bl	8000e90 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0cb      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	4b49      	ldr	r3, [pc, #292]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ee      	beq.n	8002c24 <HAL_RCC_OscConfig+0x334>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe f922 	bl	8000e90 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe f91e 	bl	8000e90 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0b5      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	4b3e      	ldr	r3, [pc, #248]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ee      	bne.n	8002c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	4a38      	ldr	r2, [pc, #224]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a1 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c8e:	4b34      	ldr	r3, [pc, #208]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d05c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d141      	bne.n	8002d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_RCC_OscConfig+0x478>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f8f2 	bl	8000e90 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe f8ee 	bl	8000e90 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e087      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	491b      	ldr	r1, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_RCC_OscConfig+0x478>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe f8c7 	bl	8000e90 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe f8c3 	bl	8000e90 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e05c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x416>
 8002d24:	e054      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_RCC_OscConfig+0x478>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f8b0 	bl	8000e90 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f8ac 	bl	8000e90 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e045      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_RCC_OscConfig+0x470>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x444>
 8002d52:	e03d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e038      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000
 8002d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <HAL_RCC_OscConfig+0x4ec>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d028      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d121      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d11a      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d111      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800

08002de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0cc      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d90c      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b65      	ldr	r3, [pc, #404]	@ (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b63      	ldr	r3, [pc, #396]	@ (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e34:	4b59      	ldr	r3, [pc, #356]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a58      	ldr	r2, [pc, #352]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e4c:	4b53      	ldr	r3, [pc, #332]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a52      	ldr	r2, [pc, #328]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b50      	ldr	r3, [pc, #320]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	494d      	ldr	r1, [pc, #308]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d044      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b47      	ldr	r3, [pc, #284]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d119      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e06f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e067      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b37      	ldr	r3, [pc, #220]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4934      	ldr	r1, [pc, #208]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed0:	f7fd ffde 	bl	8000e90 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fd ffda 	bl	8000e90 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e04f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b2b      	ldr	r3, [pc, #172]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b25      	ldr	r3, [pc, #148]	@ (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d20c      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b22      	ldr	r3, [pc, #136]	@ (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e032      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4916      	ldr	r1, [pc, #88]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f52:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	490e      	ldr	r1, [pc, #56]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f66:	f000 f821 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	490a      	ldr	r1, [pc, #40]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	5ccb      	ldrb	r3, [r1, r3]
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f82:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd ff3e 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023c00 	.word	0x40023c00
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	08008110 	.word	0x08008110
 8002fa4:	2000005c 	.word	0x2000005c
 8002fa8:	20000060 	.word	0x20000060

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b094      	sub	sp, #80	@ 0x50
 8002fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc4:	4b79      	ldr	r3, [pc, #484]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d00d      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x40>
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	f200 80e1 	bhi.w	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fde:	e0db      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b73      	ldr	r3, [pc, #460]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fe4:	e0db      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe6:	4b73      	ldr	r3, [pc, #460]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fea:	e0d8      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b6f      	ldr	r3, [pc, #444]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b6a      	ldr	r3, [pc, #424]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800300c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003014:	633b      	str	r3, [r7, #48]	@ 0x30
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
 800301a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003030:	0150      	lsls	r0, r2, #5
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4621      	mov	r1, r4
 8003038:	1a51      	subs	r1, r2, r1
 800303a:	6139      	str	r1, [r7, #16]
 800303c:	4629      	mov	r1, r5
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003050:	4659      	mov	r1, fp
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305a:	4651      	mov	r1, sl
 800305c:	018a      	lsls	r2, r1, #6
 800305e:	4651      	mov	r1, sl
 8003060:	ebb2 0801 	subs.w	r8, r2, r1
 8003064:	4659      	mov	r1, fp
 8003066:	eb63 0901 	sbc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	462b      	mov	r3, r5
 800308c:	eb49 0303 	adc.w	r3, r9, r3
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800309e:	4629      	mov	r1, r5
 80030a0:	024b      	lsls	r3, r1, #9
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030a8:	4621      	mov	r1, r4
 80030aa:	024a      	lsls	r2, r1, #9
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030bc:	f7fd f8e0 	bl	8000280 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c8:	e058      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	2200      	movs	r2, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	4611      	mov	r1, r2
 80030d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0159      	lsls	r1, r3, #5
 80030f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f6:	0150      	lsls	r0, r2, #5
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4641      	mov	r1, r8
 80030fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003102:	4649      	mov	r1, r9
 8003104:	eb63 0b01 	sbc.w	fp, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800311c:	ebb2 040a 	subs.w	r4, r2, sl
 8003120:	eb63 050b 	sbc.w	r5, r3, fp
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	00eb      	lsls	r3, r5, #3
 800312e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003132:	00e2      	lsls	r2, r4, #3
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4643      	mov	r3, r8
 800313a:	18e3      	adds	r3, r4, r3
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	464b      	mov	r3, r9
 8003140:	eb45 0303 	adc.w	r3, r5, r3
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003152:	4629      	mov	r1, r5
 8003154:	028b      	lsls	r3, r1, #10
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800315c:	4621      	mov	r1, r4
 800315e:	028a      	lsls	r2, r1, #10
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	61fa      	str	r2, [r7, #28]
 800316c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003170:	f7fd f886 	bl	8000280 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800318c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800318e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003196:	e002      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800319a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800319c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3750      	adds	r7, #80	@ 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	2000005c 	.word	0x2000005c

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a9b      	lsrs	r3, r3, #10
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	@ (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08008120 	.word	0x08008120

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031fc:	f7ff ffdc 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0b5b      	lsrs	r3, r3, #13
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08008120 	.word	0x08008120

08003220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e042      	b.n	80032b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fc68 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	@ 0x24
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f973 	bl	8003550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d175      	bne.n	80033cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_UART_Transmit+0x2c>
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e06e      	b.n	80033ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	@ 0x21
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fe:	f7fd fdc7 	bl	8000e90 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003318:	d108      	bne.n	800332c <HAL_UART_Transmit+0x6c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d104      	bne.n	800332c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e003      	b.n	8003334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003334:	e02e      	b.n	8003394 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2180      	movs	r1, #128	@ 0x80
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f848 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e03a      	b.n	80033ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800336c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3302      	adds	r3, #2
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e007      	b.n	8003386 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3301      	adds	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1cb      	bne.n	8003336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f814 	bl	80033d6 <UART_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e006      	b.n	80033ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	e03b      	b.n	8003460 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d037      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7fd fd4e 	bl	8000e90 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <UART_WaitOnFlagUntilTimeout+0x30>
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e03a      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d023      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d020      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x8a>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d01d      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b08      	cmp	r3, #8
 8003430:	d116      	bne.n	8003460 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f81d 	bl	8003488 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2208      	movs	r2, #8
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e00f      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	429a      	cmp	r2, r3
 800347c:	d0b4      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b095      	sub	sp, #84	@ 0x54
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80034b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e5      	bne.n	80034c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d119      	bne.n	8003534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 0310 	bic.w	r3, r3, #16
 8003516:	647b      	str	r3, [r7, #68]	@ 0x44
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003520:	61ba      	str	r2, [r7, #24]
 8003522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6979      	ldr	r1, [r7, #20]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	613b      	str	r3, [r7, #16]
   return(result);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003542:	bf00      	nop
 8003544:	3754      	adds	r7, #84	@ 0x54
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b0c0      	sub	sp, #256	@ 0x100
 8003556:	af00      	add	r7, sp, #0
 8003558:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	ea40 0301 	orr.w	r3, r0, r1
 8003578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	431a      	orrs	r2, r3
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035a8:	f021 010c 	bic.w	r1, r1, #12
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035b6:	430b      	orrs	r3, r1
 80035b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ca:	6999      	ldr	r1, [r3, #24]
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	ea40 0301 	orr.w	r3, r0, r1
 80035d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b8f      	ldr	r3, [pc, #572]	@ (800381c <UART_SetConfig+0x2cc>)
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d005      	beq.n	80035f0 <UART_SetConfig+0xa0>
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003820 <UART_SetConfig+0x2d0>)
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d104      	bne.n	80035fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035f0:	f7ff fe02 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 80035f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035f8:	e003      	b.n	8003602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035fa:	f7ff fde9 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 80035fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800360c:	f040 810c 	bne.w	8003828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800361a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800361e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003622:	4622      	mov	r2, r4
 8003624:	462b      	mov	r3, r5
 8003626:	1891      	adds	r1, r2, r2
 8003628:	65b9      	str	r1, [r7, #88]	@ 0x58
 800362a:	415b      	adcs	r3, r3
 800362c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800362e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003632:	4621      	mov	r1, r4
 8003634:	eb12 0801 	adds.w	r8, r2, r1
 8003638:	4629      	mov	r1, r5
 800363a:	eb43 0901 	adc.w	r9, r3, r1
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003652:	4690      	mov	r8, r2
 8003654:	4699      	mov	r9, r3
 8003656:	4623      	mov	r3, r4
 8003658:	eb18 0303 	adds.w	r3, r8, r3
 800365c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003660:	462b      	mov	r3, r5
 8003662:	eb49 0303 	adc.w	r3, r9, r3
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800366a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003676:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800367a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800367e:	460b      	mov	r3, r1
 8003680:	18db      	adds	r3, r3, r3
 8003682:	653b      	str	r3, [r7, #80]	@ 0x50
 8003684:	4613      	mov	r3, r2
 8003686:	eb42 0303 	adc.w	r3, r2, r3
 800368a:	657b      	str	r3, [r7, #84]	@ 0x54
 800368c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003694:	f7fc fdf4 	bl	8000280 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4b61      	ldr	r3, [pc, #388]	@ (8003824 <UART_SetConfig+0x2d4>)
 800369e:	fba3 2302 	umull	r2, r3, r3, r2
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	011c      	lsls	r4, r3, #4
 80036a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	1891      	adds	r1, r2, r2
 80036be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036c0:	415b      	adcs	r3, r3
 80036c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036c8:	4641      	mov	r1, r8
 80036ca:	eb12 0a01 	adds.w	sl, r2, r1
 80036ce:	4649      	mov	r1, r9
 80036d0:	eb43 0b01 	adc.w	fp, r3, r1
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e8:	4692      	mov	sl, r2
 80036ea:	469b      	mov	fp, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	eb1a 0303 	adds.w	r3, sl, r3
 80036f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036f6:	464b      	mov	r3, r9
 80036f8:	eb4b 0303 	adc.w	r3, fp, r3
 80036fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800370c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003714:	460b      	mov	r3, r1
 8003716:	18db      	adds	r3, r3, r3
 8003718:	643b      	str	r3, [r7, #64]	@ 0x40
 800371a:	4613      	mov	r3, r2
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	647b      	str	r3, [r7, #68]	@ 0x44
 8003722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800372a:	f7fc fda9 	bl	8000280 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4611      	mov	r1, r2
 8003734:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <UART_SetConfig+0x2d4>)
 8003736:	fba3 2301 	umull	r2, r3, r3, r1
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2264      	movs	r2, #100	@ 0x64
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	1acb      	subs	r3, r1, r3
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800374a:	4b36      	ldr	r3, [pc, #216]	@ (8003824 <UART_SetConfig+0x2d4>)
 800374c:	fba3 2302 	umull	r2, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003758:	441c      	add	r4, r3
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003764:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003774:	415b      	adcs	r3, r3
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800377c:	4641      	mov	r1, r8
 800377e:	1851      	adds	r1, r2, r1
 8003780:	6339      	str	r1, [r7, #48]	@ 0x30
 8003782:	4649      	mov	r1, r9
 8003784:	414b      	adcs	r3, r1
 8003786:	637b      	str	r3, [r7, #52]	@ 0x34
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003794:	4659      	mov	r1, fp
 8003796:	00cb      	lsls	r3, r1, #3
 8003798:	4651      	mov	r1, sl
 800379a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379e:	4651      	mov	r1, sl
 80037a0:	00ca      	lsls	r2, r1, #3
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	4642      	mov	r2, r8
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037b0:	464b      	mov	r3, r9
 80037b2:	460a      	mov	r2, r1
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037d0:	460b      	mov	r3, r1
 80037d2:	18db      	adds	r3, r3, r3
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d6:	4613      	mov	r3, r2
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037e6:	f7fc fd4b 	bl	8000280 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <UART_SetConfig+0x2d4>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2164      	movs	r1, #100	@ 0x64
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	3332      	adds	r3, #50	@ 0x32
 8003802:	4a08      	ldr	r2, [pc, #32]	@ (8003824 <UART_SetConfig+0x2d4>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	f003 0207 	and.w	r2, r3, #7
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4422      	add	r2, r4
 8003816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003818:	e106      	b.n	8003a28 <UART_SetConfig+0x4d8>
 800381a:	bf00      	nop
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003832:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800383a:	4642      	mov	r2, r8
 800383c:	464b      	mov	r3, r9
 800383e:	1891      	adds	r1, r2, r2
 8003840:	6239      	str	r1, [r7, #32]
 8003842:	415b      	adcs	r3, r3
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
 8003846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800384a:	4641      	mov	r1, r8
 800384c:	1854      	adds	r4, r2, r1
 800384e:	4649      	mov	r1, r9
 8003850:	eb43 0501 	adc.w	r5, r3, r1
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	00eb      	lsls	r3, r5, #3
 800385e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	4614      	mov	r4, r2
 8003866:	461d      	mov	r5, r3
 8003868:	4643      	mov	r3, r8
 800386a:	18e3      	adds	r3, r4, r3
 800386c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003870:	464b      	mov	r3, r9
 8003872:	eb45 0303 	adc.w	r3, r5, r3
 8003876:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003886:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003896:	4629      	mov	r1, r5
 8003898:	008b      	lsls	r3, r1, #2
 800389a:	4621      	mov	r1, r4
 800389c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a0:	4621      	mov	r1, r4
 80038a2:	008a      	lsls	r2, r1, #2
 80038a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80038a8:	f7fc fcea 	bl	8000280 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4b60      	ldr	r3, [pc, #384]	@ (8003a34 <UART_SetConfig+0x4e4>)
 80038b2:	fba3 2302 	umull	r2, r3, r3, r2
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	011c      	lsls	r4, r3, #4
 80038ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	1891      	adds	r1, r2, r2
 80038d2:	61b9      	str	r1, [r7, #24]
 80038d4:	415b      	adcs	r3, r3
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038dc:	4641      	mov	r1, r8
 80038de:	1851      	adds	r1, r2, r1
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	4649      	mov	r1, r9
 80038e4:	414b      	adcs	r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f4:	4659      	mov	r1, fp
 80038f6:	00cb      	lsls	r3, r1, #3
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fe:	4651      	mov	r1, sl
 8003900:	00ca      	lsls	r2, r1, #3
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	4603      	mov	r3, r0
 8003908:	4642      	mov	r2, r8
 800390a:	189b      	adds	r3, r3, r2
 800390c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003910:	464b      	mov	r3, r9
 8003912:	460a      	mov	r2, r1
 8003914:	eb42 0303 	adc.w	r3, r2, r3
 8003918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003926:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003934:	4649      	mov	r1, r9
 8003936:	008b      	lsls	r3, r1, #2
 8003938:	4641      	mov	r1, r8
 800393a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800393e:	4641      	mov	r1, r8
 8003940:	008a      	lsls	r2, r1, #2
 8003942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003946:	f7fc fc9b 	bl	8000280 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4611      	mov	r1, r2
 8003950:	4b38      	ldr	r3, [pc, #224]	@ (8003a34 <UART_SetConfig+0x4e4>)
 8003952:	fba3 2301 	umull	r2, r3, r3, r1
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2264      	movs	r2, #100	@ 0x64
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	1acb      	subs	r3, r1, r3
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	3332      	adds	r3, #50	@ 0x32
 8003964:	4a33      	ldr	r2, [pc, #204]	@ (8003a34 <UART_SetConfig+0x4e4>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003970:	441c      	add	r4, r3
 8003972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003976:	2200      	movs	r2, #0
 8003978:	673b      	str	r3, [r7, #112]	@ 0x70
 800397a:	677a      	str	r2, [r7, #116]	@ 0x74
 800397c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	1891      	adds	r1, r2, r2
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	415b      	adcs	r3, r3
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003990:	4641      	mov	r1, r8
 8003992:	1851      	adds	r1, r2, r1
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	4649      	mov	r1, r9
 8003998:	414b      	adcs	r3, r1
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039a8:	4659      	mov	r1, fp
 80039aa:	00cb      	lsls	r3, r1, #3
 80039ac:	4651      	mov	r1, sl
 80039ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b2:	4651      	mov	r1, sl
 80039b4:	00ca      	lsls	r2, r1, #3
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	4642      	mov	r2, r8
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039c2:	464b      	mov	r3, r9
 80039c4:	460a      	mov	r2, r1
 80039c6:	eb42 0303 	adc.w	r3, r2, r3
 80039ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039e4:	4649      	mov	r1, r9
 80039e6:	008b      	lsls	r3, r1, #2
 80039e8:	4641      	mov	r1, r8
 80039ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ee:	4641      	mov	r1, r8
 80039f0:	008a      	lsls	r2, r1, #2
 80039f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039f6:	f7fc fc43 	bl	8000280 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <UART_SetConfig+0x4e4>)
 8003a00:	fba3 1302 	umull	r1, r3, r3, r2
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	2164      	movs	r1, #100	@ 0x64
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	3332      	adds	r3, #50	@ 0x32
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <UART_SetConfig+0x4e4>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4422      	add	r2, r4
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a34:	51eb851f 	.word	0x51eb851f

08003a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	f107 001c 	add.w	r0, r7, #28
 8003a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d123      	bne.n	8003a9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f001 fae8 	bl	8005064 <USB_CoreReset>
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e01b      	b.n	8003ad2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f001 fadc 	bl	8005064 <USB_CoreReset>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ab0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ac4:	e005      	b.n	8003ad2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ad2:	7fbb      	ldrb	r3, [r7, #30]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10b      	bne.n	8003af0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f043 0206 	orr.w	r2, r3, #6
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003afc:	b004      	add	sp, #16
 8003afe:	4770      	bx	lr

08003b00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d165      	bne.n	8003be0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a41      	ldr	r2, [pc, #260]	@ (8003c1c <USB_SetTurnaroundTime+0x11c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d906      	bls.n	8003b2a <USB_SetTurnaroundTime+0x2a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4a40      	ldr	r2, [pc, #256]	@ (8003c20 <USB_SetTurnaroundTime+0x120>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d202      	bcs.n	8003b2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b24:	230f      	movs	r3, #15
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e062      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c20 <USB_SetTurnaroundTime+0x120>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d306      	bcc.n	8003b40 <USB_SetTurnaroundTime+0x40>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4a3b      	ldr	r2, [pc, #236]	@ (8003c24 <USB_SetTurnaroundTime+0x124>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d202      	bcs.n	8003b40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b3a:	230e      	movs	r3, #14
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e057      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a38      	ldr	r2, [pc, #224]	@ (8003c24 <USB_SetTurnaroundTime+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d306      	bcc.n	8003b56 <USB_SetTurnaroundTime+0x56>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4a37      	ldr	r2, [pc, #220]	@ (8003c28 <USB_SetTurnaroundTime+0x128>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d202      	bcs.n	8003b56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b50:	230d      	movs	r3, #13
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e04c      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a33      	ldr	r2, [pc, #204]	@ (8003c28 <USB_SetTurnaroundTime+0x128>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d306      	bcc.n	8003b6c <USB_SetTurnaroundTime+0x6c>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4a32      	ldr	r2, [pc, #200]	@ (8003c2c <USB_SetTurnaroundTime+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d802      	bhi.n	8003b6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b66:	230c      	movs	r3, #12
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e041      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c2c <USB_SetTurnaroundTime+0x12c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d906      	bls.n	8003b82 <USB_SetTurnaroundTime+0x82>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4a2e      	ldr	r2, [pc, #184]	@ (8003c30 <USB_SetTurnaroundTime+0x130>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d802      	bhi.n	8003b82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b7c:	230b      	movs	r3, #11
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e036      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	@ (8003c30 <USB_SetTurnaroundTime+0x130>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d906      	bls.n	8003b98 <USB_SetTurnaroundTime+0x98>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a29      	ldr	r2, [pc, #164]	@ (8003c34 <USB_SetTurnaroundTime+0x134>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d802      	bhi.n	8003b98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b92:	230a      	movs	r3, #10
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e02b      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4a26      	ldr	r2, [pc, #152]	@ (8003c34 <USB_SetTurnaroundTime+0x134>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d906      	bls.n	8003bae <USB_SetTurnaroundTime+0xae>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a25      	ldr	r2, [pc, #148]	@ (8003c38 <USB_SetTurnaroundTime+0x138>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d202      	bcs.n	8003bae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ba8:	2309      	movs	r3, #9
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e020      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <USB_SetTurnaroundTime+0x138>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d306      	bcc.n	8003bc4 <USB_SetTurnaroundTime+0xc4>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	@ (8003c3c <USB_SetTurnaroundTime+0x13c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d802      	bhi.n	8003bc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e015      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <USB_SetTurnaroundTime+0x13c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d906      	bls.n	8003bda <USB_SetTurnaroundTime+0xda>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a1c      	ldr	r2, [pc, #112]	@ (8003c40 <USB_SetTurnaroundTime+0x140>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d202      	bcs.n	8003bda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bd4:	2307      	movs	r3, #7
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e00a      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bda:	2306      	movs	r3, #6
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e007      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003be6:	2309      	movs	r3, #9
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e001      	b.n	8003bf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bec:	2309      	movs	r3, #9
 8003bee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	00d8acbf 	.word	0x00d8acbf
 8003c20:	00e4e1c0 	.word	0x00e4e1c0
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	01067380 	.word	0x01067380
 8003c2c:	011a499f 	.word	0x011a499f
 8003c30:	01312cff 	.word	0x01312cff
 8003c34:	014ca43f 	.word	0x014ca43f
 8003c38:	016e3600 	.word	0x016e3600
 8003c3c:	01a6ab1f 	.word	0x01a6ab1f
 8003c40:	01e84800 	.word	0x01e84800

08003c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d115      	bne.n	8003cd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cb6:	200a      	movs	r0, #10
 8003cb8:	f7fd f8f6 	bl	8000ea8 <HAL_Delay>
      ms += 10U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	330a      	adds	r3, #10
 8003cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 f93f 	bl	8004f46 <USB_GetMode>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d01e      	beq.n	8003d0c <USB_SetCurrentMode+0x84>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cd2:	d9f0      	bls.n	8003cb6 <USB_SetCurrentMode+0x2e>
 8003cd4:	e01a      	b.n	8003d0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d115      	bne.n	8003d08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ce8:	200a      	movs	r0, #10
 8003cea:	f7fd f8dd 	bl	8000ea8 <HAL_Delay>
      ms += 10U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	330a      	adds	r3, #10
 8003cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f001 f926 	bl	8004f46 <USB_GetMode>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <USB_SetCurrentMode+0x84>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d04:	d9f0      	bls.n	8003ce8 <USB_SetCurrentMode+0x60>
 8003d06:	e001      	b.n	8003d0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e005      	b.n	8003d18 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003d10:	d101      	bne.n	8003d16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d20:	b084      	sub	sp, #16
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e009      	b.n	8003d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3340      	adds	r3, #64	@ 0x40
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	3301      	adds	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0e      	cmp	r3, #14
 8003d58:	d9f2      	bls.n	8003d40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11c      	bne.n	8003d9c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d9a:	e00b      	b.n	8003db4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dc0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10d      	bne.n	8003de4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f968 	bl	80040a8 <USB_SetDevSpeed>
 8003dd8:	e008      	b.n	8003dec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dda:	2101      	movs	r1, #1
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f963 	bl	80040a8 <USB_SetDevSpeed>
 8003de2:	e003      	b.n	8003dec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003de4:	2103      	movs	r1, #3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f95e 	bl	80040a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dec:	2110      	movs	r1, #16
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8fa 	bl	8003fe8 <USB_FlushTxFifo>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f924 	bl	800404c <USB_FlushRxFifo>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	461a      	mov	r2, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	e043      	b.n	8003ec0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e4e:	d118      	bne.n	8003e82 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e62:	461a      	mov	r2, r3
 8003e64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e013      	b.n	8003e94 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e008      	b.n	8003e94 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d3b5      	bcc.n	8003e38 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e043      	b.n	8003f5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee8:	d118      	bne.n	8003f1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e013      	b.n	8003f2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f12:	461a      	mov	r2, r3
 8003f14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e008      	b.n	8003f2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	3301      	adds	r3, #1
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f5e:	461a      	mov	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d3b5      	bcc.n	8003ed2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003f86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f043 0210 	orr.w	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <USB_DevInit+0x2c4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f043 0208 	orr.w	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe0:	b004      	add	sp, #16
 8003fe2:	4770      	bx	lr
 8003fe4:	803c3800 	.word	0x803c3800

08003fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004002:	d901      	bls.n	8004008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e01b      	b.n	8004040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	daf2      	bge.n	8003ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	019b      	lsls	r3, r3, #6
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800402c:	d901      	bls.n	8004032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e006      	b.n	8004040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d0f0      	beq.n	8004020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004064:	d901      	bls.n	800406a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e018      	b.n	800409c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	daf2      	bge.n	8004058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2210      	movs	r2, #16
 800407a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004088:	d901      	bls.n	800408e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e006      	b.n	800409c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d0f0      	beq.n	800407c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
 80040fe:	e00a      	b.n	8004116 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d002      	beq.n	800410c <USB_GetDevSpeed+0x32>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d102      	bne.n	8004112 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800410c:	2302      	movs	r3, #2
 800410e:	75fb      	strb	r3, [r7, #23]
 8004110:	e001      	b.n	8004116 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004112:	230f      	movs	r3, #15
 8004114:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004116:	7dfb      	ldrb	r3, [r7, #23]
}
 8004118:	4618      	mov	r0, r3
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d13a      	bne.n	80041b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800415e:	4313      	orrs	r3, r2
 8004160:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d155      	bne.n	8004224 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	791b      	ldrb	r3, [r3, #4]
 8004192:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004194:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	059b      	lsls	r3, r3, #22
 800419a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800419c:	4313      	orrs	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e036      	b.n	8004224 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11a      	bne.n	8004224 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	791b      	ldrb	r3, [r3, #4]
 8004208:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800420a:	430b      	orrs	r3, r1
 800420c:	4313      	orrs	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004222:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d161      	bne.n	8004314 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004266:	d11f      	bne.n	80042a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004282:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004286:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042c8:	4013      	ands	r3, r2
 80042ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ec:	4013      	ands	r3, r2
 80042ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0159      	lsls	r1, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	440b      	add	r3, r1
 8004306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430a:	4619      	mov	r1, r3
 800430c:	4b35      	ldr	r3, [pc, #212]	@ (80043e4 <USB_DeactivateEndpoint+0x1b0>)
 800430e:	4013      	ands	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
 8004312:	e060      	b.n	80043d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800432a:	d11f      	bne.n	800436c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004346:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800434a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	440a      	add	r2, r1
 8004362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004366:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800436a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	43db      	mvns	r3, r3
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800438c:	4013      	ands	r3, r2
 800438e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2101      	movs	r1, #1
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	43db      	mvns	r3, r3
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b0:	4013      	ands	r3, r2
 80043b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	0159      	lsls	r1, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	4619      	mov	r1, r3
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <USB_DeactivateEndpoint+0x1b4>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	ec337800 	.word	0xec337800
 80043e8:	eff37800 	.word	0xeff37800

080043ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 817f 	bne.w	800470c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d132      	bne.n	800447c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004430:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004434:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004438:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004454:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004474:	0cdb      	lsrs	r3, r3, #19
 8004476:	04db      	lsls	r3, r3, #19
 8004478:	6113      	str	r3, [r2, #16]
 800447a:	e097      	b.n	80045ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	440a      	add	r2, r1
 8004492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004496:	0cdb      	lsrs	r3, r3, #19
 8004498:	04db      	lsls	r3, r3, #19
 800449a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11a      	bne.n	80044fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d903      	bls.n	80044da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044f8:	6113      	str	r3, [r2, #16]
 80044fa:	e044      	b.n	8004586 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4413      	add	r3, r2
 8004506:	1e5a      	subs	r2, r3, #1
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	8afb      	ldrh	r3, [r7, #22]
 8004522:	04d9      	lsls	r1, r3, #19
 8004524:	4ba4      	ldr	r3, [pc, #656]	@ (80047b8 <USB_EPStartXfer+0x3cc>)
 8004526:	400b      	ands	r3, r1
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	0148      	lsls	r0, r1, #5
 800452c:	69f9      	ldr	r1, [r7, #28]
 800452e:	4401      	add	r1, r0
 8004530:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	791b      	ldrb	r3, [r3, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d122      	bne.n	8004586 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800455a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800455e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	8afb      	ldrh	r3, [r7, #22]
 8004570:	075b      	lsls	r3, r3, #29
 8004572:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004576:	69b9      	ldr	r1, [r7, #24]
 8004578:	0148      	lsls	r0, r1, #5
 800457a:	69f9      	ldr	r1, [r7, #28]
 800457c:	4401      	add	r1, r0
 800457e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	0148      	lsls	r0, r1, #5
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	4401      	add	r1, r0
 80045a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045a8:	4313      	orrs	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d14b      	bne.n	800464a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	791b      	ldrb	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d128      	bne.n	8004628 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d110      	bne.n	8004608 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004600:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00f      	b.n	8004628 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	0151      	lsls	r1, r2, #5
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	440a      	add	r2, r1
 800463e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004642:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e166      	b.n	8004918 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004664:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004668:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	791b      	ldrb	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d015      	beq.n	800469e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 814e 	beq.w	8004918 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	69f9      	ldr	r1, [r7, #28]
 8004694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004698:	4313      	orrs	r3, r2
 800469a:	634b      	str	r3, [r1, #52]	@ 0x34
 800469c:	e13c      	b.n	8004918 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d110      	bne.n	80046d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e00f      	b.n	80046f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	68d9      	ldr	r1, [r3, #12]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	b298      	uxth	r0, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4603      	mov	r3, r0
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f9b9 	bl	8004a7c <USB_WritePacket>
 800470a:	e105      	b.n	8004918 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004726:	0cdb      	lsrs	r3, r3, #19
 8004728:	04db      	lsls	r3, r3, #19
 800472a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004746:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800474a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800474e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d132      	bne.n	80047bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	0148      	lsls	r0, r1, #5
 8004788:	69f9      	ldr	r1, [r7, #28]
 800478a:	4401      	add	r1, r0
 800478c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004790:	4313      	orrs	r3, r2
 8004792:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047b2:	6113      	str	r3, [r2, #16]
 80047b4:	e062      	b.n	800487c <USB_EPStartXfer+0x490>
 80047b6:	bf00      	nop
 80047b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d123      	bne.n	800480c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	0148      	lsls	r0, r1, #5
 80047de:	69f9      	ldr	r1, [r7, #28]
 80047e0:	4401      	add	r1, r0
 80047e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004808:	6113      	str	r3, [r2, #16]
 800480a:	e037      	b.n	800487c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4413      	add	r3, r2
 8004816:	1e5a      	subs	r2, r3, #1
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	8afa      	ldrh	r2, [r7, #22]
 8004828:	fb03 f202 	mul.w	r2, r3, r2
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	8afb      	ldrh	r3, [r7, #22]
 8004840:	04d9      	lsls	r1, r3, #19
 8004842:	4b38      	ldr	r3, [pc, #224]	@ (8004924 <USB_EPStartXfer+0x538>)
 8004844:	400b      	ands	r3, r1
 8004846:	69b9      	ldr	r1, [r7, #24]
 8004848:	0148      	lsls	r0, r1, #5
 800484a:	69f9      	ldr	r1, [r7, #28]
 800484c:	4401      	add	r1, r0
 800484e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004852:	4313      	orrs	r3, r2
 8004854:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486c:	69b9      	ldr	r1, [r7, #24]
 800486e:	0148      	lsls	r0, r1, #5
 8004870:	69f9      	ldr	r1, [r7, #28]
 8004872:	4401      	add	r1, r0
 8004874:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004878:	4313      	orrs	r3, r2
 800487a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10d      	bne.n	800489e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	68d9      	ldr	r1, [r3, #12]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489a:	460a      	mov	r2, r1
 800489c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d128      	bne.n	80048f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d110      	bne.n	80048d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e00f      	b.n	80048f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004912:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004916:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	1ff80000 	.word	0x1ff80000

08004928 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d14a      	bne.n	80049dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800495a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800495e:	f040 8086 	bne.w	8004a6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004980:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004984:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d902      	bls.n	80049c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
          break;
 80049be:	e056      	b.n	8004a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049d8:	d0e7      	beq.n	80049aa <USB_EPStopXfer+0x82>
 80049da:	e048      	b.n	8004a6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049f4:	d13b      	bne.n	8004a6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d902      	bls.n	8004a54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
          break;
 8004a52:	e00c      	b.n	8004a6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a6c:	d0e7      	beq.n	8004a3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	@ 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4611      	mov	r1, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	71fb      	strb	r3, [r7, #7]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d123      	bne.n	8004aea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004aa2:	88bb      	ldrh	r3, [r7, #4]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e018      	b.n	8004ae2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	031a      	lsls	r2, r3, #12
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004abc:	461a      	mov	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d3e2      	bcc.n	8004ab0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3724      	adds	r7, #36	@ 0x24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b08b      	sub	sp, #44	@ 0x2c
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	089b      	lsrs	r3, r3, #2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	e014      	b.n	8004b4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	3301      	adds	r3, #1
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	3301      	adds	r3, #1
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	3301      	adds	r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	3301      	adds	r3, #1
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d3e6      	bcc.n	8004b24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b56:	8bfb      	ldrh	r3, [r7, #30]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01e      	beq.n	8004b9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b66:	461a      	mov	r2, r3
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	701a      	strb	r2, [r3, #0]
      i++;
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	3301      	adds	r3, #1
 8004b86:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004b8e:	8bfb      	ldrh	r3, [r7, #30]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b94:	8bfb      	ldrh	r3, [r7, #30]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ea      	bne.n	8004b70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	372c      	adds	r7, #44	@ 0x2c
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d12c      	bne.n	8004c1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db12      	blt.n	8004bfc <USB_EPSetStall+0x54>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00f      	beq.n	8004bfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e02b      	b.n	8004c76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	db12      	blt.n	8004c56 <USB_EPSetStall+0xae>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00f      	beq.n	8004c56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d128      	bne.n	8004cf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d003      	beq.n	8004cd0 <USB_EPClearStall+0x4c>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d138      	bne.n	8004d42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e027      	b.n	8004d42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	0151      	lsls	r1, r2, #5
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	440a      	add	r2, r1
 8004d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	791b      	ldrb	r3, [r3, #4]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d003      	beq.n	8004d22 <USB_EPClearStall+0x9e>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	791b      	ldrb	r3, [r3, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d10f      	bne.n	8004d42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d6e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dca:	f023 0302 	bic.w	r3, r3, #2
 8004dce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0c1b      	lsrs	r3, r3, #16
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	b29b      	uxth	r3, r3
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004edc:	68bb      	ldr	r3, [r7, #8]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b087      	sub	sp, #28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	01db      	lsls	r3, r3, #7
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f38:	68bb      	ldr	r3, [r7, #8]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0301 	and.w	r3, r3, #1
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f80:	f023 0307 	bic.w	r3, r3, #7
 8004f84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	333c      	adds	r3, #60	@ 0x3c
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4a26      	ldr	r2, [pc, #152]	@ (8005060 <USB_EP0_OutStart+0xb8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d90a      	bls.n	8004fe2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fdc:	d101      	bne.n	8004fe2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e037      	b.n	8005052 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005010:	f043 0318 	orr.w	r3, r3, #24
 8005014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005024:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005028:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d10f      	bne.n	8005050 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005036:	461a      	mov	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800504a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800504e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	4f54300a 	.word	0x4f54300a

08005064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800507c:	d901      	bls.n	8005082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e01b      	b.n	80050ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	daf2      	bge.n	8005070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3301      	adds	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a6:	d901      	bls.n	80050ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d0f0      	beq.n	800509a <USB_CoreReset+0x36>

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80050d4:	2010      	movs	r0, #16
 80050d6:	f002 fac3 	bl	8007660 <USBD_static_malloc>
 80050da:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	32b0      	adds	r2, #176	@ 0xb0
 80050ec:	2100      	movs	r1, #0
 80050ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050f2:	2302      	movs	r3, #2
 80050f4:	e048      	b.n	8005188 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	32b0      	adds	r2, #176	@ 0xb0
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	32b0      	adds	r2, #176	@ 0xb0
 8005110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	7c1b      	ldrb	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005122:	4b1b      	ldr	r3, [pc, #108]	@ (8005190 <USBD_HID_Init+0xc8>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	3326      	adds	r3, #38	@ 0x26
 8005138:	2207      	movs	r2, #7
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e00c      	b.n	8005158 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800513e:	4b14      	ldr	r3, [pc, #80]	@ (8005190 <USBD_HID_Init+0xc8>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	f003 020f 	and.w	r2, r3, #15
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	3326      	adds	r3, #38	@ 0x26
 8005154:	220a      	movs	r2, #10
 8005156:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005158:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <USBD_HID_Init+0xc8>)
 800515a:	7819      	ldrb	r1, [r3, #0]
 800515c:	2304      	movs	r3, #4
 800515e:	2203      	movs	r2, #3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f002 f96c 	bl	800743e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005166:	4b0a      	ldr	r3, [pc, #40]	@ (8005190 <USBD_HID_Init+0xc8>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f003 020f 	and.w	r2, r3, #15
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	3324      	adds	r3, #36	@ 0x24
 800517c:	2201      	movs	r2, #1
 800517e:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	2000011b 	.word	0x2000011b

08005194 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80051a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005220 <USBD_HID_DeInit+0x8c>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f002 f96f 	bl	800748a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80051ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <USBD_HID_DeInit+0x8c>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	3324      	adds	r3, #36	@ 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80051c6:	4b16      	ldr	r3, [pc, #88]	@ (8005220 <USBD_HID_DeInit+0x8c>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3326      	adds	r3, #38	@ 0x26
 80051dc:	2200      	movs	r2, #0
 80051de:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	32b0      	adds	r2, #176	@ 0xb0
 80051ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d011      	beq.n	8005216 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	32b0      	adds	r2, #176	@ 0xb0
 80051fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fa3b 	bl	800767c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	32b0      	adds	r2, #176	@ 0xb0
 8005210:	2100      	movs	r1, #0
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	2000011b 	.word	0x2000011b

08005224 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	32b0      	adds	r2, #176	@ 0xb0
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	e0e8      	b.n	8005422 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005258:	2b00      	cmp	r3, #0
 800525a:	d046      	beq.n	80052ea <USBD_HID_Setup+0xc6>
 800525c:	2b20      	cmp	r3, #32
 800525e:	f040 80d8 	bne.w	8005412 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	3b02      	subs	r3, #2
 8005268:	2b09      	cmp	r3, #9
 800526a:	d836      	bhi.n	80052da <USBD_HID_Setup+0xb6>
 800526c:	a201      	add	r2, pc, #4	@ (adr r2, 8005274 <USBD_HID_Setup+0x50>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	080052cb 	.word	0x080052cb
 8005278:	080052ab 	.word	0x080052ab
 800527c:	080052db 	.word	0x080052db
 8005280:	080052db 	.word	0x080052db
 8005284:	080052db 	.word	0x080052db
 8005288:	080052db 	.word	0x080052db
 800528c:	080052db 	.word	0x080052db
 8005290:	080052db 	.word	0x080052db
 8005294:	080052b9 	.word	0x080052b9
 8005298:	0800529d 	.word	0x0800529d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	885b      	ldrh	r3, [r3, #2]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]
          break;
 80052a8:	e01e      	b.n	80052e8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fbe5 	bl	8006a80 <USBD_CtlSendData>
          break;
 80052b6:	e017      	b.n	80052e8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	885b      	ldrh	r3, [r3, #2]
 80052bc:	0a1b      	lsrs	r3, r3, #8
 80052be:	b29b      	uxth	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	605a      	str	r2, [r3, #4]
          break;
 80052c8:	e00e      	b.n	80052e8 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3304      	adds	r3, #4
 80052ce:	2201      	movs	r2, #1
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fbd4 	bl	8006a80 <USBD_CtlSendData>
          break;
 80052d8:	e006      	b.n	80052e8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 fb52 	bl	8006986 <USBD_CtlError>
          ret = USBD_FAIL;
 80052e2:	2303      	movs	r3, #3
 80052e4:	75fb      	strb	r3, [r7, #23]
          break;
 80052e6:	bf00      	nop
      }
      break;
 80052e8:	e09a      	b.n	8005420 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b0b      	cmp	r3, #11
 80052f0:	f200 8086 	bhi.w	8005400 <USBD_HID_Setup+0x1dc>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <USBD_HID_Setup+0xd8>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	0800532d 	.word	0x0800532d
 8005300:	0800540f 	.word	0x0800540f
 8005304:	08005401 	.word	0x08005401
 8005308:	08005401 	.word	0x08005401
 800530c:	08005401 	.word	0x08005401
 8005310:	08005401 	.word	0x08005401
 8005314:	08005357 	.word	0x08005357
 8005318:	08005401 	.word	0x08005401
 800531c:	08005401 	.word	0x08005401
 8005320:	08005401 	.word	0x08005401
 8005324:	080053af 	.word	0x080053af
 8005328:	080053d9 	.word	0x080053d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b03      	cmp	r3, #3
 8005336:	d107      	bne.n	8005348 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005338:	f107 030a 	add.w	r3, r7, #10
 800533c:	2202      	movs	r2, #2
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 fb9d 	bl	8006a80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005346:	e063      	b.n	8005410 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 fb1b 	bl	8006986 <USBD_CtlError>
            ret = USBD_FAIL;
 8005350:	2303      	movs	r3, #3
 8005352:	75fb      	strb	r3, [r7, #23]
          break;
 8005354:	e05c      	b.n	8005410 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	885b      	ldrh	r3, [r3, #2]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b22      	cmp	r3, #34	@ 0x22
 8005360:	d108      	bne.n	8005374 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	88db      	ldrh	r3, [r3, #6]
 8005366:	2b3f      	cmp	r3, #63	@ 0x3f
 8005368:	bf28      	it	cs
 800536a:	233f      	movcs	r3, #63	@ 0x3f
 800536c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800536e:	4b2f      	ldr	r3, [pc, #188]	@ (800542c <USBD_HID_Setup+0x208>)
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	e015      	b.n	80053a0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	885b      	ldrh	r3, [r3, #2]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b21      	cmp	r3, #33	@ 0x21
 800537e:	d108      	bne.n	8005392 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005380:	4b2b      	ldr	r3, [pc, #172]	@ (8005430 <USBD_HID_Setup+0x20c>)
 8005382:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	88db      	ldrh	r3, [r3, #6]
 8005388:	2b09      	cmp	r3, #9
 800538a:	bf28      	it	cs
 800538c:	2309      	movcs	r3, #9
 800538e:	82bb      	strh	r3, [r7, #20]
 8005390:	e006      	b.n	80053a0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 faf6 	bl	8006986 <USBD_CtlError>
            ret = USBD_FAIL;
 800539a:	2303      	movs	r3, #3
 800539c:	75fb      	strb	r3, [r7, #23]
            break;
 800539e:	e037      	b.n	8005410 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80053a0:	8abb      	ldrh	r3, [r7, #20]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6939      	ldr	r1, [r7, #16]
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fb6a 	bl	8006a80 <USBD_CtlSendData>
          break;
 80053ac:	e030      	b.n	8005410 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d107      	bne.n	80053ca <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3308      	adds	r3, #8
 80053be:	2201      	movs	r2, #1
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 fb5c 	bl	8006a80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053c8:	e022      	b.n	8005410 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fada 	bl	8006986 <USBD_CtlError>
            ret = USBD_FAIL;
 80053d2:	2303      	movs	r3, #3
 80053d4:	75fb      	strb	r3, [r7, #23]
          break;
 80053d6:	e01b      	b.n	8005410 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d106      	bne.n	80053f2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	885b      	ldrh	r3, [r3, #2]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053f0:	e00e      	b.n	8005410 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 fac6 	bl	8006986 <USBD_CtlError>
            ret = USBD_FAIL;
 80053fa:	2303      	movs	r3, #3
 80053fc:	75fb      	strb	r3, [r7, #23]
          break;
 80053fe:	e007      	b.n	8005410 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fabf 	bl	8006986 <USBD_CtlError>
          ret = USBD_FAIL;
 8005408:	2303      	movs	r3, #3
 800540a:	75fb      	strb	r3, [r7, #23]
          break;
 800540c:	e000      	b.n	8005410 <USBD_HID_Setup+0x1ec>
          break;
 800540e:	bf00      	nop
      }
      break;
 8005410:	e006      	b.n	8005420 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fab6 	bl	8006986 <USBD_CtlError>
      ret = USBD_FAIL;
 800541a:	2303      	movs	r3, #3
 800541c:	75fb      	strb	r3, [r7, #23]
      break;
 800541e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005420:	7dfb      	ldrb	r3, [r7, #23]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	200000dc 	.word	0x200000dc
 8005430:	200000c4 	.word	0x200000c4

08005434 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	32b0      	adds	r2, #176	@ 0xb0
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005458:	2303      	movs	r3, #3
 800545a:	e014      	b.n	8005486 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b03      	cmp	r3, #3
 8005466:	d10d      	bne.n	8005484 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	7b1b      	ldrb	r3, [r3, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2201      	movs	r2, #1
 8005474:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <USBD_HID_SendReport+0x5c>)
 8005478:	7819      	ldrb	r1, [r3, #0]
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f002 f8ab 	bl	80075da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	2000011b 	.word	0x2000011b

08005494 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800549c:	2181      	movs	r1, #129	@ 0x81
 800549e:	4809      	ldr	r0, [pc, #36]	@ (80054c4 <USBD_HID_GetFSCfgDesc+0x30>)
 80054a0:	f000 fc3b 	bl	8005d1a <USBD_GetEpDesc>
 80054a4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	220a      	movs	r2, #10
 80054b0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2222      	movs	r2, #34	@ 0x22
 80054b6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80054b8:	4b02      	ldr	r3, [pc, #8]	@ (80054c4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200000a0 	.word	0x200000a0

080054c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80054d0:	2181      	movs	r1, #129	@ 0x81
 80054d2:	4809      	ldr	r0, [pc, #36]	@ (80054f8 <USBD_HID_GetHSCfgDesc+0x30>)
 80054d4:	f000 fc21 	bl	8005d1a <USBD_GetEpDesc>
 80054d8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2207      	movs	r2, #7
 80054e4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2222      	movs	r2, #34	@ 0x22
 80054ea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80054ec:	4b02      	ldr	r3, [pc, #8]	@ (80054f8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200000a0 	.word	0x200000a0

080054fc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005504:	2181      	movs	r1, #129	@ 0x81
 8005506:	4809      	ldr	r0, [pc, #36]	@ (800552c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005508:	f000 fc07 	bl	8005d1a <USBD_GetEpDesc>
 800550c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	220a      	movs	r2, #10
 8005518:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2222      	movs	r2, #34	@ 0x22
 800551e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005520:	4b02      	ldr	r3, [pc, #8]	@ (800552c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	200000a0 	.word	0x200000a0

08005530 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	32b0      	adds	r2, #176	@ 0xb0
 8005546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554a:	2200      	movs	r2, #0
 800554c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	220a      	movs	r2, #10
 8005568:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800556a:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	200000d0 	.word	0x200000d0

0800557c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	e01f      	b.n	80055d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	79fa      	ldrb	r2, [r7, #7]
 80055c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f001 fe87 	bl	80072dc <USBD_LL_Init>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e025      	b.n	8005640 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	32ae      	adds	r2, #174	@ 0xae
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00f      	beq.n	8005630 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	32ae      	adds	r2, #174	@ 0xae
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	f107 020e 	add.w	r2, r7, #14
 8005624:	4610      	mov	r0, r2
 8005626:	4798      	blx	r3
 8005628:	4602      	mov	r2, r0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fed9 	bl	8007408 <USBD_LL_Start>
 8005656:	4603      	mov	r3, r0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005668:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	4611      	mov	r1, r2
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	4611      	mov	r1, r2
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f90c 	bl	8006912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b02      	cmp	r3, #2
 800571c:	d01a      	beq.n	8005754 <USBD_LL_SetupStage+0x72>
 800571e:	2b02      	cmp	r3, #2
 8005720:	d822      	bhi.n	8005768 <USBD_LL_SetupStage+0x86>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <USBD_LL_SetupStage+0x4a>
 8005726:	2b01      	cmp	r3, #1
 8005728:	d00a      	beq.n	8005740 <USBD_LL_SetupStage+0x5e>
 800572a:	e01d      	b.n	8005768 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fb63 	bl	8005e00 <USBD_StdDevReq>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
      break;
 800573e:	e020      	b.n	8005782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fbcb 	bl	8005ee4 <USBD_StdItfReq>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e016      	b.n	8005782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fc2d 	bl	8005fbc <USBD_StdEPReq>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]
      break;
 8005766:	e00c      	b.n	8005782 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800576e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005772:	b2db      	uxtb	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fea6 	bl	80074c8 <USBD_LL_StallEP>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
      break;
 8005780:	bf00      	nop
  }

  return ret;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	460b      	mov	r3, r1
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d16e      	bne.n	8005882 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80057aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	f040 8098 	bne.w	80058e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d913      	bls.n	80057ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4293      	cmp	r3, r2
 80057dc:	bf28      	it	cs
 80057de:	4613      	movcs	r3, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 f977 	bl	8006ad8 <USBD_CtlContinueRx>
 80057ea:	e07d      	b.n	80058e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d014      	beq.n	8005824 <USBD_LL_DataOutStage+0x98>
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d81d      	bhi.n	800583a <USBD_LL_DataOutStage+0xae>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <USBD_LL_DataOutStage+0x7c>
 8005802:	2b01      	cmp	r3, #1
 8005804:	d003      	beq.n	800580e <USBD_LL_DataOutStage+0x82>
 8005806:	e018      	b.n	800583a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	75bb      	strb	r3, [r7, #22]
            break;
 800580c:	e018      	b.n	8005840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005814:	b2db      	uxtb	r3, r3
 8005816:	4619      	mov	r1, r3
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fa64 	bl	8005ce6 <USBD_CoreFindIF>
 800581e:	4603      	mov	r3, r0
 8005820:	75bb      	strb	r3, [r7, #22]
            break;
 8005822:	e00d      	b.n	8005840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa66 	bl	8005d00 <USBD_CoreFindEP>
 8005834:	4603      	mov	r3, r0
 8005836:	75bb      	strb	r3, [r7, #22]
            break;
 8005838:	e002      	b.n	8005840 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	75bb      	strb	r3, [r7, #22]
            break;
 800583e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005840:	7dbb      	ldrb	r3, [r7, #22]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d119      	bne.n	800587a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b03      	cmp	r3, #3
 8005850:	d113      	bne.n	800587a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005852:	7dba      	ldrb	r2, [r7, #22]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	32ae      	adds	r2, #174	@ 0xae
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005862:	7dba      	ldrb	r2, [r7, #22]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800586a:	7dba      	ldrb	r2, [r7, #22]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	32ae      	adds	r2, #174	@ 0xae
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f001 f93d 	bl	8006afa <USBD_CtlSendStatus>
 8005880:	e032      	b.n	80058e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005888:	b2db      	uxtb	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fa37 	bl	8005d00 <USBD_CoreFindEP>
 8005892:	4603      	mov	r3, r0
 8005894:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	2bff      	cmp	r3, #255	@ 0xff
 800589a:	d025      	beq.n	80058e8 <USBD_LL_DataOutStage+0x15c>
 800589c:	7dbb      	ldrb	r3, [r7, #22]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d122      	bne.n	80058e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d117      	bne.n	80058de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80058ae:	7dba      	ldrb	r2, [r7, #22]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	32ae      	adds	r2, #174	@ 0xae
 80058b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00f      	beq.n	80058de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80058be:	7dba      	ldrb	r2, [r7, #22]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80058c6:	7dba      	ldrb	r2, [r7, #22]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	32ae      	adds	r2, #174	@ 0xae
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	7afa      	ldrb	r2, [r7, #11]
 80058d4:	4611      	mov	r1, r2
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	4798      	blx	r3
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	e000      	b.n	80058ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	460b      	mov	r3, r1
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005900:	7afb      	ldrb	r3, [r7, #11]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d16f      	bne.n	80059e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3314      	adds	r3, #20
 800590a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005912:	2b02      	cmp	r3, #2
 8005914:	d15a      	bne.n	80059cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	429a      	cmp	r2, r3
 8005920:	d914      	bls.n	800594c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	461a      	mov	r2, r3
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f001 f8bc 	bl	8006ab6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800593e:	2300      	movs	r3, #0
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f001 fe69 	bl	800761c <USBD_LL_PrepareReceive>
 800594a:	e03f      	b.n	80059cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d11c      	bne.n	8005992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005960:	429a      	cmp	r2, r3
 8005962:	d316      	bcc.n	8005992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800596e:	429a      	cmp	r2, r3
 8005970:	d20f      	bcs.n	8005992 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005972:	2200      	movs	r2, #0
 8005974:	2100      	movs	r1, #0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f001 f89d 	bl	8006ab6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005984:	2300      	movs	r3, #0
 8005986:	2200      	movs	r2, #0
 8005988:	2100      	movs	r1, #0
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f001 fe46 	bl	800761c <USBD_LL_PrepareReceive>
 8005990:	e01c      	b.n	80059cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d10f      	bne.n	80059be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059be:	2180      	movs	r1, #128	@ 0x80
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f001 fd81 	bl	80074c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f001 f8aa 	bl	8006b20 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d03a      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fe42 	bl	8005660 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80059e4:	e032      	b.n	8005a4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f985 	bl	8005d00 <USBD_CoreFindEP>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2bff      	cmp	r3, #255	@ 0xff
 80059fe:	d025      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d122      	bne.n	8005a4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d11c      	bne.n	8005a4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a12:	7dfa      	ldrb	r2, [r7, #23]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	32ae      	adds	r2, #174	@ 0xae
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a22:	7dfa      	ldrb	r2, [r7, #23]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a2a:	7dfa      	ldrb	r2, [r7, #23]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	32ae      	adds	r2, #174	@ 0xae
 8005a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	7afa      	ldrb	r2, [r7, #11]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	4798      	blx	r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a42:	7dbb      	ldrb	r3, [r7, #22]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a48:	7dbb      	ldrb	r3, [r7, #22]
 8005a4a:	e000      	b.n	8005a4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00e      	beq.n	8005abc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6852      	ldr	r2, [r2, #4]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	4611      	mov	r1, r2
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005abc:	2340      	movs	r3, #64	@ 0x40
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fcbb 	bl	800743e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2240      	movs	r2, #64	@ 0x40
 8005ad4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	2200      	movs	r2, #0
 8005adc:	2180      	movs	r1, #128	@ 0x80
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 fcad 	bl	800743e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2240      	movs	r2, #64	@ 0x40
 8005aee:	621a      	str	r2, [r3, #32]

  return ret;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d006      	beq.n	8005b3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d106      	bne.n	8005b74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d110      	bne.n	8005bb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	32ae      	adds	r2, #174	@ 0xae
 8005bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e01c      	b.n	8005c1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d115      	bne.n	8005c1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32ae      	adds	r2, #174	@ 0xae
 8005bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	32ae      	adds	r2, #174	@ 0xae
 8005c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	4611      	mov	r1, r2
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	32ae      	adds	r2, #174	@ 0xae
 8005c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e01c      	b.n	8005c82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d115      	bne.n	8005c80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	32ae      	adds	r2, #174	@ 0xae
 8005c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	32ae      	adds	r2, #174	@ 0xae
 8005c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6852      	ldr	r2, [r2, #4]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	4611      	mov	r1, r2
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	885b      	ldrh	r3, [r3, #2]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d91f      	bls.n	8005d80 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d46:	e013      	b.n	8005d70 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d48:	f107 030a 	add.w	r3, r7, #10
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f000 f81b 	bl	8005d8a <USBD_GetNextDesc>
 8005d54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d108      	bne.n	8005d70 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	789b      	ldrb	r3, [r3, #2]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d008      	beq.n	8005d7e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	885b      	ldrh	r3, [r3, #2]
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d8e5      	bhi.n	8005d48 <USBD_GetEpDesc+0x2e>
 8005d7c:	e000      	b.n	8005d80 <USBD_GetEpDesc+0x66>
          break;
 8005d7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d80:	693b      	ldr	r3, [r7, #16]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	7812      	ldrb	r2, [r2, #0]
 8005da0:	4413      	add	r3, r2
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b087      	sub	sp, #28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005de0:	8a3b      	ldrh	r3, [r7, #16]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	b21a      	sxth	r2, r3
 8005de6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005df0:	89fb      	ldrh	r3, [r7, #14]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d005      	beq.n	8005e26 <USBD_StdDevReq+0x26>
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d857      	bhi.n	8005ece <USBD_StdDevReq+0xce>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00f      	beq.n	8005e42 <USBD_StdDevReq+0x42>
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d153      	bne.n	8005ece <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	32ae      	adds	r2, #174	@ 0xae
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e40:	e04a      	b.n	8005ed8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	785b      	ldrb	r3, [r3, #1]
 8005e46:	2b09      	cmp	r3, #9
 8005e48:	d83b      	bhi.n	8005ec2 <USBD_StdDevReq+0xc2>
 8005e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <USBD_StdDevReq+0x50>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	08005ec3 	.word	0x08005ec3
 8005e5c:	08005eaf 	.word	0x08005eaf
 8005e60:	08005ec3 	.word	0x08005ec3
 8005e64:	08005e83 	.word	0x08005e83
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005ec3 	.word	0x08005ec3
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005e8d 	.word	0x08005e8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa3c 	bl	80062f8 <USBD_GetDescriptor>
          break;
 8005e80:	e024      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fba1 	bl	80065cc <USBD_SetAddress>
          break;
 8005e8a:	e01f      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fbe0 	bl	8006654 <USBD_SetConfig>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]
          break;
 8005e98:	e018      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fc83 	bl	80067a8 <USBD_GetConfig>
          break;
 8005ea2:	e013      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fcb4 	bl	8006814 <USBD_GetStatus>
          break;
 8005eac:	e00e      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fce3 	bl	800687c <USBD_SetFeature>
          break;
 8005eb6:	e009      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fd07 	bl	80068ce <USBD_ClrFeature>
          break;
 8005ec0:	e004      	b.n	8005ecc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fd5e 	bl	8006986 <USBD_CtlError>
          break;
 8005eca:	bf00      	nop
      }
      break;
 8005ecc:	e004      	b.n	8005ed8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fd58 	bl	8006986 <USBD_CtlError>
      break;
 8005ed6:	bf00      	nop
  }

  return ret;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d005      	beq.n	8005f0a <USBD_StdItfReq+0x26>
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d852      	bhi.n	8005fa8 <USBD_StdItfReq+0xc4>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <USBD_StdItfReq+0x26>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d14e      	bne.n	8005fa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d840      	bhi.n	8005f9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	889b      	ldrh	r3, [r3, #4]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d836      	bhi.n	8005f90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	889b      	ldrh	r3, [r3, #4]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fedb 	bl	8005ce6 <USBD_CoreFindIF>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2bff      	cmp	r3, #255	@ 0xff
 8005f38:	d01d      	beq.n	8005f76 <USBD_StdItfReq+0x92>
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11a      	bne.n	8005f76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f40:	7bba      	ldrb	r2, [r7, #14]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32ae      	adds	r2, #174	@ 0xae
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00f      	beq.n	8005f70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f50:	7bba      	ldrb	r2, [r7, #14]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f58:	7bba      	ldrb	r2, [r7, #14]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	32ae      	adds	r2, #174	@ 0xae
 8005f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f6e:	e004      	b.n	8005f7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f74:	e001      	b.n	8005f7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	88db      	ldrh	r3, [r3, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d110      	bne.n	8005fa4 <USBD_StdItfReq+0xc0>
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10d      	bne.n	8005fa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fdb6 	bl	8006afa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f8e:	e009      	b.n	8005fa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fcf7 	bl	8006986 <USBD_CtlError>
          break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fcf2 	bl	8006986 <USBD_CtlError>
          break;
 8005fa2:	e000      	b.n	8005fa6 <USBD_StdItfReq+0xc2>
          break;
 8005fa4:	bf00      	nop
      }
      break;
 8005fa6:	e004      	b.n	8005fb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fceb 	bl	8006986 <USBD_CtlError>
      break;
 8005fb0:	bf00      	nop
  }

  return ret;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	889b      	ldrh	r3, [r3, #4]
 8005fce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d007      	beq.n	8005fec <USBD_StdEPReq+0x30>
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	f200 817f 	bhi.w	80062e0 <USBD_StdEPReq+0x324>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d02a      	beq.n	800603c <USBD_StdEPReq+0x80>
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	f040 817a 	bne.w	80062e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fe85 	bl	8005d00 <USBD_CoreFindEP>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ffa:	7b7b      	ldrb	r3, [r7, #13]
 8005ffc:	2bff      	cmp	r3, #255	@ 0xff
 8005ffe:	f000 8174 	beq.w	80062ea <USBD_StdEPReq+0x32e>
 8006002:	7b7b      	ldrb	r3, [r7, #13]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8170 	bne.w	80062ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800600a:	7b7a      	ldrb	r2, [r7, #13]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006012:	7b7a      	ldrb	r2, [r7, #13]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	32ae      	adds	r2, #174	@ 0xae
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8163 	beq.w	80062ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006024:	7b7a      	ldrb	r2, [r7, #13]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	@ 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
 8006036:	4603      	mov	r3, r0
 8006038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800603a:	e156      	b.n	80062ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d008      	beq.n	8006056 <USBD_StdEPReq+0x9a>
 8006044:	2b03      	cmp	r3, #3
 8006046:	f300 8145 	bgt.w	80062d4 <USBD_StdEPReq+0x318>
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 809b 	beq.w	8006186 <USBD_StdEPReq+0x1ca>
 8006050:	2b01      	cmp	r3, #1
 8006052:	d03c      	beq.n	80060ce <USBD_StdEPReq+0x112>
 8006054:	e13e      	b.n	80062d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d002      	beq.n	8006068 <USBD_StdEPReq+0xac>
 8006062:	2b03      	cmp	r3, #3
 8006064:	d016      	beq.n	8006094 <USBD_StdEPReq+0xd8>
 8006066:	e02c      	b.n	80060c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <USBD_StdEPReq+0xce>
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b80      	cmp	r3, #128	@ 0x80
 8006072:	d00a      	beq.n	800608a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fa25 	bl	80074c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800607e:	2180      	movs	r1, #128	@ 0x80
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 fa21 	bl	80074c8 <USBD_LL_StallEP>
 8006086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006088:	e020      	b.n	80060cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fc7a 	bl	8006986 <USBD_CtlError>
              break;
 8006092:	e01b      	b.n	80060cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	885b      	ldrh	r3, [r3, #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10e      	bne.n	80060ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <USBD_StdEPReq+0xfe>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b80      	cmp	r3, #128	@ 0x80
 80060a6:	d008      	beq.n	80060ba <USBD_StdEPReq+0xfe>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fa07 	bl	80074c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fd1d 	bl	8006afa <USBD_CtlSendStatus>

              break;
 80060c0:	e004      	b.n	80060cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fc5e 	bl	8006986 <USBD_CtlError>
              break;
 80060ca:	bf00      	nop
          }
          break;
 80060cc:	e107      	b.n	80062de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d002      	beq.n	80060e0 <USBD_StdEPReq+0x124>
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d016      	beq.n	800610c <USBD_StdEPReq+0x150>
 80060de:	e04b      	b.n	8006178 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <USBD_StdEPReq+0x146>
 80060e6:	7bbb      	ldrb	r3, [r7, #14]
 80060e8:	2b80      	cmp	r3, #128	@ 0x80
 80060ea:	d00a      	beq.n	8006102 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 f9e9 	bl	80074c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060f6:	2180      	movs	r1, #128	@ 0x80
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f9e5 	bl	80074c8 <USBD_LL_StallEP>
 80060fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006100:	e040      	b.n	8006184 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fc3e 	bl	8006986 <USBD_CtlError>
              break;
 800610a:	e03b      	b.n	8006184 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	885b      	ldrh	r3, [r3, #2]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d136      	bne.n	8006182 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 f9ef 	bl	8007506 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fce6 	bl	8006afa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fde4 	bl	8005d00 <USBD_CoreFindEP>
 8006138:	4603      	mov	r3, r0
 800613a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800613c:	7b7b      	ldrb	r3, [r7, #13]
 800613e:	2bff      	cmp	r3, #255	@ 0xff
 8006140:	d01f      	beq.n	8006182 <USBD_StdEPReq+0x1c6>
 8006142:	7b7b      	ldrb	r3, [r7, #13]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d11c      	bne.n	8006182 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006148:	7b7a      	ldrb	r2, [r7, #13]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006150:	7b7a      	ldrb	r2, [r7, #13]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32ae      	adds	r2, #174	@ 0xae
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006160:	7b7a      	ldrb	r2, [r7, #13]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32ae      	adds	r2, #174	@ 0xae
 8006166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006176:	e004      	b.n	8006182 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fc03 	bl	8006986 <USBD_CtlError>
              break;
 8006180:	e000      	b.n	8006184 <USBD_StdEPReq+0x1c8>
              break;
 8006182:	bf00      	nop
          }
          break;
 8006184:	e0ab      	b.n	80062de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d002      	beq.n	8006198 <USBD_StdEPReq+0x1dc>
 8006192:	2b03      	cmp	r3, #3
 8006194:	d032      	beq.n	80061fc <USBD_StdEPReq+0x240>
 8006196:	e097      	b.n	80062c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <USBD_StdEPReq+0x1f2>
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b80      	cmp	r3, #128	@ 0x80
 80061a2:	d004      	beq.n	80061ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fbed 	bl	8006986 <USBD_CtlError>
                break;
 80061ac:	e091      	b.n	80062d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da0b      	bge.n	80061ce <USBD_StdEPReq+0x212>
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	3310      	adds	r3, #16
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	e00b      	b.n	80061e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2202      	movs	r2, #2
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fc43 	bl	8006a80 <USBD_CtlSendData>
              break;
 80061fa:	e06a      	b.n	80062d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da11      	bge.n	8006228 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	f003 020f 	and.w	r2, r3, #15
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3324      	adds	r3, #36	@ 0x24
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d117      	bne.n	800624e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fbb0 	bl	8006986 <USBD_CtlError>
                  break;
 8006226:	e054      	b.n	80062d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb9d 	bl	8006986 <USBD_CtlError>
                  break;
 800624c:	e041      	b.n	80062d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800624e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006252:	2b00      	cmp	r3, #0
 8006254:	da0b      	bge.n	800626e <USBD_StdEPReq+0x2b2>
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	3310      	adds	r3, #16
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3304      	adds	r3, #4
 800626c:	e00b      	b.n	8006286 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	4413      	add	r3, r2
 8006284:	3304      	adds	r3, #4
 8006286:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <USBD_StdEPReq+0x2d8>
 800628e:	7bbb      	ldrb	r3, [r7, #14]
 8006290:	2b80      	cmp	r3, #128	@ 0x80
 8006292:	d103      	bne.n	800629c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e00e      	b.n	80062ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f94f 	bl	8007544 <USBD_LL_IsStallEP>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e002      	b.n	80062ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2202      	movs	r2, #2
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fbdd 	bl	8006a80 <USBD_CtlSendData>
              break;
 80062c6:	e004      	b.n	80062d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fb5b 	bl	8006986 <USBD_CtlError>
              break;
 80062d0:	bf00      	nop
          }
          break;
 80062d2:	e004      	b.n	80062de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb55 	bl	8006986 <USBD_CtlError>
          break;
 80062dc:	bf00      	nop
      }
      break;
 80062de:	e005      	b.n	80062ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fb4f 	bl	8006986 <USBD_CtlError>
      break;
 80062e8:	e000      	b.n	80062ec <USBD_StdEPReq+0x330>
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	2b06      	cmp	r3, #6
 800631a:	f200 8128 	bhi.w	800656e <USBD_GetDescriptor+0x276>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <USBD_GetDescriptor+0x2c>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006341 	.word	0x08006341
 8006328:	08006359 	.word	0x08006359
 800632c:	08006399 	.word	0x08006399
 8006330:	0800656f 	.word	0x0800656f
 8006334:	0800656f 	.word	0x0800656f
 8006338:	0800650f 	.word	0x0800650f
 800633c:	0800653b 	.word	0x0800653b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7c12      	ldrb	r2, [r2, #16]
 800634c:	f107 0108 	add.w	r1, r7, #8
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
 8006354:	60f8      	str	r0, [r7, #12]
      break;
 8006356:	e112      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7c1b      	ldrb	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10d      	bne.n	800637c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	f107 0208 	add.w	r2, r7, #8
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	2202      	movs	r2, #2
 8006378:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800637a:	e100      	b.n	800657e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	f107 0208 	add.w	r2, r7, #8
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
 800638c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
      break;
 8006396:	e0f2      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b05      	cmp	r3, #5
 80063a0:	f200 80ac 	bhi.w	80064fc <USBD_GetDescriptor+0x204>
 80063a4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <USBD_GetDescriptor+0xb4>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063f9 	.word	0x080063f9
 80063b4:	0800642d 	.word	0x0800642d
 80063b8:	08006461 	.word	0x08006461
 80063bc:	08006495 	.word	0x08006495
 80063c0:	080064c9 	.word	0x080064c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	7c12      	ldrb	r2, [r2, #16]
 80063dc:	f107 0108 	add.w	r1, r7, #8
 80063e0:	4610      	mov	r0, r2
 80063e2:	4798      	blx	r3
 80063e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063e6:	e091      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 facb 	bl	8006986 <USBD_CtlError>
            err++;
 80063f0:	7afb      	ldrb	r3, [r7, #11]
 80063f2:	3301      	adds	r3, #1
 80063f4:	72fb      	strb	r3, [r7, #11]
          break;
 80063f6:	e089      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	7c12      	ldrb	r2, [r2, #16]
 8006410:	f107 0108 	add.w	r1, r7, #8
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800641a:	e077      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fab1 	bl	8006986 <USBD_CtlError>
            err++;
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	3301      	adds	r3, #1
 8006428:	72fb      	strb	r3, [r7, #11]
          break;
 800642a:	e06f      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00b      	beq.n	8006450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	7c12      	ldrb	r2, [r2, #16]
 8006444:	f107 0108 	add.w	r1, r7, #8
 8006448:	4610      	mov	r0, r2
 800644a:	4798      	blx	r3
 800644c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800644e:	e05d      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa97 	bl	8006986 <USBD_CtlError>
            err++;
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	3301      	adds	r3, #1
 800645c:	72fb      	strb	r3, [r7, #11]
          break;
 800645e:	e055      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	7c12      	ldrb	r2, [r2, #16]
 8006478:	f107 0108 	add.w	r1, r7, #8
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
 8006480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006482:	e043      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa7d 	bl	8006986 <USBD_CtlError>
            err++;
 800648c:	7afb      	ldrb	r3, [r7, #11]
 800648e:	3301      	adds	r3, #1
 8006490:	72fb      	strb	r3, [r7, #11]
          break;
 8006492:	e03b      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	7c12      	ldrb	r2, [r2, #16]
 80064ac:	f107 0108 	add.w	r1, r7, #8
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064b6:	e029      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa63 	bl	8006986 <USBD_CtlError>
            err++;
 80064c0:	7afb      	ldrb	r3, [r7, #11]
 80064c2:	3301      	adds	r3, #1
 80064c4:	72fb      	strb	r3, [r7, #11]
          break;
 80064c6:	e021      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	7c12      	ldrb	r2, [r2, #16]
 80064e0:	f107 0108 	add.w	r1, r7, #8
 80064e4:	4610      	mov	r0, r2
 80064e6:	4798      	blx	r3
 80064e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ea:	e00f      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa49 	bl	8006986 <USBD_CtlError>
            err++;
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	3301      	adds	r3, #1
 80064f8:	72fb      	strb	r3, [r7, #11]
          break;
 80064fa:	e007      	b.n	800650c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa41 	bl	8006986 <USBD_CtlError>
          err++;
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	3301      	adds	r3, #1
 8006508:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800650a:	bf00      	nop
      }
      break;
 800650c:	e037      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7c1b      	ldrb	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800651c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651e:	f107 0208 	add.w	r2, r7, #8
 8006522:	4610      	mov	r0, r2
 8006524:	4798      	blx	r3
 8006526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006528:	e029      	b.n	800657e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa2a 	bl	8006986 <USBD_CtlError>
        err++;
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	3301      	adds	r3, #1
 8006536:	72fb      	strb	r3, [r7, #11]
      break;
 8006538:	e021      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7c1b      	ldrb	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654a:	f107 0208 	add.w	r2, r7, #8
 800654e:	4610      	mov	r0, r2
 8006550:	4798      	blx	r3
 8006552:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	2207      	movs	r2, #7
 800655a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800655c:	e00f      	b.n	800657e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fa10 	bl	8006986 <USBD_CtlError>
        err++;
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	3301      	adds	r3, #1
 800656a:	72fb      	strb	r3, [r7, #11]
      break;
 800656c:	e007      	b.n	800657e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa08 	bl	8006986 <USBD_CtlError>
      err++;
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	3301      	adds	r3, #1
 800657a:	72fb      	strb	r3, [r7, #11]
      break;
 800657c:	bf00      	nop
  }

  if (err != 0U)
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d11e      	bne.n	80065c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	88db      	ldrh	r3, [r3, #6]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d016      	beq.n	80065ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00e      	beq.n	80065b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88da      	ldrh	r2, [r3, #6]
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	4293      	cmp	r3, r2
 800659a:	bf28      	it	cs
 800659c:	4613      	movcs	r3, r2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065a2:	893b      	ldrh	r3, [r7, #8]
 80065a4:	461a      	mov	r2, r3
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa69 	bl	8006a80 <USBD_CtlSendData>
 80065ae:	e009      	b.n	80065c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9e7 	bl	8006986 <USBD_CtlError>
 80065b8:	e004      	b.n	80065c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa9d 	bl	8006afa <USBD_CtlSendStatus>
 80065c0:	e000      	b.n	80065c4 <USBD_GetDescriptor+0x2cc>
    return;
 80065c2:	bf00      	nop
  }
}
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	889b      	ldrh	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d131      	bne.n	8006642 <USBD_SetAddress+0x76>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	88db      	ldrh	r3, [r3, #6]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d12d      	bne.n	8006642 <USBD_SetAddress+0x76>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	885b      	ldrh	r3, [r3, #2]
 80065ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ec:	d829      	bhi.n	8006642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b03      	cmp	r3, #3
 8006604:	d104      	bne.n	8006610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f9bc 	bl	8006986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660e:	e01d      	b.n	800664c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7bfa      	ldrb	r2, [r7, #15]
 8006614:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 ffbd 	bl	800759c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa69 	bl	8006afa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2202      	movs	r2, #2
 8006632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006636:	e009      	b.n	800664c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006640:	e004      	b.n	800664c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f99e 	bl	8006986 <USBD_CtlError>
  }
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	885b      	ldrh	r3, [r3, #2]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	4b4e      	ldr	r3, [pc, #312]	@ (80067a4 <USBD_SetConfig+0x150>)
 800666a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800666c:	4b4d      	ldr	r3, [pc, #308]	@ (80067a4 <USBD_SetConfig+0x150>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d905      	bls.n	8006680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f985 	bl	8006986 <USBD_CtlError>
    return USBD_FAIL;
 800667c:	2303      	movs	r3, #3
 800667e:	e08c      	b.n	800679a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d002      	beq.n	8006692 <USBD_SetConfig+0x3e>
 800668c:	2b03      	cmp	r3, #3
 800668e:	d029      	beq.n	80066e4 <USBD_SetConfig+0x90>
 8006690:	e075      	b.n	800677e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006692:	4b44      	ldr	r3, [pc, #272]	@ (80067a4 <USBD_SetConfig+0x150>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d020      	beq.n	80066dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800669a:	4b42      	ldr	r3, [pc, #264]	@ (80067a4 <USBD_SetConfig+0x150>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066a4:	4b3f      	ldr	r3, [pc, #252]	@ (80067a4 <USBD_SetConfig+0x150>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fe ffe3 	bl	8005676 <USBD_SetClassConfig>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f962 	bl	8006986 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066ca:	e065      	b.n	8006798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa14 	bl	8006afa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2203      	movs	r2, #3
 80066d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066da:	e05d      	b.n	8006798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa0c 	bl	8006afa <USBD_CtlSendStatus>
      break;
 80066e2:	e059      	b.n	8006798 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066e4:	4b2f      	ldr	r3, [pc, #188]	@ (80067a4 <USBD_SetConfig+0x150>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d112      	bne.n	8006712 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80066f4:	4b2b      	ldr	r3, [pc, #172]	@ (80067a4 <USBD_SetConfig+0x150>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <USBD_SetConfig+0x150>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fe ffd2 	bl	80056ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9f5 	bl	8006afa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006710:	e042      	b.n	8006798 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006712:	4b24      	ldr	r3, [pc, #144]	@ (80067a4 <USBD_SetConfig+0x150>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d02a      	beq.n	8006776 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fe ffc0 	bl	80056ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800672e:	4b1d      	ldr	r3, [pc, #116]	@ (80067a4 <USBD_SetConfig+0x150>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006738:	4b1a      	ldr	r3, [pc, #104]	@ (80067a4 <USBD_SetConfig+0x150>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe ff99 	bl	8005676 <USBD_SetClassConfig>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00f      	beq.n	800676e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f918 	bl	8006986 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fe ffa5 	bl	80056ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800676c:	e014      	b.n	8006798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9c3 	bl	8006afa <USBD_CtlSendStatus>
      break;
 8006774:	e010      	b.n	8006798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9bf 	bl	8006afa <USBD_CtlSendStatus>
      break;
 800677c:	e00c      	b.n	8006798 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f900 	bl	8006986 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006786:	4b07      	ldr	r3, [pc, #28]	@ (80067a4 <USBD_SetConfig+0x150>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fe ff8e 	bl	80056ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006792:	2303      	movs	r3, #3
 8006794:	73fb      	strb	r3, [r7, #15]
      break;
 8006796:	bf00      	nop
  }

  return ret;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000308 	.word	0x20000308

080067a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	88db      	ldrh	r3, [r3, #6]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d004      	beq.n	80067c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8e2 	bl	8006986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067c2:	e023      	b.n	800680c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	dc02      	bgt.n	80067d6 <USBD_GetConfig+0x2e>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	dc03      	bgt.n	80067dc <USBD_GetConfig+0x34>
 80067d4:	e015      	b.n	8006802 <USBD_GetConfig+0x5a>
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d00b      	beq.n	80067f2 <USBD_GetConfig+0x4a>
 80067da:	e012      	b.n	8006802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3308      	adds	r3, #8
 80067e6:	2201      	movs	r2, #1
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f948 	bl	8006a80 <USBD_CtlSendData>
        break;
 80067f0:	e00c      	b.n	800680c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3304      	adds	r3, #4
 80067f6:	2201      	movs	r2, #1
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f940 	bl	8006a80 <USBD_CtlSendData>
        break;
 8006800:	e004      	b.n	800680c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f8be 	bl	8006986 <USBD_CtlError>
        break;
 800680a:	bf00      	nop
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006824:	b2db      	uxtb	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	2b02      	cmp	r3, #2
 800682a:	d81e      	bhi.n	800686a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	88db      	ldrh	r3, [r3, #6]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d004      	beq.n	800683e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f8a5 	bl	8006986 <USBD_CtlError>
        break;
 800683c:	e01a      	b.n	8006874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f043 0202 	orr.w	r2, r3, #2
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	330c      	adds	r3, #12
 800685e:	2202      	movs	r2, #2
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f90c 	bl	8006a80 <USBD_CtlSendData>
      break;
 8006868:	e004      	b.n	8006874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f88a 	bl	8006986 <USBD_CtlError>
      break;
 8006872:	bf00      	nop
  }
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d107      	bne.n	800689e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f92f 	bl	8006afa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800689c:	e013      	b.n	80068c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	885b      	ldrh	r3, [r3, #2]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d10b      	bne.n	80068be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	889b      	ldrh	r3, [r3, #4]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f91f 	bl	8006afa <USBD_CtlSendStatus>
}
 80068bc:	e003      	b.n	80068c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f860 	bl	8006986 <USBD_CtlError>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d80b      	bhi.n	80068fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	885b      	ldrh	r3, [r3, #2]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10c      	bne.n	8006908 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8ff 	bl	8006afa <USBD_CtlSendStatus>
      }
      break;
 80068fc:	e004      	b.n	8006908 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f840 	bl	8006986 <USBD_CtlError>
      break;
 8006906:	e000      	b.n	800690a <USBD_ClrFeature+0x3c>
      break;
 8006908:	bf00      	nop
  }
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff fa40 	bl	8005dc2 <SWAPBYTE>
 8006942:	4603      	mov	r3, r0
 8006944:	461a      	mov	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff fa33 	bl	8005dc2 <SWAPBYTE>
 800695c:	4603      	mov	r3, r0
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3301      	adds	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fa26 	bl	8005dc2 <SWAPBYTE>
 8006976:	4603      	mov	r3, r0
 8006978:	461a      	mov	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	80da      	strh	r2, [r3, #6]
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b082      	sub	sp, #8
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006990:	2180      	movs	r1, #128	@ 0x80
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fd98 	bl	80074c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fd94 	bl	80074c8 <USBD_LL_StallEP>
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d042      	beq.n	8006a44 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80069c2:	6938      	ldr	r0, [r7, #16]
 80069c4:	f000 f842 	bl	8006a4c <USBD_GetLen>
 80069c8:	4603      	mov	r3, r0
 80069ca:	3301      	adds	r3, #1
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d2:	d808      	bhi.n	80069e6 <USBD_GetString+0x3e>
 80069d4:	6938      	ldr	r0, [r7, #16]
 80069d6:	f000 f839 	bl	8006a4c <USBD_GetLen>
 80069da:	4603      	mov	r3, r0
 80069dc:	3301      	adds	r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	e001      	b.n	80069ea <USBD_GetString+0x42>
 80069e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	4413      	add	r3, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7812      	ldrb	r2, [r2, #0]
 80069f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	3301      	adds	r3, #1
 80069fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4413      	add	r3, r2
 8006a06:	2203      	movs	r2, #3
 8006a08:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a10:	e013      	b.n	8006a3a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	4413      	add	r3, r2
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3301      	adds	r3, #1
 8006a22:	613b      	str	r3, [r7, #16]
    idx++;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	3301      	adds	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	4413      	add	r3, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	3301      	adds	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e7      	bne.n	8006a12 <USBD_GetString+0x6a>
 8006a42:	e000      	b.n	8006a46 <USBD_GetString+0x9e>
    return;
 8006a44:	bf00      	nop
  }
}
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a5c:	e005      	b.n	8006a6a <USBD_GetLen+0x1e>
  {
    len++;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	3301      	adds	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f5      	bne.n	8006a5e <USBD_GetLen+0x12>
  }

  return len;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fd97 	bl	80075da <USBD_LL_Transmit>

  return USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fd86 	bl	80075da <USBD_LL_Transmit>

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fd96 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2204      	movs	r2, #4
 8006b06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fd62 	bl	80075da <USBD_LL_Transmit>

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b30:	2300      	movs	r3, #0
 8006b32:	2200      	movs	r2, #0
 8006b34:	2100      	movs	r1, #0
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fd70 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	491b      	ldr	r1, [pc, #108]	@ (8006bbc <MX_USB_DEVICE_Init+0x74>)
 8006b50:	481b      	ldr	r0, [pc, #108]	@ (8006bc0 <MX_USB_DEVICE_Init+0x78>)
 8006b52:	f7fe fd13 	bl	800557c <USBD_Init>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b5c:	f7f9 ffb4 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8006b60:	4918      	ldr	r1, [pc, #96]	@ (8006bc4 <MX_USB_DEVICE_Init+0x7c>)
 8006b62:	4817      	ldr	r0, [pc, #92]	@ (8006bc0 <MX_USB_DEVICE_Init+0x78>)
 8006b64:	f7fe fd3a 	bl	80055dc <USBD_RegisterClass>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b6e:	f7f9 ffab 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8006b72:	4813      	ldr	r0, [pc, #76]	@ (8006bc0 <MX_USB_DEVICE_Init+0x78>)
 8006b74:	f7fe fd68 	bl	8005648 <USBD_Start>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006b7e:	f7f9 ffa3 	bl	8000ac8 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b82:	2200      	movs	r2, #0
 8006b84:	4910      	ldr	r1, [pc, #64]	@ (8006bc8 <MX_USB_DEVICE_Init+0x80>)
 8006b86:	4811      	ldr	r0, [pc, #68]	@ (8006bcc <MX_USB_DEVICE_Init+0x84>)
 8006b88:	f7fe fcf8 	bl	800557c <USBD_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <MX_USB_DEVICE_Init+0x4e>
  {
    Error_Handler();
 8006b92:	f7f9 ff99 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006b96:	490b      	ldr	r1, [pc, #44]	@ (8006bc4 <MX_USB_DEVICE_Init+0x7c>)
 8006b98:	480c      	ldr	r0, [pc, #48]	@ (8006bcc <MX_USB_DEVICE_Init+0x84>)
 8006b9a:	f7fe fd1f 	bl	80055dc <USBD_RegisterClass>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8006ba4:	f7f9 ff90 	bl	8000ac8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ba8:	4808      	ldr	r0, [pc, #32]	@ (8006bcc <MX_USB_DEVICE_Init+0x84>)
 8006baa:	f7fe fd4d 	bl	8005648 <USBD_Start>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <MX_USB_DEVICE_Init+0x70>
  {
    Error_Handler();
 8006bb4:	f7f9 ff88 	bl	8000ac8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bb8:	bf00      	nop
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	2000014c 	.word	0x2000014c
 8006bc0:	2000030c 	.word	0x2000030c
 8006bc4:	20000068 	.word	0x20000068
 8006bc8:	2000011c 	.word	0x2000011c
 8006bcc:	200005e8 	.word	0x200005e8

08006bd0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2212      	movs	r2, #18
 8006be0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8006be2:	4b03      	ldr	r3, [pc, #12]	@ (8006bf0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000168 	.word	0x20000168

08006bf4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2204      	movs	r2, #4
 8006c04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c06:	4b03      	ldr	r3, [pc, #12]	@ (8006c14 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	2000017c 	.word	0x2000017c

08006c18 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	4907      	ldr	r1, [pc, #28]	@ (8006c4c <USBD_HS_ProductStrDescriptor+0x34>)
 8006c2e:	4808      	ldr	r0, [pc, #32]	@ (8006c50 <USBD_HS_ProductStrDescriptor+0x38>)
 8006c30:	f7ff feba 	bl	80069a8 <USBD_GetString>
 8006c34:	e004      	b.n	8006c40 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4904      	ldr	r1, [pc, #16]	@ (8006c4c <USBD_HS_ProductStrDescriptor+0x34>)
 8006c3a:	4805      	ldr	r0, [pc, #20]	@ (8006c50 <USBD_HS_ProductStrDescriptor+0x38>)
 8006c3c:	f7ff feb4 	bl	80069a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c40:	4b02      	ldr	r3, [pc, #8]	@ (8006c4c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200008c4 	.word	0x200008c4
 8006c50:	08008050 	.word	0x08008050

08006c54 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	4904      	ldr	r1, [pc, #16]	@ (8006c74 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8006c64:	4804      	ldr	r0, [pc, #16]	@ (8006c78 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8006c66:	f7ff fe9f 	bl	80069a8 <USBD_GetString>
  return USBD_StrDesc;
 8006c6a:	4b02      	ldr	r3, [pc, #8]	@ (8006c74 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	200008c4 	.word	0x200008c4
 8006c78:	08008068 	.word	0x08008068

08006c7c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	221a      	movs	r2, #26
 8006c8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c8e:	f000 f8e7 	bl	8006e60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006c92:	4b02      	ldr	r3, [pc, #8]	@ (8006c9c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000180 	.word	0x20000180

08006ca0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d105      	bne.n	8006cbe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4907      	ldr	r1, [pc, #28]	@ (8006cd4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006cb6:	4808      	ldr	r0, [pc, #32]	@ (8006cd8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006cb8:	f7ff fe76 	bl	80069a8 <USBD_GetString>
 8006cbc:	e004      	b.n	8006cc8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	4904      	ldr	r1, [pc, #16]	@ (8006cd4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8006cc2:	4805      	ldr	r0, [pc, #20]	@ (8006cd8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8006cc4:	f7ff fe70 	bl	80069a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cc8:	4b02      	ldr	r3, [pc, #8]	@ (8006cd4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200008c4 	.word	0x200008c4
 8006cd8:	0800807c 	.word	0x0800807c

08006cdc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	6039      	str	r1, [r7, #0]
 8006ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	4907      	ldr	r1, [pc, #28]	@ (8006d10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006cf2:	4808      	ldr	r0, [pc, #32]	@ (8006d14 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006cf4:	f7ff fe58 	bl	80069a8 <USBD_GetString>
 8006cf8:	e004      	b.n	8006d04 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4904      	ldr	r1, [pc, #16]	@ (8006d10 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8006cfe:	4805      	ldr	r0, [pc, #20]	@ (8006d14 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8006d00:	f7ff fe52 	bl	80069a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d04:	4b02      	ldr	r3, [pc, #8]	@ (8006d10 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200008c4 	.word	0x200008c4
 8006d14:	08008088 	.word	0x08008088

08006d18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2212      	movs	r2, #18
 8006d28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	@ (8006d38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000138 	.word	0x20000138

08006d3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	@ (8006d5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	2000017c 	.word	0x2000017c

08006d60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d105      	bne.n	8006d7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4907      	ldr	r1, [pc, #28]	@ (8006d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d76:	4808      	ldr	r0, [pc, #32]	@ (8006d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d78:	f7ff fe16 	bl	80069a8 <USBD_GetString>
 8006d7c:	e004      	b.n	8006d88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4904      	ldr	r1, [pc, #16]	@ (8006d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d82:	4805      	ldr	r0, [pc, #20]	@ (8006d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d84:	f7ff fe10 	bl	80069a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d88:	4b02      	ldr	r3, [pc, #8]	@ (8006d94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200008c4 	.word	0x200008c4
 8006d98:	08008050 	.word	0x08008050

08006d9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	4904      	ldr	r1, [pc, #16]	@ (8006dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006dac:	4804      	ldr	r0, [pc, #16]	@ (8006dc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dae:	f7ff fdfb 	bl	80069a8 <USBD_GetString>
  return USBD_StrDesc;
 8006db2:	4b02      	ldr	r3, [pc, #8]	@ (8006dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	200008c4 	.word	0x200008c4
 8006dc0:	08008068 	.word	0x08008068

08006dc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	6039      	str	r1, [r7, #0]
 8006dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	221a      	movs	r2, #26
 8006dd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dd6:	f000 f843 	bl	8006e60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dda:	4b02      	ldr	r3, [pc, #8]	@ (8006de4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000180 	.word	0x20000180

08006de8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4907      	ldr	r1, [pc, #28]	@ (8006e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dfe:	4808      	ldr	r0, [pc, #32]	@ (8006e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e00:	f7ff fdd2 	bl	80069a8 <USBD_GetString>
 8006e04:	e004      	b.n	8006e10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4904      	ldr	r1, [pc, #16]	@ (8006e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e0a:	4805      	ldr	r0, [pc, #20]	@ (8006e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e0c:	f7ff fdcc 	bl	80069a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e10:	4b02      	ldr	r3, [pc, #8]	@ (8006e1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200008c4 	.word	0x200008c4
 8006e20:	0800807c 	.word	0x0800807c

08006e24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4907      	ldr	r1, [pc, #28]	@ (8006e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e3a:	4808      	ldr	r0, [pc, #32]	@ (8006e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e3c:	f7ff fdb4 	bl	80069a8 <USBD_GetString>
 8006e40:	e004      	b.n	8006e4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4904      	ldr	r1, [pc, #16]	@ (8006e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e46:	4805      	ldr	r0, [pc, #20]	@ (8006e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e48:	f7ff fdae 	bl	80069a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e4c:	4b02      	ldr	r3, [pc, #8]	@ (8006e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	200008c4 	.word	0x200008c4
 8006e5c:	08008088 	.word	0x08008088

08006e60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <Get_SerialNum+0x44>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea8 <Get_SerialNum+0x48>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e72:	4b0e      	ldr	r3, [pc, #56]	@ (8006eac <Get_SerialNum+0x4c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e86:	2208      	movs	r2, #8
 8006e88:	4909      	ldr	r1, [pc, #36]	@ (8006eb0 <Get_SerialNum+0x50>)
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f814 	bl	8006eb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e90:	2204      	movs	r2, #4
 8006e92:	4908      	ldr	r1, [pc, #32]	@ (8006eb4 <Get_SerialNum+0x54>)
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f000 f80f 	bl	8006eb8 <IntToUnicode>
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	1fff7a10 	.word	0x1fff7a10
 8006ea8:	1fff7a14 	.word	0x1fff7a14
 8006eac:	1fff7a18 	.word	0x1fff7a18
 8006eb0:	20000182 	.word	0x20000182
 8006eb4:	20000192 	.word	0x20000192

08006eb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
 8006ece:	e027      	b.n	8006f20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	0f1b      	lsrs	r3, r3, #28
 8006ed4:	2b09      	cmp	r3, #9
 8006ed6:	d80b      	bhi.n	8006ef0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	0f1b      	lsrs	r3, r3, #28
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3230      	adds	r2, #48	@ 0x30
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e00a      	b.n	8006f06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4619      	mov	r1, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	440b      	add	r3, r1
 8006f00:	3237      	adds	r2, #55	@ 0x37
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	3301      	adds	r3, #1
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
 8006f20:	7dfa      	ldrb	r2, [r7, #23]
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d3d3      	bcc.n	8006ed0 <IntToUnicode+0x18>
  }
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08e      	sub	sp, #56	@ 0x38
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f58:	d13b      	bne.n	8006fd2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	623b      	str	r3, [r7, #32]
 8006f5e:	4b61      	ldr	r3, [pc, #388]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	4a60      	ldr	r2, [pc, #384]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f6a:	4b5e      	ldr	r3, [pc, #376]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	623b      	str	r3, [r7, #32]
 8006f74:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f84:	2303      	movs	r3, #3
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f88:	230a      	movs	r3, #10
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f90:	4619      	mov	r1, r3
 8006f92:	4855      	ldr	r0, [pc, #340]	@ (80070e8 <HAL_PCD_MspInit+0x1b0>)
 8006f94:	f7fa f8be 	bl	8001114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f98:	4b52      	ldr	r3, [pc, #328]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9c:	4a51      	ldr	r2, [pc, #324]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa2:	6353      	str	r3, [r2, #52]	@ 0x34
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fac:	4a4d      	ldr	r2, [pc, #308]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2043      	movs	r0, #67	@ 0x43
 8006fc6:	f7fa f86e 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fca:	2043      	movs	r0, #67	@ 0x43
 8006fcc:	f7fa f887 	bl	80010de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8006fd0:	e083      	b.n	80070da <HAL_PCD_MspInit+0x1a2>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a45      	ldr	r2, [pc, #276]	@ (80070ec <HAL_PCD_MspInit+0x1b4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d17e      	bne.n	80070da <HAL_PCD_MspInit+0x1a2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	4b40      	ldr	r3, [pc, #256]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fec:	4b3d      	ldr	r3, [pc, #244]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	4b39      	ldr	r3, [pc, #228]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	4a38      	ldr	r2, [pc, #224]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6313      	str	r3, [r2, #48]	@ 0x30
 8007008:	4b36      	ldr	r3, [pc, #216]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 800700a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007014:	2300      	movs	r3, #0
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	4b32      	ldr	r3, [pc, #200]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	4a31      	ldr	r2, [pc, #196]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 800701e:	f043 0302 	orr.w	r3, r3, #2
 8007022:	6313      	str	r3, [r2, #48]	@ 0x30
 8007024:	4b2f      	ldr	r3, [pc, #188]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8007026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8007030:	230d      	movs	r3, #13
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007034:	2302      	movs	r3, #2
 8007036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703c:	2303      	movs	r3, #3
 800703e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007040:	230a      	movs	r3, #10
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007048:	4619      	mov	r1, r3
 800704a:	4829      	ldr	r0, [pc, #164]	@ (80070f0 <HAL_PCD_MspInit+0x1b8>)
 800704c:	f7fa f862 	bl	8001114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8007050:	2328      	movs	r3, #40	@ 0x28
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007054:	2302      	movs	r3, #2
 8007056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007058:	2300      	movs	r3, #0
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800705c:	2303      	movs	r3, #3
 800705e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007060:	230a      	movs	r3, #10
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007068:	4619      	mov	r1, r3
 800706a:	481f      	ldr	r0, [pc, #124]	@ (80070e8 <HAL_PCD_MspInit+0x1b0>)
 800706c:	f7fa f852 	bl	8001114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8007070:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007076:	2302      	movs	r3, #2
 8007078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707a:	2300      	movs	r3, #0
 800707c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800707e:	2303      	movs	r3, #3
 8007080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8007082:	230a      	movs	r3, #10
 8007084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800708a:	4619      	mov	r1, r3
 800708c:	4819      	ldr	r0, [pc, #100]	@ (80070f4 <HAL_PCD_MspInit+0x1bc>)
 800708e:	f7fa f841 	bl	8001114 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	4a12      	ldr	r2, [pc, #72]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 800709c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80070a2:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	4a0b      	ldr	r2, [pc, #44]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 80070b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <HAL_PCD_MspInit+0x1ac>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80070ca:	2200      	movs	r2, #0
 80070cc:	2100      	movs	r1, #0
 80070ce:	204d      	movs	r0, #77	@ 0x4d
 80070d0:	f7f9 ffe9 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80070d4:	204d      	movs	r0, #77	@ 0x4d
 80070d6:	f7fa f802 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 80070da:	bf00      	nop
 80070dc:	3738      	adds	r7, #56	@ 0x38
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40023800 	.word	0x40023800
 80070e8:	40020000 	.word	0x40020000
 80070ec:	40040000 	.word	0x40040000
 80070f0:	40020800 	.word	0x40020800
 80070f4:	40020400 	.word	0x40020400

080070f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe fae7 	bl	80056e2 <USBD_LL_SetupStage>
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800712e:	78fa      	ldrb	r2, [r7, #3]
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	4619      	mov	r1, r3
 8007146:	f7fe fb21 	bl	800578c <USBD_LL_DataOutStage>
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3320      	adds	r3, #32
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	4619      	mov	r1, r3
 800717a:	f7fe fbba 	bl	80058f2 <USBD_LL_DataInStage>
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fcf4 	bl	8005b82 <USBD_LL_SOF>
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071aa:	2301      	movs	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	79db      	ldrb	r3, [r3, #7]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
 80071ba:	e008      	b.n	80071ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	79db      	ldrb	r3, [r3, #7]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d102      	bne.n	80071ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e001      	b.n	80071ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80071ca:	f7f9 fc7d 	bl	8000ac8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071d4:	7bfa      	ldrb	r2, [r7, #15]
 80071d6:	4611      	mov	r1, r2
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fc8e 	bl	8005afa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fc36 	bl	8005a56 <USBD_LL_Reset>
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fc89 	bl	8005b1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7adb      	ldrb	r3, [r3, #11]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007228:	4b04      	ldr	r3, [pc, #16]	@ (800723c <HAL_PCD_SuspendCallback+0x48>)
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4a03      	ldr	r2, [pc, #12]	@ (800723c <HAL_PCD_SuspendCallback+0x48>)
 800722e:	f043 0306 	orr.w	r3, r3, #6
 8007232:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	e000ed00 	.word	0xe000ed00

08007240 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fc7f 	bl	8005b52 <USBD_LL_Resume>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fcd7 	bl	8005c26 <USBD_LL_IsoOUTIncomplete>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fc93 	bl	8005bc2 <USBD_LL_IsoINIncomplete>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fce9 	bl	8005c8a <USBD_LL_DevConnected>
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fce6 	bl	8005ca0 <USBD_LL_DevDisconnected>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d13c      	bne.n	8007366 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072ec:	4a43      	ldr	r2, [pc, #268]	@ (80073fc <USBD_LL_Init+0x120>)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a41      	ldr	r2, [pc, #260]	@ (80073fc <USBD_LL_Init+0x120>)
 80072f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072fc:	4b3f      	ldr	r3, [pc, #252]	@ (80073fc <USBD_LL_Init+0x120>)
 80072fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007302:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007304:	4b3d      	ldr	r3, [pc, #244]	@ (80073fc <USBD_LL_Init+0x120>)
 8007306:	2204      	movs	r2, #4
 8007308:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800730a:	4b3c      	ldr	r3, [pc, #240]	@ (80073fc <USBD_LL_Init+0x120>)
 800730c:	2202      	movs	r2, #2
 800730e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007310:	4b3a      	ldr	r3, [pc, #232]	@ (80073fc <USBD_LL_Init+0x120>)
 8007312:	2200      	movs	r2, #0
 8007314:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007316:	4b39      	ldr	r3, [pc, #228]	@ (80073fc <USBD_LL_Init+0x120>)
 8007318:	2202      	movs	r2, #2
 800731a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800731c:	4b37      	ldr	r3, [pc, #220]	@ (80073fc <USBD_LL_Init+0x120>)
 800731e:	2200      	movs	r2, #0
 8007320:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007322:	4b36      	ldr	r3, [pc, #216]	@ (80073fc <USBD_LL_Init+0x120>)
 8007324:	2200      	movs	r2, #0
 8007326:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007328:	4b34      	ldr	r3, [pc, #208]	@ (80073fc <USBD_LL_Init+0x120>)
 800732a:	2200      	movs	r2, #0
 800732c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800732e:	4b33      	ldr	r3, [pc, #204]	@ (80073fc <USBD_LL_Init+0x120>)
 8007330:	2200      	movs	r2, #0
 8007332:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007334:	4b31      	ldr	r3, [pc, #196]	@ (80073fc <USBD_LL_Init+0x120>)
 8007336:	2200      	movs	r2, #0
 8007338:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800733a:	4830      	ldr	r0, [pc, #192]	@ (80073fc <USBD_LL_Init+0x120>)
 800733c:	f7fa f89e 	bl	800147c <HAL_PCD_Init>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007346:	f7f9 fbbf 	bl	8000ac8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	482b      	ldr	r0, [pc, #172]	@ (80073fc <USBD_LL_Init+0x120>)
 800734e:	f7fb fab2 	bl	80028b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007352:	2240      	movs	r2, #64	@ 0x40
 8007354:	2100      	movs	r1, #0
 8007356:	4829      	ldr	r0, [pc, #164]	@ (80073fc <USBD_LL_Init+0x120>)
 8007358:	f7fb fa66 	bl	8002828 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800735c:	2280      	movs	r2, #128	@ 0x80
 800735e:	2101      	movs	r1, #1
 8007360:	4826      	ldr	r0, [pc, #152]	@ (80073fc <USBD_LL_Init+0x120>)
 8007362:	f7fb fa61 	bl	8002828 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d140      	bne.n	80073f0 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800736e:	4a24      	ldr	r2, [pc, #144]	@ (8007400 <USBD_LL_Init+0x124>)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a21      	ldr	r2, [pc, #132]	@ (8007400 <USBD_LL_Init+0x124>)
 800737a:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800737e:	4b20      	ldr	r3, [pc, #128]	@ (8007400 <USBD_LL_Init+0x124>)
 8007380:	4a20      	ldr	r2, [pc, #128]	@ (8007404 <USBD_LL_Init+0x128>)
 8007382:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8007384:	4b1e      	ldr	r3, [pc, #120]	@ (8007400 <USBD_LL_Init+0x124>)
 8007386:	2206      	movs	r2, #6
 8007388:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800738a:	4b1d      	ldr	r3, [pc, #116]	@ (8007400 <USBD_LL_Init+0x124>)
 800738c:	2200      	movs	r2, #0
 800738e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8007390:	4b1b      	ldr	r3, [pc, #108]	@ (8007400 <USBD_LL_Init+0x124>)
 8007392:	2200      	movs	r2, #0
 8007394:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8007396:	4b1a      	ldr	r3, [pc, #104]	@ (8007400 <USBD_LL_Init+0x124>)
 8007398:	2201      	movs	r2, #1
 800739a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800739c:	4b18      	ldr	r3, [pc, #96]	@ (8007400 <USBD_LL_Init+0x124>)
 800739e:	2200      	movs	r2, #0
 80073a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80073a2:	4b17      	ldr	r3, [pc, #92]	@ (8007400 <USBD_LL_Init+0x124>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80073a8:	4b15      	ldr	r3, [pc, #84]	@ (8007400 <USBD_LL_Init+0x124>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80073ae:	4b14      	ldr	r3, [pc, #80]	@ (8007400 <USBD_LL_Init+0x124>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80073b4:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <USBD_LL_Init+0x124>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80073ba:	4b11      	ldr	r3, [pc, #68]	@ (8007400 <USBD_LL_Init+0x124>)
 80073bc:	2200      	movs	r2, #0
 80073be:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80073c0:	480f      	ldr	r0, [pc, #60]	@ (8007400 <USBD_LL_Init+0x124>)
 80073c2:	f7fa f85b 	bl	800147c <HAL_PCD_Init>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 80073cc:	f7f9 fb7c 	bl	8000ac8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80073d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80073d4:	480a      	ldr	r0, [pc, #40]	@ (8007400 <USBD_LL_Init+0x124>)
 80073d6:	f7fb fa6e 	bl	80028b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80073da:	2280      	movs	r2, #128	@ 0x80
 80073dc:	2100      	movs	r1, #0
 80073de:	4808      	ldr	r0, [pc, #32]	@ (8007400 <USBD_LL_Init+0x124>)
 80073e0:	f7fb fa22 	bl	8002828 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80073e4:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80073e8:	2101      	movs	r1, #1
 80073ea:	4805      	ldr	r0, [pc, #20]	@ (8007400 <USBD_LL_Init+0x124>)
 80073ec:	f7fb fa1c 	bl	8002828 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000ac4 	.word	0x20000ac4
 8007400:	20000fa8 	.word	0x20000fa8
 8007404:	40040000 	.word	0x40040000

08007408 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800741e:	4618      	mov	r0, r3
 8007420:	f7fa f93b 	bl	800169a <HAL_PCD_Start>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f930 	bl	8007690 <USBD_Get_USB_Status>
 8007430:	4603      	mov	r3, r0
 8007432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007434:	7bbb      	ldrb	r3, [r7, #14]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	4608      	mov	r0, r1
 8007448:	4611      	mov	r1, r2
 800744a:	461a      	mov	r2, r3
 800744c:	4603      	mov	r3, r0
 800744e:	70fb      	strb	r3, [r7, #3]
 8007450:	460b      	mov	r3, r1
 8007452:	70bb      	strb	r3, [r7, #2]
 8007454:	4613      	mov	r3, r2
 8007456:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007466:	78bb      	ldrb	r3, [r7, #2]
 8007468:	883a      	ldrh	r2, [r7, #0]
 800746a:	78f9      	ldrb	r1, [r7, #3]
 800746c:	f7fa fe0f 	bl	800208e <HAL_PCD_EP_Open>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f90a 	bl	8007690 <USBD_Get_USB_Status>
 800747c:	4603      	mov	r3, r0
 800747e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007480:	7bbb      	ldrb	r3, [r7, #14]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fa fe5a 	bl	8002162 <HAL_PCD_EP_Close>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 f8eb 	bl	8007690 <USBD_Get_USB_Status>
 80074ba:	4603      	mov	r3, r0
 80074bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074be:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fa fefa 	bl	80022e0 <HAL_PCD_EP_SetStall>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f8cc 	bl	8007690 <USBD_Get_USB_Status>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7fa ff3e 	bl	80023a6 <HAL_PCD_EP_ClrStall>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f8ad 	bl	8007690 <USBD_Get_USB_Status>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753a:	7bbb      	ldrb	r3, [r7, #14]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007556:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0b      	bge.n	8007578 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3316      	adds	r3, #22
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	e00b      	b.n	8007590 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800758e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa fd43 	bl	8002046 <HAL_PCD_SetAddress>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f862 	bl	8007690 <USBD_Get_USB_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	460b      	mov	r3, r1
 80075e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80075f8:	7af9      	ldrb	r1, [r7, #11]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	f7fa fe35 	bl	800226c <HAL_PCD_EP_Transmit>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 f841 	bl	8007690 <USBD_Get_USB_Status>
 800760e:	4603      	mov	r3, r0
 8007610:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007612:	7dbb      	ldrb	r3, [r7, #22]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	460b      	mov	r3, r1
 800762a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800763a:	7af9      	ldrb	r1, [r7, #11]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	f7fa fdd9 	bl	80021f6 <HAL_PCD_EP_Receive>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f820 	bl	8007690 <USBD_Get_USB_Status>
 8007650:	4603      	mov	r3, r0
 8007652:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007654:	7dbb      	ldrb	r3, [r7, #22]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007668:	4b03      	ldr	r3, [pc, #12]	@ (8007678 <USBD_static_malloc+0x18>)
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	2000148c 	.word	0x2000148c

0800767c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]

}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d817      	bhi.n	80076d4 <USBD_Get_USB_Status+0x44>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <USBD_Get_USB_Status+0x1c>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076c3 	.word	0x080076c3
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	080076cf 	.word	0x080076cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
    break;
 80076c0:	e00b      	b.n	80076da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	73fb      	strb	r3, [r7, #15]
    break;
 80076c6:	e008      	b.n	80076da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
    break;
 80076cc:	e005      	b.n	80076da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076ce:	2303      	movs	r3, #3
 80076d0:	73fb      	strb	r3, [r7, #15]
    break;
 80076d2:	e002      	b.n	80076da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	73fb      	strb	r3, [r7, #15]
    break;
 80076d8:	bf00      	nop
  }
  return usb_status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <siprintf>:
 80076e8:	b40e      	push	{r1, r2, r3}
 80076ea:	b500      	push	{lr}
 80076ec:	b09c      	sub	sp, #112	@ 0x70
 80076ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80076f0:	9002      	str	r0, [sp, #8]
 80076f2:	9006      	str	r0, [sp, #24]
 80076f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076f8:	4809      	ldr	r0, [pc, #36]	@ (8007720 <siprintf+0x38>)
 80076fa:	9107      	str	r1, [sp, #28]
 80076fc:	9104      	str	r1, [sp, #16]
 80076fe:	4909      	ldr	r1, [pc, #36]	@ (8007724 <siprintf+0x3c>)
 8007700:	f853 2b04 	ldr.w	r2, [r3], #4
 8007704:	9105      	str	r1, [sp, #20]
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	a902      	add	r1, sp, #8
 800770c:	f000 f99c 	bl	8007a48 <_svfiprintf_r>
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	b01c      	add	sp, #112	@ 0x70
 8007718:	f85d eb04 	ldr.w	lr, [sp], #4
 800771c:	b003      	add	sp, #12
 800771e:	4770      	bx	lr
 8007720:	2000019c 	.word	0x2000019c
 8007724:	ffff0208 	.word	0xffff0208

08007728 <memcmp>:
 8007728:	b510      	push	{r4, lr}
 800772a:	3901      	subs	r1, #1
 800772c:	4402      	add	r2, r0
 800772e:	4290      	cmp	r0, r2
 8007730:	d101      	bne.n	8007736 <memcmp+0xe>
 8007732:	2000      	movs	r0, #0
 8007734:	e005      	b.n	8007742 <memcmp+0x1a>
 8007736:	7803      	ldrb	r3, [r0, #0]
 8007738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800773c:	42a3      	cmp	r3, r4
 800773e:	d001      	beq.n	8007744 <memcmp+0x1c>
 8007740:	1b18      	subs	r0, r3, r4
 8007742:	bd10      	pop	{r4, pc}
 8007744:	3001      	adds	r0, #1
 8007746:	e7f2      	b.n	800772e <memcmp+0x6>

08007748 <__errno>:
 8007748:	4b01      	ldr	r3, [pc, #4]	@ (8007750 <__errno+0x8>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	2000019c 	.word	0x2000019c

08007754 <__libc_init_array>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4d0d      	ldr	r5, [pc, #52]	@ (800778c <__libc_init_array+0x38>)
 8007758:	4c0d      	ldr	r4, [pc, #52]	@ (8007790 <__libc_init_array+0x3c>)
 800775a:	1b64      	subs	r4, r4, r5
 800775c:	10a4      	asrs	r4, r4, #2
 800775e:	2600      	movs	r6, #0
 8007760:	42a6      	cmp	r6, r4
 8007762:	d109      	bne.n	8007778 <__libc_init_array+0x24>
 8007764:	4d0b      	ldr	r5, [pc, #44]	@ (8007794 <__libc_init_array+0x40>)
 8007766:	4c0c      	ldr	r4, [pc, #48]	@ (8007798 <__libc_init_array+0x44>)
 8007768:	f000 fc66 	bl	8008038 <_init>
 800776c:	1b64      	subs	r4, r4, r5
 800776e:	10a4      	asrs	r4, r4, #2
 8007770:	2600      	movs	r6, #0
 8007772:	42a6      	cmp	r6, r4
 8007774:	d105      	bne.n	8007782 <__libc_init_array+0x2e>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	f855 3b04 	ldr.w	r3, [r5], #4
 800777c:	4798      	blx	r3
 800777e:	3601      	adds	r6, #1
 8007780:	e7ee      	b.n	8007760 <__libc_init_array+0xc>
 8007782:	f855 3b04 	ldr.w	r3, [r5], #4
 8007786:	4798      	blx	r3
 8007788:	3601      	adds	r6, #1
 800778a:	e7f2      	b.n	8007772 <__libc_init_array+0x1e>
 800778c:	08008164 	.word	0x08008164
 8007790:	08008164 	.word	0x08008164
 8007794:	08008164 	.word	0x08008164
 8007798:	08008168 	.word	0x08008168

0800779c <__retarget_lock_acquire_recursive>:
 800779c:	4770      	bx	lr

0800779e <__retarget_lock_release_recursive>:
 800779e:	4770      	bx	lr

080077a0 <_free_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4605      	mov	r5, r0
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d041      	beq.n	800782c <_free_r+0x8c>
 80077a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ac:	1f0c      	subs	r4, r1, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	18e4      	addlt	r4, r4, r3
 80077b4:	f000 f8e0 	bl	8007978 <__malloc_lock>
 80077b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007830 <_free_r+0x90>)
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	b933      	cbnz	r3, 80077cc <_free_r+0x2c>
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6014      	str	r4, [r2, #0]
 80077c2:	4628      	mov	r0, r5
 80077c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077c8:	f000 b8dc 	b.w	8007984 <__malloc_unlock>
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	d908      	bls.n	80077e2 <_free_r+0x42>
 80077d0:	6820      	ldr	r0, [r4, #0]
 80077d2:	1821      	adds	r1, r4, r0
 80077d4:	428b      	cmp	r3, r1
 80077d6:	bf01      	itttt	eq
 80077d8:	6819      	ldreq	r1, [r3, #0]
 80077da:	685b      	ldreq	r3, [r3, #4]
 80077dc:	1809      	addeq	r1, r1, r0
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	e7ed      	b.n	80077be <_free_r+0x1e>
 80077e2:	461a      	mov	r2, r3
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	b10b      	cbz	r3, 80077ec <_free_r+0x4c>
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d9fa      	bls.n	80077e2 <_free_r+0x42>
 80077ec:	6811      	ldr	r1, [r2, #0]
 80077ee:	1850      	adds	r0, r2, r1
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d10b      	bne.n	800780c <_free_r+0x6c>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	4401      	add	r1, r0
 80077f8:	1850      	adds	r0, r2, r1
 80077fa:	4283      	cmp	r3, r0
 80077fc:	6011      	str	r1, [r2, #0]
 80077fe:	d1e0      	bne.n	80077c2 <_free_r+0x22>
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	6053      	str	r3, [r2, #4]
 8007806:	4408      	add	r0, r1
 8007808:	6010      	str	r0, [r2, #0]
 800780a:	e7da      	b.n	80077c2 <_free_r+0x22>
 800780c:	d902      	bls.n	8007814 <_free_r+0x74>
 800780e:	230c      	movs	r3, #12
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	e7d6      	b.n	80077c2 <_free_r+0x22>
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	1821      	adds	r1, r4, r0
 8007818:	428b      	cmp	r3, r1
 800781a:	bf04      	itt	eq
 800781c:	6819      	ldreq	r1, [r3, #0]
 800781e:	685b      	ldreq	r3, [r3, #4]
 8007820:	6063      	str	r3, [r4, #4]
 8007822:	bf04      	itt	eq
 8007824:	1809      	addeq	r1, r1, r0
 8007826:	6021      	streq	r1, [r4, #0]
 8007828:	6054      	str	r4, [r2, #4]
 800782a:	e7ca      	b.n	80077c2 <_free_r+0x22>
 800782c:	bd38      	pop	{r3, r4, r5, pc}
 800782e:	bf00      	nop
 8007830:	200015e4 	.word	0x200015e4

08007834 <sbrk_aligned>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4e0f      	ldr	r6, [pc, #60]	@ (8007874 <sbrk_aligned+0x40>)
 8007838:	460c      	mov	r4, r1
 800783a:	6831      	ldr	r1, [r6, #0]
 800783c:	4605      	mov	r5, r0
 800783e:	b911      	cbnz	r1, 8007846 <sbrk_aligned+0x12>
 8007840:	f000 fba6 	bl	8007f90 <_sbrk_r>
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fba1 	bl	8007f90 <_sbrk_r>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d103      	bne.n	800785a <sbrk_aligned+0x26>
 8007852:	f04f 34ff 	mov.w	r4, #4294967295
 8007856:	4620      	mov	r0, r4
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	1cc4      	adds	r4, r0, #3
 800785c:	f024 0403 	bic.w	r4, r4, #3
 8007860:	42a0      	cmp	r0, r4
 8007862:	d0f8      	beq.n	8007856 <sbrk_aligned+0x22>
 8007864:	1a21      	subs	r1, r4, r0
 8007866:	4628      	mov	r0, r5
 8007868:	f000 fb92 	bl	8007f90 <_sbrk_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d1f2      	bne.n	8007856 <sbrk_aligned+0x22>
 8007870:	e7ef      	b.n	8007852 <sbrk_aligned+0x1e>
 8007872:	bf00      	nop
 8007874:	200015e0 	.word	0x200015e0

08007878 <_malloc_r>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	1ccd      	adds	r5, r1, #3
 800787e:	f025 0503 	bic.w	r5, r5, #3
 8007882:	3508      	adds	r5, #8
 8007884:	2d0c      	cmp	r5, #12
 8007886:	bf38      	it	cc
 8007888:	250c      	movcc	r5, #12
 800788a:	2d00      	cmp	r5, #0
 800788c:	4606      	mov	r6, r0
 800788e:	db01      	blt.n	8007894 <_malloc_r+0x1c>
 8007890:	42a9      	cmp	r1, r5
 8007892:	d904      	bls.n	800789e <_malloc_r+0x26>
 8007894:	230c      	movs	r3, #12
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	2000      	movs	r0, #0
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007974 <_malloc_r+0xfc>
 80078a2:	f000 f869 	bl	8007978 <__malloc_lock>
 80078a6:	f8d8 3000 	ldr.w	r3, [r8]
 80078aa:	461c      	mov	r4, r3
 80078ac:	bb44      	cbnz	r4, 8007900 <_malloc_r+0x88>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff ffbf 	bl	8007834 <sbrk_aligned>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	4604      	mov	r4, r0
 80078ba:	d158      	bne.n	800796e <_malloc_r+0xf6>
 80078bc:	f8d8 4000 	ldr.w	r4, [r8]
 80078c0:	4627      	mov	r7, r4
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	d143      	bne.n	800794e <_malloc_r+0xd6>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d04b      	beq.n	8007962 <_malloc_r+0xea>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4639      	mov	r1, r7
 80078ce:	4630      	mov	r0, r6
 80078d0:	eb04 0903 	add.w	r9, r4, r3
 80078d4:	f000 fb5c 	bl	8007f90 <_sbrk_r>
 80078d8:	4581      	cmp	r9, r0
 80078da:	d142      	bne.n	8007962 <_malloc_r+0xea>
 80078dc:	6821      	ldr	r1, [r4, #0]
 80078de:	1a6d      	subs	r5, r5, r1
 80078e0:	4629      	mov	r1, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ffa6 	bl	8007834 <sbrk_aligned>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d03a      	beq.n	8007962 <_malloc_r+0xea>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	442b      	add	r3, r5
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	f8d8 3000 	ldr.w	r3, [r8]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	bb62      	cbnz	r2, 8007954 <_malloc_r+0xdc>
 80078fa:	f8c8 7000 	str.w	r7, [r8]
 80078fe:	e00f      	b.n	8007920 <_malloc_r+0xa8>
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	1b52      	subs	r2, r2, r5
 8007904:	d420      	bmi.n	8007948 <_malloc_r+0xd0>
 8007906:	2a0b      	cmp	r2, #11
 8007908:	d917      	bls.n	800793a <_malloc_r+0xc2>
 800790a:	1961      	adds	r1, r4, r5
 800790c:	42a3      	cmp	r3, r4
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	6059      	strne	r1, [r3, #4]
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	bf08      	it	eq
 8007918:	f8c8 1000 	streq.w	r1, [r8]
 800791c:	5162      	str	r2, [r4, r5]
 800791e:	604b      	str	r3, [r1, #4]
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f82f 	bl	8007984 <__malloc_unlock>
 8007926:	f104 000b 	add.w	r0, r4, #11
 800792a:	1d23      	adds	r3, r4, #4
 800792c:	f020 0007 	bic.w	r0, r0, #7
 8007930:	1ac2      	subs	r2, r0, r3
 8007932:	bf1c      	itt	ne
 8007934:	1a1b      	subne	r3, r3, r0
 8007936:	50a3      	strne	r3, [r4, r2]
 8007938:	e7af      	b.n	800789a <_malloc_r+0x22>
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	42a3      	cmp	r3, r4
 800793e:	bf0c      	ite	eq
 8007940:	f8c8 2000 	streq.w	r2, [r8]
 8007944:	605a      	strne	r2, [r3, #4]
 8007946:	e7eb      	b.n	8007920 <_malloc_r+0xa8>
 8007948:	4623      	mov	r3, r4
 800794a:	6864      	ldr	r4, [r4, #4]
 800794c:	e7ae      	b.n	80078ac <_malloc_r+0x34>
 800794e:	463c      	mov	r4, r7
 8007950:	687f      	ldr	r7, [r7, #4]
 8007952:	e7b6      	b.n	80078c2 <_malloc_r+0x4a>
 8007954:	461a      	mov	r2, r3
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	42a3      	cmp	r3, r4
 800795a:	d1fb      	bne.n	8007954 <_malloc_r+0xdc>
 800795c:	2300      	movs	r3, #0
 800795e:	6053      	str	r3, [r2, #4]
 8007960:	e7de      	b.n	8007920 <_malloc_r+0xa8>
 8007962:	230c      	movs	r3, #12
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	4630      	mov	r0, r6
 8007968:	f000 f80c 	bl	8007984 <__malloc_unlock>
 800796c:	e794      	b.n	8007898 <_malloc_r+0x20>
 800796e:	6005      	str	r5, [r0, #0]
 8007970:	e7d6      	b.n	8007920 <_malloc_r+0xa8>
 8007972:	bf00      	nop
 8007974:	200015e4 	.word	0x200015e4

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_lock+0x8>)
 800797a:	f7ff bf0f 	b.w	800779c <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200015dc 	.word	0x200015dc

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	@ (800798c <__malloc_unlock+0x8>)
 8007986:	f7ff bf0a 	b.w	800779e <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200015dc 	.word	0x200015dc

08007990 <__ssputs_r>:
 8007990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	688e      	ldr	r6, [r1, #8]
 8007996:	461f      	mov	r7, r3
 8007998:	42be      	cmp	r6, r7
 800799a:	680b      	ldr	r3, [r1, #0]
 800799c:	4682      	mov	sl, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	4690      	mov	r8, r2
 80079a2:	d82d      	bhi.n	8007a00 <__ssputs_r+0x70>
 80079a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079ac:	d026      	beq.n	80079fc <__ssputs_r+0x6c>
 80079ae:	6965      	ldr	r5, [r4, #20]
 80079b0:	6909      	ldr	r1, [r1, #16]
 80079b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079b6:	eba3 0901 	sub.w	r9, r3, r1
 80079ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079be:	1c7b      	adds	r3, r7, #1
 80079c0:	444b      	add	r3, r9
 80079c2:	106d      	asrs	r5, r5, #1
 80079c4:	429d      	cmp	r5, r3
 80079c6:	bf38      	it	cc
 80079c8:	461d      	movcc	r5, r3
 80079ca:	0553      	lsls	r3, r2, #21
 80079cc:	d527      	bpl.n	8007a1e <__ssputs_r+0x8e>
 80079ce:	4629      	mov	r1, r5
 80079d0:	f7ff ff52 	bl	8007878 <_malloc_r>
 80079d4:	4606      	mov	r6, r0
 80079d6:	b360      	cbz	r0, 8007a32 <__ssputs_r+0xa2>
 80079d8:	6921      	ldr	r1, [r4, #16]
 80079da:	464a      	mov	r2, r9
 80079dc:	f000 fae8 	bl	8007fb0 <memcpy>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	6126      	str	r6, [r4, #16]
 80079ee:	6165      	str	r5, [r4, #20]
 80079f0:	444e      	add	r6, r9
 80079f2:	eba5 0509 	sub.w	r5, r5, r9
 80079f6:	6026      	str	r6, [r4, #0]
 80079f8:	60a5      	str	r5, [r4, #8]
 80079fa:	463e      	mov	r6, r7
 80079fc:	42be      	cmp	r6, r7
 80079fe:	d900      	bls.n	8007a02 <__ssputs_r+0x72>
 8007a00:	463e      	mov	r6, r7
 8007a02:	6820      	ldr	r0, [r4, #0]
 8007a04:	4632      	mov	r2, r6
 8007a06:	4641      	mov	r1, r8
 8007a08:	f000 faa8 	bl	8007f5c <memmove>
 8007a0c:	68a3      	ldr	r3, [r4, #8]
 8007a0e:	1b9b      	subs	r3, r3, r6
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	4433      	add	r3, r6
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	2000      	movs	r0, #0
 8007a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1e:	462a      	mov	r2, r5
 8007a20:	f000 fad4 	bl	8007fcc <_realloc_r>
 8007a24:	4606      	mov	r6, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d1e0      	bne.n	80079ec <__ssputs_r+0x5c>
 8007a2a:	6921      	ldr	r1, [r4, #16]
 8007a2c:	4650      	mov	r0, sl
 8007a2e:	f7ff feb7 	bl	80077a0 <_free_r>
 8007a32:	230c      	movs	r3, #12
 8007a34:	f8ca 3000 	str.w	r3, [sl]
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e7e9      	b.n	8007a1a <__ssputs_r+0x8a>
	...

08007a48 <_svfiprintf_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	4698      	mov	r8, r3
 8007a4e:	898b      	ldrh	r3, [r1, #12]
 8007a50:	061b      	lsls	r3, r3, #24
 8007a52:	b09d      	sub	sp, #116	@ 0x74
 8007a54:	4607      	mov	r7, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	4614      	mov	r4, r2
 8007a5a:	d510      	bpl.n	8007a7e <_svfiprintf_r+0x36>
 8007a5c:	690b      	ldr	r3, [r1, #16]
 8007a5e:	b973      	cbnz	r3, 8007a7e <_svfiprintf_r+0x36>
 8007a60:	2140      	movs	r1, #64	@ 0x40
 8007a62:	f7ff ff09 	bl	8007878 <_malloc_r>
 8007a66:	6028      	str	r0, [r5, #0]
 8007a68:	6128      	str	r0, [r5, #16]
 8007a6a:	b930      	cbnz	r0, 8007a7a <_svfiprintf_r+0x32>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	b01d      	add	sp, #116	@ 0x74
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	2340      	movs	r3, #64	@ 0x40
 8007a7c:	616b      	str	r3, [r5, #20]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a82:	2320      	movs	r3, #32
 8007a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a8c:	2330      	movs	r3, #48	@ 0x30
 8007a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c2c <_svfiprintf_r+0x1e4>
 8007a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a96:	f04f 0901 	mov.w	r9, #1
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	469a      	mov	sl, r3
 8007a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa2:	b10a      	cbz	r2, 8007aa8 <_svfiprintf_r+0x60>
 8007aa4:	2a25      	cmp	r2, #37	@ 0x25
 8007aa6:	d1f9      	bne.n	8007a9c <_svfiprintf_r+0x54>
 8007aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8007aac:	d00b      	beq.n	8007ac6 <_svfiprintf_r+0x7e>
 8007aae:	465b      	mov	r3, fp
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff ff6b 	bl	8007990 <__ssputs_r>
 8007aba:	3001      	adds	r0, #1
 8007abc:	f000 80a7 	beq.w	8007c0e <_svfiprintf_r+0x1c6>
 8007ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ac2:	445a      	add	r2, fp
 8007ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 809f 	beq.w	8007c0e <_svfiprintf_r+0x1c6>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ada:	f10a 0a01 	add.w	sl, sl, #1
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	9307      	str	r3, [sp, #28]
 8007ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ae8:	4654      	mov	r4, sl
 8007aea:	2205      	movs	r2, #5
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	484e      	ldr	r0, [pc, #312]	@ (8007c2c <_svfiprintf_r+0x1e4>)
 8007af2:	f7f8 fb75 	bl	80001e0 <memchr>
 8007af6:	9a04      	ldr	r2, [sp, #16]
 8007af8:	b9d8      	cbnz	r0, 8007b32 <_svfiprintf_r+0xea>
 8007afa:	06d0      	lsls	r0, r2, #27
 8007afc:	bf44      	itt	mi
 8007afe:	2320      	movmi	r3, #32
 8007b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b04:	0711      	lsls	r1, r2, #28
 8007b06:	bf44      	itt	mi
 8007b08:	232b      	movmi	r3, #43	@ 0x2b
 8007b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b14:	d015      	beq.n	8007b42 <_svfiprintf_r+0xfa>
 8007b16:	9a07      	ldr	r2, [sp, #28]
 8007b18:	4654      	mov	r4, sl
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	f04f 0c0a 	mov.w	ip, #10
 8007b20:	4621      	mov	r1, r4
 8007b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b26:	3b30      	subs	r3, #48	@ 0x30
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d94b      	bls.n	8007bc4 <_svfiprintf_r+0x17c>
 8007b2c:	b1b0      	cbz	r0, 8007b5c <_svfiprintf_r+0x114>
 8007b2e:	9207      	str	r2, [sp, #28]
 8007b30:	e014      	b.n	8007b5c <_svfiprintf_r+0x114>
 8007b32:	eba0 0308 	sub.w	r3, r0, r8
 8007b36:	fa09 f303 	lsl.w	r3, r9, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	46a2      	mov	sl, r4
 8007b40:	e7d2      	b.n	8007ae8 <_svfiprintf_r+0xa0>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	9103      	str	r1, [sp, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfbb      	ittet	lt
 8007b4e:	425b      	neglt	r3, r3
 8007b50:	f042 0202 	orrlt.w	r2, r2, #2
 8007b54:	9307      	strge	r3, [sp, #28]
 8007b56:	9307      	strlt	r3, [sp, #28]
 8007b58:	bfb8      	it	lt
 8007b5a:	9204      	strlt	r2, [sp, #16]
 8007b5c:	7823      	ldrb	r3, [r4, #0]
 8007b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b60:	d10a      	bne.n	8007b78 <_svfiprintf_r+0x130>
 8007b62:	7863      	ldrb	r3, [r4, #1]
 8007b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b66:	d132      	bne.n	8007bce <_svfiprintf_r+0x186>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	1d1a      	adds	r2, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9203      	str	r2, [sp, #12]
 8007b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b74:	3402      	adds	r4, #2
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c3c <_svfiprintf_r+0x1f4>
 8007b7c:	7821      	ldrb	r1, [r4, #0]
 8007b7e:	2203      	movs	r2, #3
 8007b80:	4650      	mov	r0, sl
 8007b82:	f7f8 fb2d 	bl	80001e0 <memchr>
 8007b86:	b138      	cbz	r0, 8007b98 <_svfiprintf_r+0x150>
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	eba0 000a 	sub.w	r0, r0, sl
 8007b8e:	2240      	movs	r2, #64	@ 0x40
 8007b90:	4082      	lsls	r2, r0
 8007b92:	4313      	orrs	r3, r2
 8007b94:	3401      	adds	r4, #1
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9c:	4824      	ldr	r0, [pc, #144]	@ (8007c30 <_svfiprintf_r+0x1e8>)
 8007b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	f7f8 fb1c 	bl	80001e0 <memchr>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d036      	beq.n	8007c1a <_svfiprintf_r+0x1d2>
 8007bac:	4b21      	ldr	r3, [pc, #132]	@ (8007c34 <_svfiprintf_r+0x1ec>)
 8007bae:	bb1b      	cbnz	r3, 8007bf8 <_svfiprintf_r+0x1b0>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	3307      	adds	r3, #7
 8007bb4:	f023 0307 	bic.w	r3, r3, #7
 8007bb8:	3308      	adds	r3, #8
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbe:	4433      	add	r3, r6
 8007bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc2:	e76a      	b.n	8007a9a <_svfiprintf_r+0x52>
 8007bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc8:	460c      	mov	r4, r1
 8007bca:	2001      	movs	r0, #1
 8007bcc:	e7a8      	b.n	8007b20 <_svfiprintf_r+0xd8>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f04f 0c0a 	mov.w	ip, #10
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be0:	3a30      	subs	r2, #48	@ 0x30
 8007be2:	2a09      	cmp	r2, #9
 8007be4:	d903      	bls.n	8007bee <_svfiprintf_r+0x1a6>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0c6      	beq.n	8007b78 <_svfiprintf_r+0x130>
 8007bea:	9105      	str	r1, [sp, #20]
 8007bec:	e7c4      	b.n	8007b78 <_svfiprintf_r+0x130>
 8007bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e7f0      	b.n	8007bda <_svfiprintf_r+0x192>
 8007bf8:	ab03      	add	r3, sp, #12
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	462a      	mov	r2, r5
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007c38 <_svfiprintf_r+0x1f0>)
 8007c00:	a904      	add	r1, sp, #16
 8007c02:	4638      	mov	r0, r7
 8007c04:	f3af 8000 	nop.w
 8007c08:	1c42      	adds	r2, r0, #1
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	d1d6      	bne.n	8007bbc <_svfiprintf_r+0x174>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	065b      	lsls	r3, r3, #25
 8007c12:	f53f af2d 	bmi.w	8007a70 <_svfiprintf_r+0x28>
 8007c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c18:	e72c      	b.n	8007a74 <_svfiprintf_r+0x2c>
 8007c1a:	ab03      	add	r3, sp, #12
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	462a      	mov	r2, r5
 8007c20:	4b05      	ldr	r3, [pc, #20]	@ (8007c38 <_svfiprintf_r+0x1f0>)
 8007c22:	a904      	add	r1, sp, #16
 8007c24:	4638      	mov	r0, r7
 8007c26:	f000 f879 	bl	8007d1c <_printf_i>
 8007c2a:	e7ed      	b.n	8007c08 <_svfiprintf_r+0x1c0>
 8007c2c:	08008128 	.word	0x08008128
 8007c30:	08008132 	.word	0x08008132
 8007c34:	00000000 	.word	0x00000000
 8007c38:	08007991 	.word	0x08007991
 8007c3c:	0800812e 	.word	0x0800812e

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4698      	mov	r8, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bfb8      	it	lt
 8007c54:	4613      	movlt	r3, r2
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc26      	bgt.n	8007cd6 <_printf_common+0x96>
 8007c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	3b00      	subs	r3, #0
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d42b      	bmi.n	8007cf0 <_printf_common+0xb0>
 8007c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c8      	blx	r9
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d01e      	beq.n	8007ce4 <_printf_common+0xa4>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	6922      	ldr	r2, [r4, #16]
 8007caa:	f003 0306 	and.w	r3, r3, #6
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	bf02      	ittt	eq
 8007cb2:	68e5      	ldreq	r5, [r4, #12]
 8007cb4:	6833      	ldreq	r3, [r6, #0]
 8007cb6:	1aed      	subeq	r5, r5, r3
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	bf0c      	ite	eq
 8007cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc0:	2500      	movne	r5, #0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bfc4      	itt	gt
 8007cc6:	1a9b      	subgt	r3, r3, r2
 8007cc8:	18ed      	addgt	r5, r5, r3
 8007cca:	2600      	movs	r6, #0
 8007ccc:	341a      	adds	r4, #26
 8007cce:	42b5      	cmp	r5, r6
 8007cd0:	d11a      	bne.n	8007d08 <_printf_common+0xc8>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e008      	b.n	8007ce8 <_printf_common+0xa8>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4652      	mov	r2, sl
 8007cda:	4641      	mov	r1, r8
 8007cdc:	4638      	mov	r0, r7
 8007cde:	47c8      	blx	r9
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d103      	bne.n	8007cec <_printf_common+0xac>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cec:	3501      	adds	r5, #1
 8007cee:	e7c6      	b.n	8007c7e <_printf_common+0x3e>
 8007cf0:	18e1      	adds	r1, r4, r3
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	2030      	movs	r0, #48	@ 0x30
 8007cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cfa:	4422      	add	r2, r4
 8007cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d04:	3302      	adds	r3, #2
 8007d06:	e7c7      	b.n	8007c98 <_printf_common+0x58>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	4638      	mov	r0, r7
 8007d10:	47c8      	blx	r9
 8007d12:	3001      	adds	r0, #1
 8007d14:	d0e6      	beq.n	8007ce4 <_printf_common+0xa4>
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7d9      	b.n	8007cce <_printf_common+0x8e>
	...

08007d1c <_printf_i>:
 8007d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	7e0f      	ldrb	r7, [r1, #24]
 8007d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d24:	2f78      	cmp	r7, #120	@ 0x78
 8007d26:	4691      	mov	r9, r2
 8007d28:	4680      	mov	r8, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d32:	d807      	bhi.n	8007d44 <_printf_i+0x28>
 8007d34:	2f62      	cmp	r7, #98	@ 0x62
 8007d36:	d80a      	bhi.n	8007d4e <_printf_i+0x32>
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	f000 80d2 	beq.w	8007ee2 <_printf_i+0x1c6>
 8007d3e:	2f58      	cmp	r7, #88	@ 0x58
 8007d40:	f000 80b9 	beq.w	8007eb6 <_printf_i+0x19a>
 8007d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d4c:	e03a      	b.n	8007dc4 <_printf_i+0xa8>
 8007d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d52:	2b15      	cmp	r3, #21
 8007d54:	d8f6      	bhi.n	8007d44 <_printf_i+0x28>
 8007d56:	a101      	add	r1, pc, #4	@ (adr r1, 8007d5c <_printf_i+0x40>)
 8007d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007d45 	.word	0x08007d45
 8007d68:	08007d45 	.word	0x08007d45
 8007d6c:	08007d45 	.word	0x08007d45
 8007d70:	08007d45 	.word	0x08007d45
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d45 	.word	0x08007d45
 8007d7c:	08007d45 	.word	0x08007d45
 8007d80:	08007d45 	.word	0x08007d45
 8007d84:	08007d45 	.word	0x08007d45
 8007d88:	08007ec9 	.word	0x08007ec9
 8007d8c:	08007df3 	.word	0x08007df3
 8007d90:	08007e83 	.word	0x08007e83
 8007d94:	08007d45 	.word	0x08007d45
 8007d98:	08007d45 	.word	0x08007d45
 8007d9c:	08007eeb 	.word	0x08007eeb
 8007da0:	08007d45 	.word	0x08007d45
 8007da4:	08007df3 	.word	0x08007df3
 8007da8:	08007d45 	.word	0x08007d45
 8007dac:	08007d45 	.word	0x08007d45
 8007db0:	08007e8b 	.word	0x08007e8b
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6032      	str	r2, [r6, #0]
 8007dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e09d      	b.n	8007f04 <_printf_i+0x1e8>
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	6031      	str	r1, [r6, #0]
 8007dd0:	0606      	lsls	r6, r0, #24
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_i+0xbc>
 8007dd4:	681d      	ldr	r5, [r3, #0]
 8007dd6:	e003      	b.n	8007de0 <_printf_i+0xc4>
 8007dd8:	0645      	lsls	r5, r0, #25
 8007dda:	d5fb      	bpl.n	8007dd4 <_printf_i+0xb8>
 8007ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	da03      	bge.n	8007dec <_printf_i+0xd0>
 8007de4:	232d      	movs	r3, #45	@ 0x2d
 8007de6:	426d      	negs	r5, r5
 8007de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dec:	4859      	ldr	r0, [pc, #356]	@ (8007f54 <_printf_i+0x238>)
 8007dee:	230a      	movs	r3, #10
 8007df0:	e011      	b.n	8007e16 <_printf_i+0xfa>
 8007df2:	6821      	ldr	r1, [r4, #0]
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	0608      	lsls	r0, r1, #24
 8007df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dfc:	d402      	bmi.n	8007e04 <_printf_i+0xe8>
 8007dfe:	0649      	lsls	r1, r1, #25
 8007e00:	bf48      	it	mi
 8007e02:	b2ad      	uxthmi	r5, r5
 8007e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e06:	4853      	ldr	r0, [pc, #332]	@ (8007f54 <_printf_i+0x238>)
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	bf14      	ite	ne
 8007e0c:	230a      	movne	r3, #10
 8007e0e:	2308      	moveq	r3, #8
 8007e10:	2100      	movs	r1, #0
 8007e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e16:	6866      	ldr	r6, [r4, #4]
 8007e18:	60a6      	str	r6, [r4, #8]
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	bfa2      	ittt	ge
 8007e1e:	6821      	ldrge	r1, [r4, #0]
 8007e20:	f021 0104 	bicge.w	r1, r1, #4
 8007e24:	6021      	strge	r1, [r4, #0]
 8007e26:	b90d      	cbnz	r5, 8007e2c <_printf_i+0x110>
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	d04b      	beq.n	8007ec4 <_printf_i+0x1a8>
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e32:	fb03 5711 	mls	r7, r3, r1, r5
 8007e36:	5dc7      	ldrb	r7, [r0, r7]
 8007e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e3c:	462f      	mov	r7, r5
 8007e3e:	42bb      	cmp	r3, r7
 8007e40:	460d      	mov	r5, r1
 8007e42:	d9f4      	bls.n	8007e2e <_printf_i+0x112>
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d10b      	bne.n	8007e60 <_printf_i+0x144>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	07df      	lsls	r7, r3, #31
 8007e4c:	d508      	bpl.n	8007e60 <_printf_i+0x144>
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	6861      	ldr	r1, [r4, #4]
 8007e52:	4299      	cmp	r1, r3
 8007e54:	bfde      	ittt	le
 8007e56:	2330      	movle	r3, #48	@ 0x30
 8007e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e60:	1b92      	subs	r2, r2, r6
 8007e62:	6122      	str	r2, [r4, #16]
 8007e64:	f8cd a000 	str.w	sl, [sp]
 8007e68:	464b      	mov	r3, r9
 8007e6a:	aa03      	add	r2, sp, #12
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4640      	mov	r0, r8
 8007e70:	f7ff fee6 	bl	8007c40 <_printf_common>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d14a      	bne.n	8007f0e <_printf_i+0x1f2>
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	b004      	add	sp, #16
 8007e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	f043 0320 	orr.w	r3, r3, #32
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	4833      	ldr	r0, [pc, #204]	@ (8007f58 <_printf_i+0x23c>)
 8007e8c:	2778      	movs	r7, #120	@ 0x78
 8007e8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	6831      	ldr	r1, [r6, #0]
 8007e96:	061f      	lsls	r7, r3, #24
 8007e98:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e9c:	d402      	bmi.n	8007ea4 <_printf_i+0x188>
 8007e9e:	065f      	lsls	r7, r3, #25
 8007ea0:	bf48      	it	mi
 8007ea2:	b2ad      	uxthmi	r5, r5
 8007ea4:	6031      	str	r1, [r6, #0]
 8007ea6:	07d9      	lsls	r1, r3, #31
 8007ea8:	bf44      	itt	mi
 8007eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8007eae:	6023      	strmi	r3, [r4, #0]
 8007eb0:	b11d      	cbz	r5, 8007eba <_printf_i+0x19e>
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	e7ac      	b.n	8007e10 <_printf_i+0xf4>
 8007eb6:	4827      	ldr	r0, [pc, #156]	@ (8007f54 <_printf_i+0x238>)
 8007eb8:	e7e9      	b.n	8007e8e <_printf_i+0x172>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f023 0320 	bic.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	e7f6      	b.n	8007eb2 <_printf_i+0x196>
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	e7bd      	b.n	8007e44 <_printf_i+0x128>
 8007ec8:	6833      	ldr	r3, [r6, #0]
 8007eca:	6825      	ldr	r5, [r4, #0]
 8007ecc:	6961      	ldr	r1, [r4, #20]
 8007ece:	1d18      	adds	r0, r3, #4
 8007ed0:	6030      	str	r0, [r6, #0]
 8007ed2:	062e      	lsls	r6, r5, #24
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	d501      	bpl.n	8007edc <_printf_i+0x1c0>
 8007ed8:	6019      	str	r1, [r3, #0]
 8007eda:	e002      	b.n	8007ee2 <_printf_i+0x1c6>
 8007edc:	0668      	lsls	r0, r5, #25
 8007ede:	d5fb      	bpl.n	8007ed8 <_printf_i+0x1bc>
 8007ee0:	8019      	strh	r1, [r3, #0]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	4616      	mov	r6, r2
 8007ee8:	e7bc      	b.n	8007e64 <_printf_i+0x148>
 8007eea:	6833      	ldr	r3, [r6, #0]
 8007eec:	1d1a      	adds	r2, r3, #4
 8007eee:	6032      	str	r2, [r6, #0]
 8007ef0:	681e      	ldr	r6, [r3, #0]
 8007ef2:	6862      	ldr	r2, [r4, #4]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7f8 f972 	bl	80001e0 <memchr>
 8007efc:	b108      	cbz	r0, 8007f02 <_printf_i+0x1e6>
 8007efe:	1b80      	subs	r0, r0, r6
 8007f00:	6060      	str	r0, [r4, #4]
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	2300      	movs	r3, #0
 8007f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f0c:	e7aa      	b.n	8007e64 <_printf_i+0x148>
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	4632      	mov	r2, r6
 8007f12:	4649      	mov	r1, r9
 8007f14:	4640      	mov	r0, r8
 8007f16:	47d0      	blx	sl
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d0ad      	beq.n	8007e78 <_printf_i+0x15c>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	079b      	lsls	r3, r3, #30
 8007f20:	d413      	bmi.n	8007f4a <_printf_i+0x22e>
 8007f22:	68e0      	ldr	r0, [r4, #12]
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	4298      	cmp	r0, r3
 8007f28:	bfb8      	it	lt
 8007f2a:	4618      	movlt	r0, r3
 8007f2c:	e7a6      	b.n	8007e7c <_printf_i+0x160>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	4632      	mov	r2, r6
 8007f32:	4649      	mov	r1, r9
 8007f34:	4640      	mov	r0, r8
 8007f36:	47d0      	blx	sl
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d09d      	beq.n	8007e78 <_printf_i+0x15c>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	68e3      	ldr	r3, [r4, #12]
 8007f40:	9903      	ldr	r1, [sp, #12]
 8007f42:	1a5b      	subs	r3, r3, r1
 8007f44:	42ab      	cmp	r3, r5
 8007f46:	dcf2      	bgt.n	8007f2e <_printf_i+0x212>
 8007f48:	e7eb      	b.n	8007f22 <_printf_i+0x206>
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	f104 0619 	add.w	r6, r4, #25
 8007f50:	e7f5      	b.n	8007f3e <_printf_i+0x222>
 8007f52:	bf00      	nop
 8007f54:	08008139 	.word	0x08008139
 8007f58:	0800814a 	.word	0x0800814a

08007f5c <memmove>:
 8007f5c:	4288      	cmp	r0, r1
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	eb01 0402 	add.w	r4, r1, r2
 8007f64:	d902      	bls.n	8007f6c <memmove+0x10>
 8007f66:	4284      	cmp	r4, r0
 8007f68:	4623      	mov	r3, r4
 8007f6a:	d807      	bhi.n	8007f7c <memmove+0x20>
 8007f6c:	1e43      	subs	r3, r0, #1
 8007f6e:	42a1      	cmp	r1, r4
 8007f70:	d008      	beq.n	8007f84 <memmove+0x28>
 8007f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f7a:	e7f8      	b.n	8007f6e <memmove+0x12>
 8007f7c:	4402      	add	r2, r0
 8007f7e:	4601      	mov	r1, r0
 8007f80:	428a      	cmp	r2, r1
 8007f82:	d100      	bne.n	8007f86 <memmove+0x2a>
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f8e:	e7f7      	b.n	8007f80 <memmove+0x24>

08007f90 <_sbrk_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d06      	ldr	r5, [pc, #24]	@ (8007fac <_sbrk_r+0x1c>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f8 fea0 	bl	8000ce0 <_sbrk>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_sbrk_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_sbrk_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200015d8 	.word	0x200015d8

08007fb0 <memcpy>:
 8007fb0:	440a      	add	r2, r1
 8007fb2:	4291      	cmp	r1, r2
 8007fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fb8:	d100      	bne.n	8007fbc <memcpy+0xc>
 8007fba:	4770      	bx	lr
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fc6:	4291      	cmp	r1, r2
 8007fc8:	d1f9      	bne.n	8007fbe <memcpy+0xe>
 8007fca:	bd10      	pop	{r4, pc}

08007fcc <_realloc_r>:
 8007fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	4615      	mov	r5, r2
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	b921      	cbnz	r1, 8007fe2 <_realloc_r+0x16>
 8007fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fdc:	4611      	mov	r1, r2
 8007fde:	f7ff bc4b 	b.w	8007878 <_malloc_r>
 8007fe2:	b92a      	cbnz	r2, 8007ff0 <_realloc_r+0x24>
 8007fe4:	f7ff fbdc 	bl	80077a0 <_free_r>
 8007fe8:	2400      	movs	r4, #0
 8007fea:	4620      	mov	r0, r4
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff0:	f000 f81a 	bl	8008028 <_malloc_usable_size_r>
 8007ff4:	4285      	cmp	r5, r0
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	d802      	bhi.n	8008000 <_realloc_r+0x34>
 8007ffa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ffe:	d8f4      	bhi.n	8007fea <_realloc_r+0x1e>
 8008000:	4629      	mov	r1, r5
 8008002:	4640      	mov	r0, r8
 8008004:	f7ff fc38 	bl	8007878 <_malloc_r>
 8008008:	4607      	mov	r7, r0
 800800a:	2800      	cmp	r0, #0
 800800c:	d0ec      	beq.n	8007fe8 <_realloc_r+0x1c>
 800800e:	42b5      	cmp	r5, r6
 8008010:	462a      	mov	r2, r5
 8008012:	4621      	mov	r1, r4
 8008014:	bf28      	it	cs
 8008016:	4632      	movcs	r2, r6
 8008018:	f7ff ffca 	bl	8007fb0 <memcpy>
 800801c:	4621      	mov	r1, r4
 800801e:	4640      	mov	r0, r8
 8008020:	f7ff fbbe 	bl	80077a0 <_free_r>
 8008024:	463c      	mov	r4, r7
 8008026:	e7e0      	b.n	8007fea <_realloc_r+0x1e>

08008028 <_malloc_usable_size_r>:
 8008028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800802c:	1f18      	subs	r0, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfbc      	itt	lt
 8008032:	580b      	ldrlt	r3, [r1, r0]
 8008034:	18c0      	addlt	r0, r0, r3
 8008036:	4770      	bx	lr

08008038 <_init>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	bf00      	nop
 800803c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803e:	bc08      	pop	{r3}
 8008040:	469e      	mov	lr, r3
 8008042:	4770      	bx	lr

08008044 <_fini>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr
