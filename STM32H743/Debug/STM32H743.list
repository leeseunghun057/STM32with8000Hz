
STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd6c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800c00c  0800c00c  0000d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c1c8  0800c1c8  0000d1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c1d0  0800c1d0  0000d1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c1d4  0800c1d4  0000d1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000003fc  24000000  0800c1d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001820  240003fc  0800c5d4  0000e3fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001c1c  0800c5d4  0000ec1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e3fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019d31  00000000  00000000  0000e42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000371a  00000000  00000000  0002815b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  0002b878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d77  00000000  00000000  0002ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d62  00000000  00000000  0002d79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000192fb  00000000  00000000  00067501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e17b  00000000  00000000  000807fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001de977  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e48  00000000  00000000  001de9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000053  00000000  00000000  001e3804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003fc 	.word	0x240003fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bff4 	.word	0x0800bff4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000400 	.word	0x24000400
 80002dc:	0800bff4 	.word	0x0800bff4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MatrixScan>:




// GPIO 상태를 스캔하고 변경된 핀 정보를 반환하는 함수
MatrixScanResult MatrixScan() {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0b8      	sub	sp, #224	@ 0xe0
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    static uint32_t Last_gpioG_state = 0;
    static uint32_t Last_gpioH_state = 0;
    static uint32_t Last_gpioI_state = 0;

    // 현재 GPIO 상태 읽기
    uint32_t gpioA_state = (~(GPIOA->IDR)) & 0b1001111111010000; //핀 마스킹
 8000688:	4bb2      	ldr	r3, [pc, #712]	@ (8000954 <MatrixScan+0x2d4>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	43da      	mvns	r2, r3
 800068e:	f649 73d0 	movw	r3, #40912	@ 0x9fd0
 8000692:	4013      	ands	r3, r2
 8000694:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t gpioB_state = (~(GPIOB->IDR)) & 0b1100001111011100;
 8000698:	4baf      	ldr	r3, [pc, #700]	@ (8000958 <MatrixScan+0x2d8>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	43da      	mvns	r2, r3
 800069e:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 80006a2:	4013      	ands	r3, r2
 80006a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint32_t gpioC_state = (~(GPIOC->IDR)) & 0b1111111111110010;
 80006a8:	4bac      	ldr	r3, [pc, #688]	@ (800095c <MatrixScan+0x2dc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	43da      	mvns	r2, r3
 80006ae:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80006b2:	4013      	ands	r3, r2
 80006b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint32_t gpioD_state = (~(GPIOD->IDR)) & 0b1111111111111111;
 80006b8:	4ba9      	ldr	r3, [pc, #676]	@ (8000960 <MatrixScan+0x2e0>)
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	43db      	mvns	r3, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t gpioE_state = (~(GPIOE->IDR)) & 0b1111111111110111;
 80006c4:	4ba7      	ldr	r3, [pc, #668]	@ (8000964 <MatrixScan+0x2e4>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	43da      	mvns	r2, r3
 80006ca:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80006ce:	4013      	ands	r3, r2
 80006d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t gpioF_state = (~(GPIOF->IDR)) & 0b1111111111111111;
 80006d4:	4ba4      	ldr	r3, [pc, #656]	@ (8000968 <MatrixScan+0x2e8>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	43db      	mvns	r3, r3
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t gpioG_state = (~(GPIOG->IDR)) & 0b1111111111111111;
 80006e0:	4ba2      	ldr	r3, [pc, #648]	@ (800096c <MatrixScan+0x2ec>)
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t gpioH_state = (~(GPIOH->IDR)) & 0b0011111111111100;
 80006ea:	4ba1      	ldr	r3, [pc, #644]	@ (8000970 <MatrixScan+0x2f0>)
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	43da      	mvns	r2, r3
 80006f0:	f643 73fc 	movw	r3, #16380	@ 0x3ffc
 80006f4:	4013      	ands	r3, r2
 80006f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t gpioI_state = (-(GPIOI->IDR)) & 0b1111111111111111;
 80006f8:	4b9e      	ldr	r3, [pc, #632]	@ (8000974 <MatrixScan+0x2f4>)
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	425b      	negs	r3, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	677b      	str	r3, [r7, #116]	@ 0x74


    // 변경된 비트 계산 (XOR 연산)
    uint32_t changedPinA = gpioA_state ^ Last_gpioA_state;
 8000702:	4b9d      	ldr	r3, [pc, #628]	@ (8000978 <MatrixScan+0x2f8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800070a:	4053      	eors	r3, r2
 800070c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    uint32_t changedPinB = gpioB_state ^ Last_gpioB_state;
 8000710:	4b9a      	ldr	r3, [pc, #616]	@ (800097c <MatrixScan+0x2fc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000718:	4053      	eors	r3, r2
 800071a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    uint32_t changedPinC = gpioC_state ^ Last_gpioC_state;
 800071e:	4b98      	ldr	r3, [pc, #608]	@ (8000980 <MatrixScan+0x300>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000726:	4053      	eors	r3, r2
 8000728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    uint32_t changedPinD = gpioD_state ^ Last_gpioD_state;
 800072c:	4b95      	ldr	r3, [pc, #596]	@ (8000984 <MatrixScan+0x304>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000734:	4053      	eors	r3, r2
 8000736:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    uint32_t changedPinE = gpioE_state ^ Last_gpioE_state;
 800073a:	4b93      	ldr	r3, [pc, #588]	@ (8000988 <MatrixScan+0x308>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000742:	4053      	eors	r3, r2
 8000744:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    uint32_t changedPinF = gpioF_state ^ Last_gpioF_state;
 8000748:	4b90      	ldr	r3, [pc, #576]	@ (800098c <MatrixScan+0x30c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000750:	4053      	eors	r3, r2
 8000752:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    uint32_t changedPinG = gpioG_state ^ Last_gpioG_state;
 8000756:	4b8e      	ldr	r3, [pc, #568]	@ (8000990 <MatrixScan+0x310>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800075c:	4053      	eors	r3, r2
 800075e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    uint32_t changedPinH = gpioH_state ^ Last_gpioH_state;
 8000762:	4b8c      	ldr	r3, [pc, #560]	@ (8000994 <MatrixScan+0x314>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000768:	4053      	eors	r3, r2
 800076a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    uint32_t changedPinI = gpioI_state ^ Last_gpioI_state;
 800076e:	4b8a      	ldr	r3, [pc, #552]	@ (8000998 <MatrixScan+0x318>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000774:	4053      	eors	r3, r2
 8000776:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

    MatrixScanResult result;
    result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    result.pinState = -1;
 8000780:	23ff      	movs	r3, #255	@ 0xff
 8000782:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70


    // 포트 A~E 순서대로 변경된 핀 확인
    if (changedPinA != 0)
 8000786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800078a:	2b00      	cmp	r3, #0
 800078c:	d044      	beq.n	8000818 <MatrixScan+0x198>
    {
        int bitPosition = -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        while ( changedPinA )
 8000796:	e009      	b.n	80007ac <MatrixScan+0x12c>
        {
            changedPinA >>= 1; // 오른쪽으로 시프트
 8000798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            bitPosition++;
 80007a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80007a6:	3301      	adds	r3, #1
 80007a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        while ( changedPinA )
 80007ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f1      	bne.n	8000798 <MatrixScan+0x118>
        }

        result.pinNumber = bitPosition; // 핀 번호 (포트 A는 0 ~ 15)
 80007b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80007b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioA_state >> bitPosition) & 1; // 현재 상태
 80007ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80007be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80007c2:	fa22 f303 	lsr.w	r3, r2, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 80007d2:	4b72      	ldr	r3, [pc, #456]	@ (800099c <MatrixScan+0x31c>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007d8:	4971      	ldr	r1, [pc, #452]	@ (80009a0 <MatrixScan+0x320>)
 80007da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	2b05      	cmp	r3, #5
 80007e2:	d90a      	bls.n	80007fa <MatrixScan+0x17a>
        {
        	Last_gpioA_state = gpioA_state;
 80007e4:	4a64      	ldr	r2, [pc, #400]	@ (8000978 <MatrixScan+0x2f8>)
 80007e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80007ea:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 80007ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007ee:	4a6b      	ldr	r2, [pc, #428]	@ (800099c <MatrixScan+0x31c>)
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	496b      	ldr	r1, [pc, #428]	@ (80009a0 <MatrixScan+0x320>)
 80007f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007f8:	e005      	b.n	8000806 <MatrixScan+0x186>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000800:	23ff      	movs	r3, #255	@ 0xff
 8000802:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	461a      	mov	r2, r3
 800080a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800080e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000812:	e882 0003 	stmia.w	r2, {r0, r1}
 8000816:	e2a0      	b.n	8000d5a <MatrixScan+0x6da>
    }
    else if ( changedPinB != 0 )
 8000818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d045      	beq.n	80008ac <MatrixScan+0x22c>
    {
        int bitPosition = -1;
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinB )
 8000828:	e009      	b.n	800083e <MatrixScan+0x1be>
        {
            changedPinB >>= 1;
 800082a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800082e:	085b      	lsrs	r3, r3, #1
 8000830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            bitPosition++;
 8000834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000838:	3301      	adds	r3, #1
 800083a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        while ( changedPinB )
 800083e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f1      	bne.n	800082a <MatrixScan+0x1aa>
        }

        result.pinNumber = bitPosition + 16; // 핀 번호 (포트 B는 16 ~ 31)
 8000846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800084a:	3310      	adds	r3, #16
 800084c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioB_state >> bitPosition) & 1;
 800084e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000856:	fa22 f303 	lsr.w	r3, r2, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000866:	4b4d      	ldr	r3, [pc, #308]	@ (800099c <MatrixScan+0x31c>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800086c:	494c      	ldr	r1, [pc, #304]	@ (80009a0 <MatrixScan+0x320>)
 800086e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	2b05      	cmp	r3, #5
 8000876:	d90a      	bls.n	800088e <MatrixScan+0x20e>
        {
        	Last_gpioB_state = gpioB_state;
 8000878:	4a40      	ldr	r2, [pc, #256]	@ (800097c <MatrixScan+0x2fc>)
 800087a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800087e:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000882:	4a46      	ldr	r2, [pc, #280]	@ (800099c <MatrixScan+0x31c>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	4946      	ldr	r1, [pc, #280]	@ (80009a0 <MatrixScan+0x320>)
 8000888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800088c:	e005      	b.n	800089a <MatrixScan+0x21a>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000894:	23ff      	movs	r3, #255	@ 0xff
 8000896:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	461a      	mov	r2, r3
 800089e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a6:	e882 0003 	stmia.w	r2, {r0, r1}
 80008aa:	e256      	b.n	8000d5a <MatrixScan+0x6da>
    }
    else if ( changedPinC != 0 )
 80008ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d045      	beq.n	8000940 <MatrixScan+0x2c0>
    {
        int bitPosition = -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinC )
 80008bc:	e009      	b.n	80008d2 <MatrixScan+0x252>
        {
            changedPinC >>= 1;
 80008be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008c2:	085b      	lsrs	r3, r3, #1
 80008c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            bitPosition++;
 80008c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80008cc:	3301      	adds	r3, #1
 80008ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        while ( changedPinC )
 80008d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f1      	bne.n	80008be <MatrixScan+0x23e>
        }

        result.pinNumber = bitPosition + 32; // 핀 번호 (포트 C는 32 ~ 47)
 80008da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80008de:	3320      	adds	r3, #32
 80008e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioC_state >> bitPosition) & 1;
 80008e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80008e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80008ea:	fa22 f303 	lsr.w	r3, r2, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MatrixScan+0x31c>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000900:	4927      	ldr	r1, [pc, #156]	@ (80009a0 <MatrixScan+0x320>)
 8000902:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	2b05      	cmp	r3, #5
 800090a:	d90a      	bls.n	8000922 <MatrixScan+0x2a2>
        {
        	Last_gpioC_state = gpioC_state;
 800090c:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <MatrixScan+0x300>)
 800090e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000912:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000916:	4a21      	ldr	r2, [pc, #132]	@ (800099c <MatrixScan+0x31c>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	4921      	ldr	r1, [pc, #132]	@ (80009a0 <MatrixScan+0x320>)
 800091c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000920:	e005      	b.n	800092e <MatrixScan+0x2ae>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000928:	23ff      	movs	r3, #255	@ 0xff
 800092a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	461a      	mov	r2, r3
 8000932:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000936:	e893 0003 	ldmia.w	r3, {r0, r1}
 800093a:	e882 0003 	stmia.w	r2, {r0, r1}
 800093e:	e20c      	b.n	8000d5a <MatrixScan+0x6da>
    }
    else if ( changedPinD != 0 )
 8000940:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 8084 	beq.w	8000a52 <MatrixScan+0x3d2>
    {
        int bitPosition = -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinD )
 8000952:	e031      	b.n	80009b8 <MatrixScan+0x338>
 8000954:	58020000 	.word	0x58020000
 8000958:	58020400 	.word	0x58020400
 800095c:	58020800 	.word	0x58020800
 8000960:	58020c00 	.word	0x58020c00
 8000964:	58021000 	.word	0x58021000
 8000968:	58021400 	.word	0x58021400
 800096c:	58021800 	.word	0x58021800
 8000970:	58021c00 	.word	0x58021c00
 8000974:	58022000 	.word	0x58022000
 8000978:	24000910 	.word	0x24000910
 800097c:	24000914 	.word	0x24000914
 8000980:	24000918 	.word	0x24000918
 8000984:	2400091c 	.word	0x2400091c
 8000988:	24000920 	.word	0x24000920
 800098c:	24000924 	.word	0x24000924
 8000990:	24000928 	.word	0x24000928
 8000994:	2400092c 	.word	0x2400092c
 8000998:	24000930 	.word	0x24000930
 800099c:	2400090c 	.word	0x2400090c
 80009a0:	2400070c 	.word	0x2400070c
        {
            changedPinD >>= 1;
 80009a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            bitPosition++;
 80009ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80009b2:	3301      	adds	r3, #1
 80009b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while ( changedPinD )
 80009b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f1      	bne.n	80009a4 <MatrixScan+0x324>
        }

        result.pinNumber = bitPosition + 48; // 핀 번호 (포트 D는 48 ~ 63)
 80009c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80009c4:	3330      	adds	r3, #48	@ 0x30
 80009c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioD_state >> bitPosition) & 1;
 80009c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80009cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        char message[100];
        sprintf(message, "D | pinNumber = %d | pinState = %d \n\r", result.pinNumber, result.pinState);
 80009e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009e2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80009e6:	f107 0008 	add.w	r0, r7, #8
 80009ea:	49af      	ldr	r1, [pc, #700]	@ (8000ca8 <MatrixScan+0x628>)
 80009ec:	f00a fe62 	bl	800b6b4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc73 	bl	80002e0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0108 	add.w	r1, r7, #8
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	48a9      	ldr	r0, [pc, #676]	@ (8000cac <MatrixScan+0x62c>)
 8000a08:	f005 fe9a 	bl	8006740 <HAL_UART_Transmit>

        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000a0c:	4ba8      	ldr	r3, [pc, #672]	@ (8000cb0 <MatrixScan+0x630>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a12:	49a8      	ldr	r1, [pc, #672]	@ (8000cb4 <MatrixScan+0x634>)
 8000a14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	d90a      	bls.n	8000a34 <MatrixScan+0x3b4>
        {
        	Last_gpioD_state = gpioD_state;
 8000a1e:	4aa6      	ldr	r2, [pc, #664]	@ (8000cb8 <MatrixScan+0x638>)
 8000a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a24:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a28:	4aa1      	ldr	r2, [pc, #644]	@ (8000cb0 <MatrixScan+0x630>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	49a1      	ldr	r1, [pc, #644]	@ (8000cb4 <MatrixScan+0x634>)
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a32:	e005      	b.n	8000a40 <MatrixScan+0x3c0>
        }
        else
        {
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000a3a:	23ff      	movs	r3, #255	@ 0xff
 8000a3c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        }
        return result;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a4c:	e882 0003 	stmia.w	r2, {r0, r1}





}
 8000a50:	e183      	b.n	8000d5a <MatrixScan+0x6da>
    else if ( changedPinE != 0 )
 8000a52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d045      	beq.n	8000ae6 <MatrixScan+0x466>
        int bitPosition = -1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinE )
 8000a62:	e009      	b.n	8000a78 <MatrixScan+0x3f8>
            changedPinE >>= 1;
 8000a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            bitPosition++;
 8000a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a72:	3301      	adds	r3, #1
 8000a74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        while ( changedPinE )
 8000a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f1      	bne.n	8000a64 <MatrixScan+0x3e4>
        result.pinNumber = bitPosition + 64; // 핀 번호 (포트 E는 64 ~ 79)
 8000a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a84:	3340      	adds	r3, #64	@ 0x40
 8000a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioE_state >> bitPosition) & 1;
 8000a88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000a90:	fa22 f303 	lsr.w	r3, r2, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000aa0:	4b83      	ldr	r3, [pc, #524]	@ (8000cb0 <MatrixScan+0x630>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aa6:	4983      	ldr	r1, [pc, #524]	@ (8000cb4 <MatrixScan+0x634>)
 8000aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b05      	cmp	r3, #5
 8000ab0:	d90a      	bls.n	8000ac8 <MatrixScan+0x448>
        	Last_gpioE_state = gpioE_state;
 8000ab2:	4a82      	ldr	r2, [pc, #520]	@ (8000cbc <MatrixScan+0x63c>)
 8000ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ab8:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000abc:	4a7c      	ldr	r2, [pc, #496]	@ (8000cb0 <MatrixScan+0x630>)
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	497c      	ldr	r1, [pc, #496]	@ (8000cb4 <MatrixScan+0x634>)
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ac6:	e005      	b.n	8000ad4 <MatrixScan+0x454>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000ace:	23ff      	movs	r3, #255	@ 0xff
 8000ad0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000adc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ae0:	e882 0003 	stmia.w	r2, {r0, r1}
 8000ae4:	e139      	b.n	8000d5a <MatrixScan+0x6da>
    else if ( changedPinF != 0 )
 8000ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d045      	beq.n	8000b7a <MatrixScan+0x4fa>
        int bitPosition = -1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinF )
 8000af6:	e009      	b.n	8000b0c <MatrixScan+0x48c>
            changedPinF >>= 1;
 8000af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            bitPosition++;
 8000b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b06:	3301      	adds	r3, #1
 8000b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        while ( changedPinF )
 8000b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f1      	bne.n	8000af8 <MatrixScan+0x478>
        result.pinNumber = bitPosition + 80; // 핀 번호 (포트 E는 64 ~ 79)
 8000b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b18:	3350      	adds	r3, #80	@ 0x50
 8000b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioF_state >> bitPosition) & 1;
 8000b1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000b24:	fa22 f303 	lsr.w	r3, r2, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000b34:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb0 <MatrixScan+0x630>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b3a:	495e      	ldr	r1, [pc, #376]	@ (8000cb4 <MatrixScan+0x634>)
 8000b3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d90a      	bls.n	8000b5c <MatrixScan+0x4dc>
        	Last_gpioF_state = gpioF_state;
 8000b46:	4a5e      	ldr	r2, [pc, #376]	@ (8000cc0 <MatrixScan+0x640>)
 8000b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b4c:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b50:	4a57      	ldr	r2, [pc, #348]	@ (8000cb0 <MatrixScan+0x630>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	4957      	ldr	r1, [pc, #348]	@ (8000cb4 <MatrixScan+0x634>)
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b5a:	e005      	b.n	8000b68 <MatrixScan+0x4e8>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000b62:	23ff      	movs	r3, #255	@ 0xff
 8000b64:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b74:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b78:	e0ef      	b.n	8000d5a <MatrixScan+0x6da>
    else if ( changedPinG != 0 )
 8000b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d042      	beq.n	8000c08 <MatrixScan+0x588>
        int bitPosition = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinG )
 8000b88:	e009      	b.n	8000b9e <MatrixScan+0x51e>
        	changedPinG >>= 1;
 8000b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b8e:	085b      	lsrs	r3, r3, #1
 8000b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            bitPosition++;
 8000b94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000b98:	3301      	adds	r3, #1
 8000b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while ( changedPinG )
 8000b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f1      	bne.n	8000b8a <MatrixScan+0x50a>
        result.pinNumber = bitPosition + 96; // 핀 번호 (포트 E는 64 ~ 79)
 8000ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000baa:	3360      	adds	r3, #96	@ 0x60
 8000bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioG_state >> bitPosition) & 1;
 8000bae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb0 <MatrixScan+0x630>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bca:	493a      	ldr	r1, [pc, #232]	@ (8000cb4 <MatrixScan+0x634>)
 8000bcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	d909      	bls.n	8000bea <MatrixScan+0x56a>
        	Last_gpioG_state = gpioG_state;
 8000bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8000cc4 <MatrixScan+0x644>)
 8000bd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bda:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bde:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <MatrixScan+0x630>)
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	4934      	ldr	r1, [pc, #208]	@ (8000cb4 <MatrixScan+0x634>)
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000be8:	e005      	b.n	8000bf6 <MatrixScan+0x576>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000bf0:	23ff      	movs	r3, #255	@ 0xff
 8000bf2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c02:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c06:	e0a8      	b.n	8000d5a <MatrixScan+0x6da>
    else if ( changedPinH != 0 )
 8000c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d042      	beq.n	8000c96 <MatrixScan+0x616>
        int bitPosition = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinH )
 8000c16:	e009      	b.n	8000c2c <MatrixScan+0x5ac>
        	changedPinH >>= 1;
 8000c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            bitPosition++;
 8000c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c26:	3301      	adds	r3, #1
 8000c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        while ( changedPinH )
 8000c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f1      	bne.n	8000c18 <MatrixScan+0x598>
        result.pinNumber = bitPosition + 112; // 핀 번호 (포트 E는 64 ~ 79)
 8000c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c38:	3370      	adds	r3, #112	@ 0x70
 8000c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result.pinState = (gpioH_state >> bitPosition) & 1;
 8000c3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c42:	fa22 f303 	lsr.w	r3, r2, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MatrixScan+0x630>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c58:	4916      	ldr	r1, [pc, #88]	@ (8000cb4 <MatrixScan+0x634>)
 8000c5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d909      	bls.n	8000c78 <MatrixScan+0x5f8>
        	Last_gpioH_state = gpioH_state;
 8000c64:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <MatrixScan+0x648>)
 8000c66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c68:	6013      	str	r3, [r2, #0]
        	DebounceTimer[result.pinNumber] = CurrentTime;
 8000c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c6c:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <MatrixScan+0x630>)
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	4910      	ldr	r1, [pc, #64]	@ (8000cb4 <MatrixScan+0x634>)
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c76:	e005      	b.n	8000c84 <MatrixScan+0x604>
            result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            result.pinState = -1;
 8000c7e:	23ff      	movs	r3, #255	@ 0xff
 8000c80:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return result;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c90:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c94:	e061      	b.n	8000d5a <MatrixScan+0x6da>
	else if ( changedPinI != 0 )
 8000c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d055      	beq.n	8000d4a <MatrixScan+0x6ca>
		int bitPosition = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		while ( changedPinI )
 8000ca4:	e01c      	b.n	8000ce0 <MatrixScan+0x660>
 8000ca6:	bf00      	nop
 8000ca8:	0800c00c 	.word	0x0800c00c
 8000cac:	24000420 	.word	0x24000420
 8000cb0:	2400090c 	.word	0x2400090c
 8000cb4:	2400070c 	.word	0x2400070c
 8000cb8:	2400091c 	.word	0x2400091c
 8000cbc:	24000920 	.word	0x24000920
 8000cc0:	24000924 	.word	0x24000924
 8000cc4:	24000928 	.word	0x24000928
 8000cc8:	2400092c 	.word	0x2400092c
			changedPinI >>= 1;
 8000ccc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cd0:	085b      	lsrs	r3, r3, #1
 8000cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			bitPosition++;
 8000cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		while ( changedPinI )
 8000ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f1      	bne.n	8000ccc <MatrixScan+0x64c>
		result.pinNumber = bitPosition + 128; // 핀 번호 (포트 E는 64 ~ 79)
 8000ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cec:	3380      	adds	r3, #128	@ 0x80
 8000cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
		result.pinState = (gpioI_state >> bitPosition) & 1;
 8000cf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
		if ( CurrentTime - DebounceTimer[result.pinNumber] > DEBOUNCE_TIME )
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MatrixScan+0x6e4>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d0c:	4916      	ldr	r1, [pc, #88]	@ (8000d68 <MatrixScan+0x6e8>)
 8000d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d909      	bls.n	8000d2c <MatrixScan+0x6ac>
			Last_gpioI_state = gpioI_state;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <MatrixScan+0x6ec>)
 8000d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d1c:	6013      	str	r3, [r2, #0]
			DebounceTimer[result.pinNumber] = CurrentTime;
 8000d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d20:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <MatrixScan+0x6e4>)
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	4910      	ldr	r1, [pc, #64]	@ (8000d68 <MatrixScan+0x6e8>)
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d2a:	e005      	b.n	8000d38 <MatrixScan+0x6b8>
			result.pinNumber = -1; // 초기값 (-1: 변경 없음)
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
			result.pinState = -1;
 8000d32:	23ff      	movs	r3, #255	@ 0xff
 8000d34:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
		return result;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d44:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000d48:	e007      	b.n	8000d5a <MatrixScan+0x6da>
    return result;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	37e0      	adds	r7, #224	@ 0xe0
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2400090c 	.word	0x2400090c
 8000d68:	2400070c 	.word	0x2400070c
 8000d6c:	24000930 	.word	0x24000930

08000d70 <SetKeycode>:




void SetKeycode(int keycode)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == 0x00)
 8000d78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea4 <SetKeycode+0x134>)
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <SetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = keycode;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b47      	ldr	r3, [pc, #284]	@ (8000ea4 <SetKeycode+0x134>)
 8000d86:	709a      	strb	r2, [r3, #2]
    }
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
    {
        keyboardReport.Keycode6 = keycode;
    }
}
 8000d88:	e086      	b.n	8000e98 <SetKeycode+0x128>
    else if (keyboardReport.Keycode2 == 0x00 && keycode != keyboardReport.Keycode1)
 8000d8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ea4 <SetKeycode+0x134>)
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10a      	bne.n	8000da8 <SetKeycode+0x38>
 8000d92:	4b44      	ldr	r3, [pc, #272]	@ (8000ea4 <SetKeycode+0x134>)
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d004      	beq.n	8000da8 <SetKeycode+0x38>
        keyboardReport.Keycode2 = keycode;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b40      	ldr	r3, [pc, #256]	@ (8000ea4 <SetKeycode+0x134>)
 8000da4:	70da      	strb	r2, [r3, #3]
 8000da6:	e077      	b.n	8000e98 <SetKeycode+0x128>
    else if (keyboardReport.Keycode3 == 0x00 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000da8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <SetKeycode+0x134>)
 8000daa:	791b      	ldrb	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d110      	bne.n	8000dd2 <SetKeycode+0x62>
 8000db0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ea4 <SetKeycode+0x134>)
 8000db2:	78db      	ldrb	r3, [r3, #3]
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00a      	beq.n	8000dd2 <SetKeycode+0x62>
 8000dbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ea4 <SetKeycode+0x134>)
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d004      	beq.n	8000dd2 <SetKeycode+0x62>
        keyboardReport.Keycode3 = keycode;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ea4 <SetKeycode+0x134>)
 8000dce:	711a      	strb	r2, [r3, #4]
 8000dd0:	e062      	b.n	8000e98 <SetKeycode+0x128>
    else if (keyboardReport.Keycode4 == 0x00 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000dd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ea4 <SetKeycode+0x134>)
 8000dd4:	795b      	ldrb	r3, [r3, #5]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d116      	bne.n	8000e08 <SetKeycode+0x98>
 8000dda:	4b32      	ldr	r3, [pc, #200]	@ (8000ea4 <SetKeycode+0x134>)
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	461a      	mov	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d010      	beq.n	8000e08 <SetKeycode+0x98>
 8000de6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <SetKeycode+0x134>)
 8000de8:	78db      	ldrb	r3, [r3, #3]
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00a      	beq.n	8000e08 <SetKeycode+0x98>
 8000df2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <SetKeycode+0x134>)
 8000df4:	789b      	ldrb	r3, [r3, #2]
 8000df6:	461a      	mov	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d004      	beq.n	8000e08 <SetKeycode+0x98>
        keyboardReport.Keycode4 = keycode;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <SetKeycode+0x134>)
 8000e04:	715a      	strb	r2, [r3, #5]
 8000e06:	e047      	b.n	8000e98 <SetKeycode+0x128>
    else if (keyboardReport.Keycode5 == 0x00 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000e08:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <SetKeycode+0x134>)
 8000e0a:	799b      	ldrb	r3, [r3, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d11c      	bne.n	8000e4a <SetKeycode+0xda>
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <SetKeycode+0x134>)
 8000e12:	795b      	ldrb	r3, [r3, #5]
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d016      	beq.n	8000e4a <SetKeycode+0xda>
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <SetKeycode+0x134>)
 8000e1e:	791b      	ldrb	r3, [r3, #4]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d010      	beq.n	8000e4a <SetKeycode+0xda>
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <SetKeycode+0x134>)
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00a      	beq.n	8000e4a <SetKeycode+0xda>
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <SetKeycode+0x134>)
 8000e36:	789b      	ldrb	r3, [r3, #2]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d004      	beq.n	8000e4a <SetKeycode+0xda>
        keyboardReport.Keycode5 = keycode;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <SetKeycode+0x134>)
 8000e46:	719a      	strb	r2, [r3, #6]
 8000e48:	e026      	b.n	8000e98 <SetKeycode+0x128>
    else if (keyboardReport.Keycode6 == 0x00 && keycode != keyboardReport.Keycode5 && keycode != keyboardReport.Keycode4 && keycode != keyboardReport.Keycode3 && keycode != keyboardReport.Keycode2 && keycode != keyboardReport.Keycode1)
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <SetKeycode+0x134>)
 8000e4c:	79db      	ldrb	r3, [r3, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d122      	bne.n	8000e98 <SetKeycode+0x128>
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <SetKeycode+0x134>)
 8000e54:	799b      	ldrb	r3, [r3, #6]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01c      	beq.n	8000e98 <SetKeycode+0x128>
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <SetKeycode+0x134>)
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d016      	beq.n	8000e98 <SetKeycode+0x128>
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <SetKeycode+0x134>)
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d010      	beq.n	8000e98 <SetKeycode+0x128>
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <SetKeycode+0x134>)
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00a      	beq.n	8000e98 <SetKeycode+0x128>
 8000e82:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <SetKeycode+0x134>)
 8000e84:	789b      	ldrb	r3, [r3, #2]
 8000e86:	461a      	mov	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d004      	beq.n	8000e98 <SetKeycode+0x128>
        keyboardReport.Keycode6 = keycode;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SetKeycode+0x134>)
 8000e94:	71da      	strb	r2, [r3, #7]
}
 8000e96:	e7ff      	b.n	8000e98 <SetKeycode+0x128>
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	24000418 	.word	0x24000418

08000ea8 <ResetKeycode>:

void ResetKeycode(int keycode)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    if (keyboardReport.Keycode1 == keycode)
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <ResetKeycode+0x80>)
 8000eb2:	789b      	ldrb	r3, [r3, #2]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <ResetKeycode+0x1a>
    {
        keyboardReport.Keycode1 = 0x00;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <ResetKeycode+0x80>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	709a      	strb	r2, [r3, #2]
    }
    if (keyboardReport.Keycode2 == keycode)
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <ResetKeycode+0x80>)
 8000ec4:	78db      	ldrb	r3, [r3, #3]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d102      	bne.n	8000ed4 <ResetKeycode+0x2c>
    {
        keyboardReport.Keycode2 = 0x00;
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <ResetKeycode+0x80>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	70da      	strb	r2, [r3, #3]
    }
    if (keyboardReport.Keycode3 == keycode)
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <ResetKeycode+0x80>)
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d102      	bne.n	8000ee6 <ResetKeycode+0x3e>
    {
        keyboardReport.Keycode3 = 0x00;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <ResetKeycode+0x80>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	711a      	strb	r2, [r3, #4]
    }
    if (keyboardReport.Keycode4 == keycode)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <ResetKeycode+0x80>)
 8000ee8:	795b      	ldrb	r3, [r3, #5]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d102      	bne.n	8000ef8 <ResetKeycode+0x50>
    {
        keyboardReport.Keycode4 = 0x00;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <ResetKeycode+0x80>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	715a      	strb	r2, [r3, #5]
    }
    if (keyboardReport.Keycode5 == keycode)
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <ResetKeycode+0x80>)
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d102      	bne.n	8000f0a <ResetKeycode+0x62>
    {
        keyboardReport.Keycode5 = 0x00;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <ResetKeycode+0x80>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	719a      	strb	r2, [r3, #6]
    }
    if (keyboardReport.Keycode6 == keycode)
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <ResetKeycode+0x80>)
 8000f0c:	79db      	ldrb	r3, [r3, #7]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d102      	bne.n	8000f1c <ResetKeycode+0x74>
    {
        keyboardReport.Keycode6 = 0x00;
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <ResetKeycode+0x80>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	71da      	strb	r2, [r3, #7]
    }
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	24000418 	.word	0x24000418

08000f2c <KeycodeSend>:

void KeycodeSend()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b09a      	sub	sp, #104	@ 0x68
 8000f30:	af00      	add	r7, sp, #0
    USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t *)&keyboardReport, sizeof(keyboardReport));
 8000f32:	2208      	movs	r2, #8
 8000f34:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <KeycodeSend+0x3c>)
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <KeycodeSend+0x40>)
 8000f38:	f008 fa2a 	bl	8009390 <USBD_HID_SendReport>

    char message[100];
    sprintf(message, "KeycodeSend \n\r");
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <KeycodeSend+0x44>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00a fbb7 	bl	800b6b4 <siprintf>
    HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f9c9 	bl	80002e0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	1d39      	adds	r1, r7, #4
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <KeycodeSend+0x48>)
 8000f5a:	f005 fbf1 	bl	8006740 <HAL_UART_Transmit>
}
 8000f5e:	bf00      	nop
 8000f60:	3768      	adds	r7, #104	@ 0x68
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	24000418 	.word	0x24000418
 8000f6c:	24000940 	.word	0x24000940
 8000f70:	0800c034 	.word	0x0800c034
 8000f74:	24000420 	.word	0x24000420

08000f78 <PressKeycodes>:

void PressKeycodes(int i)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09c      	sub	sp, #112	@ 0x70
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 8000f80:	4b8f      	ldr	r3, [pc, #572]	@ (80011c0 <PressKeycodes+0x248>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	498f      	ldr	r1, [pc, #572]	@ (80011c4 <PressKeycodes+0x24c>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f96:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d926      	bls.n	8000fec <PressKeycodes+0x74>
	{
		KeyTimer = HAL_GetTick();
 8000f9e:	f000 ff27 	bl	8001df0 <HAL_GetTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b88      	ldr	r3, [pc, #544]	@ (80011c8 <PressKeycodes+0x250>)
 8000fa8:	601a      	str	r2, [r3, #0]

		char message5[100];
		sprintf(message5, "HoldTapPress = %d \n\r", Keycode[LayerState][i]);
 8000faa:	4b85      	ldr	r3, [pc, #532]	@ (80011c0 <PressKeycodes+0x248>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4985      	ldr	r1, [pc, #532]	@ (80011c4 <PressKeycodes+0x24c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4981      	ldr	r1, [pc, #516]	@ (80011cc <PressKeycodes+0x254>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00a fb73 	bl	800b6b4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f984 	bl	80002e0 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	487a      	ldr	r0, [pc, #488]	@ (80011d0 <PressKeycodes+0x258>)
 8000fe6:	f005 fbab 	bl	8006740 <HAL_UART_Transmit>

		char message4[100];
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
	}
}
 8000fea:	e0e4      	b.n	80011b6 <PressKeycodes+0x23e>
	else if (Keycode[LayerState][i] >= 10000)
 8000fec:	4b74      	ldr	r3, [pc, #464]	@ (80011c0 <PressKeycodes+0x248>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4974      	ldr	r1, [pc, #464]	@ (80011c4 <PressKeycodes+0x24c>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001002:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001006:	4293      	cmp	r3, r2
 8001008:	d943      	bls.n	8001092 <PressKeycodes+0x11a>
		Modifier_Sum = Modifier_Sum | Modifier_Bit[Keycode[LayerState][i] - 10000];
 800100a:	4b6d      	ldr	r3, [pc, #436]	@ (80011c0 <PressKeycodes+0x248>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	496d      	ldr	r1, [pc, #436]	@ (80011c4 <PressKeycodes+0x24c>)
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001020:	461a      	mov	r2, r3
 8001022:	4b6c      	ldr	r3, [pc, #432]	@ (80011d4 <PressKeycodes+0x25c>)
 8001024:	4413      	add	r3, r2
 8001026:	4a6c      	ldr	r2, [pc, #432]	@ (80011d8 <PressKeycodes+0x260>)
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	b25a      	sxtb	r2, r3
 800102e:	4b6b      	ldr	r3, [pc, #428]	@ (80011dc <PressKeycodes+0x264>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b68      	ldr	r3, [pc, #416]	@ (80011dc <PressKeycodes+0x264>)
 800103c:	701a      	strb	r2, [r3, #0]
		keyboardReport.MODIFIER = Modifier_Sum;
 800103e:	4b67      	ldr	r3, [pc, #412]	@ (80011dc <PressKeycodes+0x264>)
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	4b67      	ldr	r3, [pc, #412]	@ (80011e0 <PressKeycodes+0x268>)
 8001044:	701a      	strb	r2, [r3, #0]
		sprintf(message1, "ModifierPress = %d \n\r", Modifier_Bit[Keycode[LayerState][i] - 10000]);
 8001046:	4b5e      	ldr	r3, [pc, #376]	@ (80011c0 <PressKeycodes+0x248>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	495e      	ldr	r1, [pc, #376]	@ (80011c4 <PressKeycodes+0x24c>)
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800105c:	461a      	mov	r2, r3
 800105e:	4b5d      	ldr	r3, [pc, #372]	@ (80011d4 <PressKeycodes+0x25c>)
 8001060:	4413      	add	r3, r2
 8001062:	4a5d      	ldr	r2, [pc, #372]	@ (80011d8 <PressKeycodes+0x260>)
 8001064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	495d      	ldr	r1, [pc, #372]	@ (80011e4 <PressKeycodes+0x26c>)
 800106e:	4618      	mov	r0, r3
 8001070:	f00a fb20 	bl	800b6b4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f931 	bl	80002e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	4851      	ldr	r0, [pc, #324]	@ (80011d0 <PressKeycodes+0x258>)
 800108c:	f005 fb58 	bl	8006740 <HAL_UART_Transmit>
}
 8001090:	e091      	b.n	80011b6 <PressKeycodes+0x23e>
	else if (Keycode[LayerState][i] >= 5000)
 8001092:	4b4b      	ldr	r3, [pc, #300]	@ (80011c0 <PressKeycodes+0x248>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	494b      	ldr	r1, [pc, #300]	@ (80011c4 <PressKeycodes+0x24c>)
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010a8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d94e      	bls.n	800114e <PressKeycodes+0x1d6>
		if ( Keycode[LayerState][i] == KC_FN1)
 80010b0:	4b43      	ldr	r3, [pc, #268]	@ (80011c0 <PressKeycodes+0x248>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4943      	ldr	r1, [pc, #268]	@ (80011c4 <PressKeycodes+0x24c>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d103      	bne.n	80010d6 <PressKeycodes+0x15e>
			LayerState = 1; // Layer1 when pressed
 80010ce:	4b3c      	ldr	r3, [pc, #240]	@ (80011c0 <PressKeycodes+0x248>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e024      	b.n	8001120 <PressKeycodes+0x1a8>
		else if ( Keycode[LayerState][i] == KC_TD0)
 80010d6:	4b3a      	ldr	r3, [pc, #232]	@ (80011c0 <PressKeycodes+0x248>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	493a      	ldr	r1, [pc, #232]	@ (80011c4 <PressKeycodes+0x24c>)
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010ec:	f241 3289 	movw	r2, #5001	@ 0x1389
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d103      	bne.n	80010fc <PressKeycodes+0x184>
			LayerState = 0;
 80010f4:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <PressKeycodes+0x248>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e011      	b.n	8001120 <PressKeycodes+0x1a8>
		else if ( Keycode[LayerState][i] == KC_TD1)
 80010fc:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <PressKeycodes+0x248>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4930      	ldr	r1, [pc, #192]	@ (80011c4 <PressKeycodes+0x24c>)
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001112:	f241 328a 	movw	r2, #5002	@ 0x138a
 8001116:	4293      	cmp	r3, r2
 8001118:	d102      	bne.n	8001120 <PressKeycodes+0x1a8>
			LayerState = 1;
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <PressKeycodes+0x248>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
		sprintf(message1, "Current Layer = %d \n\r", LayerState);
 8001120:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <PressKeycodes+0x248>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	492f      	ldr	r1, [pc, #188]	@ (80011e8 <PressKeycodes+0x270>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00a fac2 	bl	800b6b4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f8d3 	bl	80002e0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 010c 	add.w	r1, r7, #12
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <PressKeycodes+0x258>)
 8001148:	f005 fafa 	bl	8006740 <HAL_UART_Transmit>
}
 800114c:	e033      	b.n	80011b6 <PressKeycodes+0x23e>
		SetKeycode(Keycode[LayerState][i]);
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <PressKeycodes+0x248>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	491c      	ldr	r1, [pc, #112]	@ (80011c4 <PressKeycodes+0x24c>)
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fe03 	bl	8000d70 <SetKeycode>
		WhichLayer[i] = LayerState;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <PressKeycodes+0x248>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	491f      	ldr	r1, [pc, #124]	@ (80011ec <PressKeycodes+0x274>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sprintf(message4, "PressKeycodes = %d \n\r", Keycode[LayerState][i]);
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <PressKeycodes+0x248>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4912      	ldr	r1, [pc, #72]	@ (80011c4 <PressKeycodes+0x24c>)
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800118c:	461a      	mov	r2, r3
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4917      	ldr	r1, [pc, #92]	@ (80011f0 <PressKeycodes+0x278>)
 8001194:	4618      	mov	r0, r3
 8001196:	f00a fa8d 	bl	800b6b4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)message4, strlen(message4), HAL_MAX_DELAY);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f89e 	bl	80002e0 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f107 010c 	add.w	r1, r7, #12
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	4807      	ldr	r0, [pc, #28]	@ (80011d0 <PressKeycodes+0x258>)
 80011b2:	f005 fac5 	bl	8006740 <HAL_UART_Transmit>
}
 80011b6:	bf00      	nop
 80011b8:	3770      	adds	r7, #112	@ 0x70
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240004c0 	.word	0x240004c0
 80011c4:	24000000 	.word	0x24000000
 80011c8:	24000708 	.word	0x24000708
 80011cc:	0800c044 	.word	0x0800c044
 80011d0:	24000420 	.word	0x24000420
 80011d4:	ffffd8f0 	.word	0xffffd8f0
 80011d8:	24000240 	.word	0x24000240
 80011dc:	240004bc 	.word	0x240004bc
 80011e0:	24000418 	.word	0x24000418
 80011e4:	0800c05c 	.word	0x0800c05c
 80011e8:	0800c074 	.word	0x0800c074
 80011ec:	240004c4 	.word	0x240004c4
 80011f0:	0800c08c 	.word	0x0800c08c

080011f4 <ReleaseKeycodes>:

void ReleaseKeycodes(int i)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b09c      	sub	sp, #112	@ 0x70
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (Keycode[LayerState][i] >= HOLDTAP_SHIFTING)
 80011fc:	4b91      	ldr	r3, [pc, #580]	@ (8001444 <ReleaseKeycodes+0x250>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4991      	ldr	r1, [pc, #580]	@ (8001448 <ReleaseKeycodes+0x254>)
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001212:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001216:	4293      	cmp	r3, r2
 8001218:	d95c      	bls.n	80012d4 <ReleaseKeycodes+0xe0>
    {
        if (HAL_GetTick() - KeyTimer > HOLD_TIME)
 800121a:	f000 fde9 	bl	8001df0 <HAL_GetTick>
 800121e:	4603      	mov	r3, r0
 8001220:	4a8a      	ldr	r2, [pc, #552]	@ (800144c <ReleaseKeycodes+0x258>)
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	2bc8      	cmp	r3, #200	@ 0xc8
 8001228:	d90f      	bls.n	800124a <ReleaseKeycodes+0x56>
        {
            TempKeycode = Keycode[LayerState + 1][i]; // Hold 작동시 다음 레이어에 있는 키코드 전송
 800122a:	4b86      	ldr	r3, [pc, #536]	@ (8001444 <ReleaseKeycodes+0x250>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	4985      	ldr	r1, [pc, #532]	@ (8001448 <ReleaseKeycodes+0x254>)
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001242:	461a      	mov	r2, r3
 8001244:	4b82      	ldr	r3, [pc, #520]	@ (8001450 <ReleaseKeycodes+0x25c>)
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e00f      	b.n	800126a <ReleaseKeycodes+0x76>
        }
        else
        {
            TempKeycode = Keycode[LayerState][i] - 30000; // Tap 작동시 현재 레이어에 있는 키코드 -30000 전송
 800124a:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <ReleaseKeycodes+0x250>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	497e      	ldr	r1, [pc, #504]	@ (8001448 <ReleaseKeycodes+0x254>)
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4413      	add	r3, r2
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001260:	461a      	mov	r2, r3
 8001262:	4b7c      	ldr	r3, [pc, #496]	@ (8001454 <ReleaseKeycodes+0x260>)
 8001264:	4413      	add	r3, r2
 8001266:	4a7a      	ldr	r2, [pc, #488]	@ (8001450 <ReleaseKeycodes+0x25c>)
 8001268:	6013      	str	r3, [r2, #0]
        }
        SetKeycode(TempKeycode);
 800126a:	4b79      	ldr	r3, [pc, #484]	@ (8001450 <ReleaseKeycodes+0x25c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd7e 	bl	8000d70 <SetKeycode>
        KeycodeSend();
 8001274:	f7ff fe5a 	bl	8000f2c <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 8001278:	2032      	movs	r0, #50	@ 0x32
 800127a:	f000 fdc5 	bl	8001e08 <HAL_Delay>
        ResetKeycode(TempKeycode);
 800127e:	4b74      	ldr	r3, [pc, #464]	@ (8001450 <ReleaseKeycodes+0x25c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe10 	bl	8000ea8 <ResetKeycode>
        KeycodeSend();
 8001288:	f7ff fe50 	bl	8000f2c <KeycodeSend>
        HAL_Delay(TAP_DELAY);
 800128c:	2032      	movs	r0, #50	@ 0x32
 800128e:	f000 fdbb 	bl	8001e08 <HAL_Delay>

        char message5[100];
        sprintf(message5, "HoldTapRelease = %d \n\r", Keycode[LayerState][i]);
 8001292:	4b6c      	ldr	r3, [pc, #432]	@ (8001444 <ReleaseKeycodes+0x250>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	496c      	ldr	r1, [pc, #432]	@ (8001448 <ReleaseKeycodes+0x254>)
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a8:	461a      	mov	r2, r3
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	496a      	ldr	r1, [pc, #424]	@ (8001458 <ReleaseKeycodes+0x264>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00a f9ff 	bl	800b6b4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f810 	bl	80002e0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f107 010c 	add.w	r1, r7, #12
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	4863      	ldr	r0, [pc, #396]	@ (800145c <ReleaseKeycodes+0x268>)
 80012ce:	f005 fa37 	bl	8006740 <HAL_UART_Transmit>
        char message5[100];
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
    }

}
 80012d2:	e0b2      	b.n	800143a <ReleaseKeycodes+0x246>
    else if (Keycode[LayerState][i] >= 10000)
 80012d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001444 <ReleaseKeycodes+0x250>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	495b      	ldr	r1, [pc, #364]	@ (8001448 <ReleaseKeycodes+0x254>)
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d940      	bls.n	8001374 <ReleaseKeycodes+0x180>
        Modifier_Sum = Modifier_Sum & ~(Modifier_Bit[Keycode[LayerState][i] - 10000]);
 80012f2:	4b54      	ldr	r3, [pc, #336]	@ (8001444 <ReleaseKeycodes+0x250>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4954      	ldr	r1, [pc, #336]	@ (8001448 <ReleaseKeycodes+0x254>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4413      	add	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001308:	461a      	mov	r2, r3
 800130a:	4b55      	ldr	r3, [pc, #340]	@ (8001460 <ReleaseKeycodes+0x26c>)
 800130c:	4413      	add	r3, r2
 800130e:	4a55      	ldr	r2, [pc, #340]	@ (8001464 <ReleaseKeycodes+0x270>)
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	b25a      	sxtb	r2, r3
 800131a:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <ReleaseKeycodes+0x274>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	4013      	ands	r3, r2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b50      	ldr	r3, [pc, #320]	@ (8001468 <ReleaseKeycodes+0x274>)
 8001328:	701a      	strb	r2, [r3, #0]
        keyboardReport.MODIFIER = Modifier_Sum;
 800132a:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <ReleaseKeycodes+0x274>)
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	4b4f      	ldr	r3, [pc, #316]	@ (800146c <ReleaseKeycodes+0x278>)
 8001330:	701a      	strb	r2, [r3, #0]
        sprintf(message2, "ModifierRelease = %d\n\r", Keycode[LayerState][i]);
 8001332:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <ReleaseKeycodes+0x250>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4944      	ldr	r1, [pc, #272]	@ (8001448 <ReleaseKeycodes+0x254>)
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001348:	461a      	mov	r2, r3
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4948      	ldr	r1, [pc, #288]	@ (8001470 <ReleaseKeycodes+0x27c>)
 8001350:	4618      	mov	r0, r3
 8001352:	f00a f9af 	bl	800b6b4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message2, strlen(message2), HAL_MAX_DELAY);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ffc0 	bl	80002e0 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	f107 010c 	add.w	r1, r7, #12
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	483b      	ldr	r0, [pc, #236]	@ (800145c <ReleaseKeycodes+0x268>)
 800136e:	f005 f9e7 	bl	8006740 <HAL_UART_Transmit>
}
 8001372:	e062      	b.n	800143a <ReleaseKeycodes+0x246>
    else if (Keycode[LayerState][i] >= 5000 )
 8001374:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <ReleaseKeycodes+0x250>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4933      	ldr	r1, [pc, #204]	@ (8001448 <ReleaseKeycodes+0x254>)
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800138a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800138e:	4293      	cmp	r3, r2
 8001390:	d928      	bls.n	80013e4 <ReleaseKeycodes+0x1f0>
    	if ( Keycode[LayerState][i] == KC_FN1 )
 8001392:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <ReleaseKeycodes+0x250>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	492c      	ldr	r1, [pc, #176]	@ (8001448 <ReleaseKeycodes+0x254>)
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d144      	bne.n	800143a <ReleaseKeycodes+0x246>
            LayerState = 0; // Layer0 when released
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <ReleaseKeycodes+0x250>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
            sprintf(message1, "Current Layer = %d \n\r", LayerState);
 80013b6:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <ReleaseKeycodes+0x250>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	492d      	ldr	r1, [pc, #180]	@ (8001474 <ReleaseKeycodes+0x280>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00a f977 	bl	800b6b4 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message1, strlen(message1), HAL_MAX_DELAY);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe ff88 	bl	80002e0 <strlen>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f107 010c 	add.w	r1, r7, #12
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	481f      	ldr	r0, [pc, #124]	@ (800145c <ReleaseKeycodes+0x268>)
 80013de:	f005 f9af 	bl	8006740 <HAL_UART_Transmit>
}
 80013e2:	e02a      	b.n	800143a <ReleaseKeycodes+0x246>
        TempKeycode = Keycode[WhichLayer[i]][i];
 80013e4:	4a24      	ldr	r2, [pc, #144]	@ (8001478 <ReleaseKeycodes+0x284>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ec:	4916      	ldr	r1, [pc, #88]	@ (8001448 <ReleaseKeycodes+0x254>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <ReleaseKeycodes+0x25c>)
 8001402:	601a      	str	r2, [r3, #0]
        ResetKeycode(TempKeycode);
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <ReleaseKeycodes+0x25c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fd4d 	bl	8000ea8 <ResetKeycode>
        sprintf(message5, "ReleaseKeycodes = %d \n\r", TempKeycode);
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <ReleaseKeycodes+0x25c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4919      	ldr	r1, [pc, #100]	@ (800147c <ReleaseKeycodes+0x288>)
 8001418:	4618      	mov	r0, r3
 800141a:	f00a f94b 	bl	800b6b4 <siprintf>
        HAL_UART_Transmit(&huart4, (uint8_t *)message5, strlen(message5), HAL_MAX_DELAY);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ff5c 	bl	80002e0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f107 010c 	add.w	r1, r7, #12
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	4809      	ldr	r0, [pc, #36]	@ (800145c <ReleaseKeycodes+0x268>)
 8001436:	f005 f983 	bl	8006740 <HAL_UART_Transmit>
}
 800143a:	bf00      	nop
 800143c:	3770      	adds	r7, #112	@ 0x70
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	240004c0 	.word	0x240004c0
 8001448:	24000000 	.word	0x24000000
 800144c:	24000708 	.word	0x24000708
 8001450:	24000704 	.word	0x24000704
 8001454:	ffff8ad0 	.word	0xffff8ad0
 8001458:	0800c0a4 	.word	0x0800c0a4
 800145c:	24000420 	.word	0x24000420
 8001460:	ffffd8f0 	.word	0xffffd8f0
 8001464:	24000240 	.word	0x24000240
 8001468:	240004bc 	.word	0x240004bc
 800146c:	24000418 	.word	0x24000418
 8001470:	0800c0bc 	.word	0x0800c0bc
 8001474:	0800c074 	.word	0x0800c074
 8001478:	240004c4 	.word	0x240004c4
 800147c:	0800c0d4 	.word	0x0800c0d4

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b09c      	sub	sp, #112	@ 0x70
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001486:	f000 fa1b 	bl	80018c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f000 fc2b 	bl	8001ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f867 	bl	8001560 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001492:	f000 f8e1 	bl	8001658 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f000 f95d 	bl	8001754 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800149a:	f009 fb2d 	bl	800aaf8 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 800149e:	f000 f90d 	bl	80016bc <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {

    	CurrentTime = HAL_GetTick();
 80014a2:	f000 fca5 	bl	8001df0 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <main+0xc8>)
 80014aa:	6013      	str	r3, [r2, #0]

        if (CurrentTime - LastTimer >= 10000)
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <main+0xc8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a26      	ldr	r2, [pc, #152]	@ (800154c <main+0xcc>)
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d923      	bls.n	8001506 <main+0x86>
        {
            char message[100];
            sprintf(message, "Time(ms) = %d |  Scanrate(Hz) = %d \n\r", CurrentTime, Scanrate / 10);
 80014be:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <main+0xc8>)
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <main+0xd0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <main+0xd4>)
 80014c8:	fb82 0203 	smull	r0, r2, r2, r3
 80014cc:	1092      	asrs	r2, r2, #2
 80014ce:	17db      	asrs	r3, r3, #31
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	1d38      	adds	r0, r7, #4
 80014d4:	460a      	mov	r2, r1
 80014d6:	4920      	ldr	r1, [pc, #128]	@ (8001558 <main+0xd8>)
 80014d8:	f00a f8ec 	bl	800b6b4 <siprintf>
            HAL_UART_Transmit(&huart4, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fefe 	bl	80002e0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	1d39      	adds	r1, r7, #4
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	481b      	ldr	r0, [pc, #108]	@ (800155c <main+0xdc>)
 80014f0:	f005 f926 	bl	8006740 <HAL_UART_Transmit>

            LastTimer = HAL_GetTick();
 80014f4:	f000 fc7c 	bl	8001df0 <HAL_GetTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <main+0xcc>)
 80014fe:	601a      	str	r2, [r3, #0]
            Scanrate = 0;
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <main+0xd0>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
        }

        Scanrate = Scanrate + 1;
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <main+0xd0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <main+0xd0>)
 800150e:	6013      	str	r3, [r2, #0]

        // ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

        MatrixScanResult Matrix = MatrixScan();
 8001510:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f8b3 	bl	8000680 <MatrixScan>

        if ( Matrix.pinNumber != -1 )
 800151a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d0bf      	beq.n	80014a2 <main+0x22>
        {
			if ( Matrix.pinState == 1)
 8001522:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001526:	2b01      	cmp	r3, #1
 8001528:	d106      	bne.n	8001538 <main+0xb8>
			{
				PressKeycodes(Matrix.pinNumber);
 800152a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd23 	bl	8000f78 <PressKeycodes>
				KeycodeSend();
 8001532:	f7ff fcfb 	bl	8000f2c <KeycodeSend>
 8001536:	e7b4      	b.n	80014a2 <main+0x22>
			}
			else
			{
				ReleaseKeycodes(Matrix.pinNumber);
 8001538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fe5a 	bl	80011f4 <ReleaseKeycodes>
				KeycodeSend();
 8001540:	f7ff fcf4 	bl	8000f2c <KeycodeSend>
    {
 8001544:	e7ad      	b.n	80014a2 <main+0x22>
 8001546:	bf00      	nop
 8001548:	2400090c 	.word	0x2400090c
 800154c:	240004b8 	.word	0x240004b8
 8001550:	240004b4 	.word	0x240004b4
 8001554:	66666667 	.word	0x66666667
 8001558:	0800c0ec 	.word	0x0800c0ec
 800155c:	24000420 	.word	0x24000420

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09c      	sub	sp, #112	@ 0x70
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	224c      	movs	r2, #76	@ 0x4c
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f00a f8c0 	bl	800b6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2220      	movs	r2, #32
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f00a f8ba 	bl	800b6f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001580:	2002      	movs	r0, #2
 8001582:	f002 fa31 	bl	80039e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <SystemClock_Config+0xf0>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a30      	ldr	r2, [pc, #192]	@ (8001650 <SystemClock_Config+0xf0>)
 8001590:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <SystemClock_Config+0xf0>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <SystemClock_Config+0xf4>)
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001654 <SystemClock_Config+0xf4>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <SystemClock_Config+0xf4>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015b8:	bf00      	nop
 80015ba:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <SystemClock_Config+0xf0>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015c6:	d1f8      	bne.n	80015ba <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	2302      	movs	r3, #2
 80015d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80015da:	230a      	movs	r3, #10
 80015dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 384;
 80015de:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80015f0:	2304      	movs	r3, #4
 80015f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fa3b 	bl	8003a7c <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800160c:	f000 f984 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	233f      	movs	r3, #63	@ 0x3f
 8001612:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001614:	2303      	movs	r3, #3
 8001616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800161c:	2308      	movs	r3, #8
 800161e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001620:	2340      	movs	r3, #64	@ 0x40
 8001622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001624:	2340      	movs	r3, #64	@ 0x40
 8001626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800162c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800162e:	2340      	movs	r3, #64	@ 0x40
 8001630:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2104      	movs	r1, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fe7a 	bl	8004330 <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001642:	f000 f969 	bl	8001918 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3770      	adds	r7, #112	@ 0x70
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58024800 	.word	0x58024800
 8001654:	58000400 	.word	0x58000400

08001658 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0b0      	sub	sp, #192	@ 0xc0
 800165c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	22c0      	movs	r2, #192	@ 0xc0
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f00a f845 	bl	800b6f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800166a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8001676:	2305      	movs	r3, #5
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
 800167a:	2360      	movs	r3, #96	@ 0x60
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800167e:	2302      	movs	r3, #2
 8001680:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8001682:	230a      	movs	r3, #10
 8001684:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001686:	2302      	movs	r3, #2
 8001688:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800168a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001690:	2300      	movs	r3, #0
 8001692:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001698:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800169c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 f9d0 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80016ae:	f000 f933 	bl	8001918 <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	37c0      	adds	r7, #192	@ 0xc0
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <MX_UART4_Init+0x90>)
 80016c2:	4a23      	ldr	r2, [pc, #140]	@ (8001750 <MX_UART4_Init+0x94>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <MX_UART4_Init+0x90>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <MX_UART4_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <MX_UART4_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <MX_UART4_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <MX_UART4_Init+0x90>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <MX_UART4_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <MX_UART4_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <MX_UART4_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_UART4_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <MX_UART4_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001704:	4811      	ldr	r0, [pc, #68]	@ (800174c <MX_UART4_Init+0x90>)
 8001706:	f004 ffcb 	bl	80066a0 <HAL_UART_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f902 	bl	8001918 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001714:	2100      	movs	r1, #0
 8001716:	480d      	ldr	r0, [pc, #52]	@ (800174c <MX_UART4_Init+0x90>)
 8001718:	f006 f861 	bl	80077de <HAL_UARTEx_SetTxFifoThreshold>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001722:	f000 f8f9 	bl	8001918 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4808      	ldr	r0, [pc, #32]	@ (800174c <MX_UART4_Init+0x90>)
 800172a:	f006 f896 	bl	800785a <HAL_UARTEx_SetRxFifoThreshold>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001734:	f000 f8f0 	bl	8001918 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_UART4_Init+0x90>)
 800173a:	f006 f817 	bl	800776c <HAL_UARTEx_DisableFifoMode>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001744:	f000 f8e8 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	24000420 	.word	0x24000420
 8001750:	40004c00 	.word	0x40004c00

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	@ 0x30
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <MX_GPIO_Init+0x154>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001770:	4a4d      	ldr	r2, [pc, #308]	@ (80018a8 <MX_GPIO_Init+0x154>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177a:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <MX_GPIO_Init+0x154>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001788:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <MX_GPIO_Init+0x154>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	4a46      	ldr	r2, [pc, #280]	@ (80018a8 <MX_GPIO_Init+0x154>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001798:	4b43      	ldr	r3, [pc, #268]	@ (80018a8 <MX_GPIO_Init+0x154>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	4b40      	ldr	r3, [pc, #256]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	4a3e      	ldr	r2, [pc, #248]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	4a37      	ldr	r2, [pc, #220]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d4:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a2f      	ldr	r2, [pc, #188]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f2:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <MX_GPIO_Init+0x154>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b29      	ldr	r3, [pc, #164]	@ (80018a8 <MX_GPIO_Init+0x154>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	4a28      	ldr	r2, [pc, #160]	@ (80018a8 <MX_GPIO_Init+0x154>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <MX_GPIO_Init+0x154>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800181e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001828:	2301      	movs	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <MX_GPIO_Init+0x158>)
 8001834:	f000 fca0 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8001838:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 800183c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001842:	2301      	movs	r3, #1
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4818      	ldr	r0, [pc, #96]	@ (80018b0 <MX_GPIO_Init+0x15c>)
 800184e:	f000 fc93 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001852:	f248 73d4 	movw	r3, #34772	@ 0x87d4
 8001856:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185c:	2301      	movs	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4813      	ldr	r0, [pc, #76]	@ (80018b4 <MX_GPIO_Init+0x160>)
 8001868:	f000 fc86 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB3
                           PB4 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 800186c:	f24c 33dc 	movw	r3, #50140	@ 0xc3dc
 8001870:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <MX_GPIO_Init+0x164>)
 8001882:	f000 fc79 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800188a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001890:	2301      	movs	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <MX_GPIO_Init+0x168>)
 800189c:	f000 fc6c 	bl	8002178 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	@ 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58021000 	.word	0x58021000
 80018b0:	58020800 	.word	0x58020800
 80018b4:	58020000 	.word	0x58020000
 80018b8:	58020400 	.word	0x58020400
 80018bc:	58020c00 	.word	0x58020c00

080018c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80018d2:	f000 fbd9 	bl	8002088 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80018da:	2300      	movs	r3, #0
 80018dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80018e2:	231f      	movs	r3, #31
 80018e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80018e6:	2387      	movs	r3, #135	@ 0x87
 80018e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018ee:	2300      	movs	r3, #0
 80018f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001902:	463b      	mov	r3, r7
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fbf7 	bl	80020f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800190a:	2004      	movs	r0, #4
 800190c:	f000 fbd4 	bl	80020b8 <HAL_MPU_Enable>

}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <Error_Handler+0x8>

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_MspInit+0x30>)
 800192c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001930:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_MspInit+0x30>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_MspInit+0x30>)
 800193c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	58024400 	.word	0x58024400

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0ba      	sub	sp, #232	@ 0xe8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	22c0      	movs	r2, #192	@ 0xc0
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f009 febb 	bl	800b6f4 <memset>
  if(huart->Instance==UART4)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a26      	ldr	r2, [pc, #152]	@ (8001a1c <HAL_UART_MspInit+0xc4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d145      	bne.n	8001a14 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001988:	f04f 0202 	mov.w	r2, #2
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f852 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019aa:	f7ff ffb5 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_UART_MspInit+0xc8>)
 80019b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <HAL_UART_MspInit+0xc8>)
 80019b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <HAL_UART_MspInit+0xc8>)
 80019c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <HAL_UART_MspInit+0xc8>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d2:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <HAL_UART_MspInit+0xc8>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_UART_MspInit+0xc8>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a02:	2308      	movs	r3, #8
 8001a04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <HAL_UART_MspInit+0xcc>)
 8001a10:	f000 fbb2 	bl	8002178 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001a14:	bf00      	nop
 8001a16:	37e8      	adds	r7, #232	@ 0xe8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40004c00 	.word	0x40004c00
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020000 	.word	0x58020000

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <NMI_Handler+0x4>

08001a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <MemManage_Handler+0x4>

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7e:	f000 f9a3 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <OTG_HS_IRQHandler+0x10>)
 8001a8e:	f000 fe64 	bl	800275a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	240015dc 	.word	0x240015dc

08001a9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <OTG_FS_IRQHandler+0x10>)
 8001aa2:	f000 fe5a 	bl	800275a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	240010f8 	.word	0x240010f8

08001ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <_sbrk+0x5c>)
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <_sbrk+0x60>)
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <_sbrk+0x64>)
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <_sbrk+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d207      	bcs.n	8001af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae0:	f009 fe10 	bl	800b704 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e009      	b.n	8001b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_sbrk+0x64>)
 8001b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	24080000 	.word	0x24080000
 8001b10:	00000400 	.word	0x00000400
 8001b14:	24000934 	.word	0x24000934
 8001b18:	24001c20 	.word	0x24001c20

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b20:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <SystemInit+0x114>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b26:	4a42      	ldr	r2, [pc, #264]	@ (8001c30 <SystemInit+0x114>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b30:	4b40      	ldr	r3, [pc, #256]	@ (8001c34 <SystemInit+0x118>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d807      	bhi.n	8001b4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c34 <SystemInit+0x118>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 030f 	bic.w	r3, r3, #15
 8001b44:	4a3b      	ldr	r2, [pc, #236]	@ (8001c34 <SystemInit+0x118>)
 8001b46:	f043 0307 	orr.w	r3, r3, #7
 8001b4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <SystemInit+0x11c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a39      	ldr	r2, [pc, #228]	@ (8001c38 <SystemInit+0x11c>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b58:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <SystemInit+0x11c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b5e:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <SystemInit+0x11c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4935      	ldr	r1, [pc, #212]	@ (8001c38 <SystemInit+0x11c>)
 8001b64:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <SystemInit+0x120>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b6a:	4b32      	ldr	r3, [pc, #200]	@ (8001c34 <SystemInit+0x118>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b76:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <SystemInit+0x118>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 030f 	bic.w	r3, r3, #15
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c34 <SystemInit+0x118>)
 8001b80:	f043 0307 	orr.w	r3, r3, #7
 8001b84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	@ (8001c38 <SystemInit+0x11c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <SystemInit+0x11c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <SystemInit+0x11c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <SystemInit+0x11c>)
 8001b9a:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <SystemInit+0x124>)
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <SystemInit+0x11c>)
 8001ba0:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <SystemInit+0x128>)
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <SystemInit+0x11c>)
 8001ba6:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <SystemInit+0x12c>)
 8001ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <SystemInit+0x11c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <SystemInit+0x11c>)
 8001bb2:	4a25      	ldr	r2, [pc, #148]	@ (8001c48 <SystemInit+0x12c>)
 8001bb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <SystemInit+0x11c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <SystemInit+0x11c>)
 8001bbe:	4a22      	ldr	r2, [pc, #136]	@ (8001c48 <SystemInit+0x12c>)
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <SystemInit+0x11c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <SystemInit+0x11c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <SystemInit+0x11c>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <SystemInit+0x11c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bda:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <SystemInit+0x130>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <SystemInit+0x134>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001be6:	d202      	bcs.n	8001bee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <SystemInit+0x138>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <SystemInit+0x11c>)
 8001bf0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d113      	bne.n	8001c24 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <SystemInit+0x11c>)
 8001bfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c02:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <SystemInit+0x11c>)
 8001c04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c08:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <SystemInit+0x13c>)
 8001c0e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c12:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <SystemInit+0x11c>)
 8001c16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c1a:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <SystemInit+0x11c>)
 8001c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c20:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	52002000 	.word	0x52002000
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c40:	02020200 	.word	0x02020200
 8001c44:	01ff0000 	.word	0x01ff0000
 8001c48:	01010280 	.word	0x01010280
 8001c4c:	5c001000 	.word	0x5c001000
 8001c50:	ffff0000 	.word	0xffff0000
 8001c54:	51008108 	.word	0x51008108
 8001c58:	52004000 	.word	0x52004000

08001c5c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <ExitRun0Mode+0x2c>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <ExitRun0Mode+0x2c>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c6c:	bf00      	nop
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <ExitRun0Mode+0x2c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f9      	beq.n	8001c6e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	58024800 	.word	0x58024800

08001c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001cc8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001c90:	f7ff ffe4 	bl	8001c5c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c94:	f7ff ff42 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9a:	490d      	ldr	r1, [pc, #52]	@ (8001cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f009 fd27 	bl	800b710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc2:	f7ff fbdd 	bl	8001480 <main>
  bx  lr
 8001cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ccc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cd0:	240003fc 	.word	0x240003fc
  ldr r2, =_sidata
 8001cd4:	0800c1d8 	.word	0x0800c1d8
  ldr r2, =_sbss
 8001cd8:	240003fc 	.word	0x240003fc
  ldr r4, =_ebss
 8001cdc:	24001c1c 	.word	0x24001c1c

08001ce0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC3_IRQHandler>
	...

08001ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cea:	2003      	movs	r0, #3
 8001cec:	f000 f98c 	bl	8002008 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cf0:	f002 fcd4 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_Init+0x68>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	4913      	ldr	r1, [pc, #76]	@ (8001d50 <HAL_Init+0x6c>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_Init+0x68>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	4a0e      	ldr	r2, [pc, #56]	@ (8001d50 <HAL_Init+0x6c>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	4a0b      	ldr	r2, [pc, #44]	@ (8001d54 <HAL_Init+0x70>)
 8001d26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d28:	4a0b      	ldr	r2, [pc, #44]	@ (8001d58 <HAL_Init+0x74>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 f814 	bl	8001d5c <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e002      	b.n	8001d44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3e:	f7ff fdf1 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	0800c15c 	.word	0x0800c15c
 8001d54:	24000264 	.word	0x24000264
 8001d58:	24000260 	.word	0x24000260

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_InitTick+0x60>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e021      	b.n	8001db4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <HAL_InitTick+0x64>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_InitTick+0x60>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f971 	bl	800206e <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f93b 	bl	800201e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <HAL_InitTick+0x68>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2400026c 	.word	0x2400026c
 8001dc0:	24000260 	.word	0x24000260
 8001dc4:	24000268 	.word	0x24000268

08001dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_IncTick+0x20>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_IncTick+0x24>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <HAL_IncTick+0x24>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	2400026c 	.word	0x2400026c
 8001dec:	24000938 	.word	0x24000938

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	24000938 	.word	0x24000938

08001e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff ffee 	bl	8001df0 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d005      	beq.n	8001e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_Delay+0x44>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2e:	bf00      	nop
 8001e30:	f7ff ffde 	bl	8001df0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8f7      	bhi.n	8001e30 <HAL_Delay+0x28>
  {
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2400026c 	.word	0x2400026c

08001e50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_GetREVID+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0c1b      	lsrs	r3, r3, #16
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	5c001000 	.word	0x5c001000

08001e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00
 8001eac:	05fa0000 	.word	0x05fa0000

08001eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0b      	blt.n	8001ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4907      	ldr	r1, [pc, #28]	@ (8001f04 <__NVIC_EnableIRQ+0x38>)
 8001ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2001      	movs	r0, #1
 8001eee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	@ (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	@ (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	@ 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
         );
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	@ 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00f      	b.n	8001ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <SysTick_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f7ff ff8e 	bl	8001f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <SysTick_Config+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <SysTick_Config+0x40>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff29 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff40 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff90 	bl	8001f5c <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5f 	bl	8001f08 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff33 	bl	8001ecc <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa4 	bl	8001fc4 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800208c:	f3bf 8f5f 	dmb	sy
}
 8002090:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <HAL_MPU_Disable+0x28>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <HAL_MPU_Disable+0x28>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <HAL_MPU_Disable+0x2c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00
 80020b4:	e000ed90 	.word	0xe000ed90

080020b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020c0:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <HAL_MPU_Enable+0x38>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <HAL_MPU_Enable+0x3c>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <HAL_MPU_Enable+0x3c>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020d6:	f3bf 8f4f 	dsb	sy
}
 80020da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020dc:	f3bf 8f6f 	isb	sy
}
 80020e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed90 	.word	0xe000ed90
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	785a      	ldrb	r2, [r3, #1]
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_MPU_ConfigRegion+0x7c>)
 8002106:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_MPU_ConfigRegion+0x7c>)
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <HAL_MPU_ConfigRegion+0x7c>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002114:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <HAL_MPU_ConfigRegion+0x7c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7b1b      	ldrb	r3, [r3, #12]
 8002120:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7adb      	ldrb	r3, [r3, #11]
 8002126:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002128:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7a9b      	ldrb	r3, [r3, #10]
 800212e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002130:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	7b5b      	ldrb	r3, [r3, #13]
 8002136:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002138:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7b9b      	ldrb	r3, [r3, #14]
 800213e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002140:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7bdb      	ldrb	r3, [r3, #15]
 8002146:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002148:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7a5b      	ldrb	r3, [r3, #9]
 800214e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002150:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7a1b      	ldrb	r3, [r3, #8]
 8002156:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002158:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002162:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002164:	6113      	str	r3, [r2, #16]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed90 	.word	0xe000ed90

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002186:	4b89      	ldr	r3, [pc, #548]	@ (80023ac <HAL_GPIO_Init+0x234>)
 8002188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800218a:	e194      	b.n	80024b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8186 	beq.w	80024b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d005      	beq.n	80021bc <HAL_GPIO_Init+0x44>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d130      	bne.n	800221e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f2:	2201      	movs	r2, #1
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 0201 	and.w	r2, r3, #1
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d123      	bne.n	80022ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	69b9      	ldr	r1, [r7, #24]
 80022aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0203 	and.w	r2, r3, #3
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80e0 	beq.w	80024b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f0:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <HAL_GPIO_Init+0x238>)
 80022f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022f6:	4a2e      	ldr	r2, [pc, #184]	@ (80023b0 <HAL_GPIO_Init+0x238>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002300:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <HAL_GPIO_Init+0x238>)
 8002302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a29      	ldr	r2, [pc, #164]	@ (80023b4 <HAL_GPIO_Init+0x23c>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a20      	ldr	r2, [pc, #128]	@ (80023b8 <HAL_GPIO_Init+0x240>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d052      	beq.n	80023e0 <HAL_GPIO_Init+0x268>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_GPIO_Init+0x244>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_GPIO_Init+0x22e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1e      	ldr	r2, [pc, #120]	@ (80023c0 <HAL_GPIO_Init+0x248>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d02b      	beq.n	80023a2 <HAL_GPIO_Init+0x22a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_GPIO_Init+0x24c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d025      	beq.n	800239e <HAL_GPIO_Init+0x226>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1c      	ldr	r2, [pc, #112]	@ (80023c8 <HAL_GPIO_Init+0x250>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <HAL_GPIO_Init+0x222>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <HAL_GPIO_Init+0x254>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d019      	beq.n	8002396 <HAL_GPIO_Init+0x21e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_GPIO_Init+0x258>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d013      	beq.n	8002392 <HAL_GPIO_Init+0x21a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a19      	ldr	r2, [pc, #100]	@ (80023d4 <HAL_GPIO_Init+0x25c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00d      	beq.n	800238e <HAL_GPIO_Init+0x216>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_GPIO_Init+0x260>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x212>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <HAL_GPIO_Init+0x264>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_GPIO_Init+0x20e>
 8002382:	2309      	movs	r3, #9
 8002384:	e02d      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 8002386:	230a      	movs	r3, #10
 8002388:	e02b      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800238a:	2308      	movs	r3, #8
 800238c:	e029      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800238e:	2307      	movs	r3, #7
 8002390:	e027      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 8002392:	2306      	movs	r3, #6
 8002394:	e025      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 8002396:	2305      	movs	r3, #5
 8002398:	e023      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800239a:	2304      	movs	r3, #4
 800239c:	e021      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 800239e:	2303      	movs	r3, #3
 80023a0:	e01f      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e01d      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e01b      	b.n	80023e2 <HAL_GPIO_Init+0x26a>
 80023aa:	bf00      	nop
 80023ac:	58000080 	.word	0x58000080
 80023b0:	58024400 	.word	0x58024400
 80023b4:	58000400 	.word	0x58000400
 80023b8:	58020000 	.word	0x58020000
 80023bc:	58020400 	.word	0x58020400
 80023c0:	58020800 	.word	0x58020800
 80023c4:	58020c00 	.word	0x58020c00
 80023c8:	58021000 	.word	0x58021000
 80023cc:	58021400 	.word	0x58021400
 80023d0:	58021800 	.word	0x58021800
 80023d4:	58021c00 	.word	0x58021c00
 80023d8:	58022000 	.word	0x58022000
 80023dc:	58022400 	.word	0x58022400
 80023e0:	2300      	movs	r3, #0
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	f002 0203 	and.w	r2, r2, #3
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	4093      	lsls	r3, r2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f2:	4938      	ldr	r1, [pc, #224]	@ (80024d4 <HAL_GPIO_Init+0x35c>)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002426:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002454:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3301      	adds	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f47f ae63 	bne.w	800218c <HAL_GPIO_Init+0x14>
  }
}
 80024c6:	bf00      	nop
 80024c8:	bf00      	nop
 80024ca:	3724      	adds	r7, #36	@ 0x24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	58000400 	.word	0x58000400

080024d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0fe      	b.n	80026e8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f008 fcf4 	bl	800aeec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f005 fb54 	bl	8007bbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7c1a      	ldrb	r2, [r3, #16]
 800251e:	f88d 2000 	strb.w	r2, [sp]
 8002522:	3304      	adds	r3, #4
 8002524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002526:	f005 fa25 	bl	8007974 <USB_CoreInit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d5      	b.n	80026e8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f005 fb4c 	bl	8007be0 <USB_SetCurrentMode>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0c6      	b.n	80026e8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e04a      	b.n	80025f6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3315      	adds	r3, #21
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3314      	adds	r3, #20
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	b298      	uxth	r0, r3
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	332e      	adds	r3, #46	@ 0x2e
 800259c:	4602      	mov	r2, r0
 800259e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3318      	adds	r3, #24
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	331c      	adds	r3, #28
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	3320      	adds	r3, #32
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	3324      	adds	r3, #36	@ 0x24
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	3301      	adds	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	791b      	ldrb	r3, [r3, #4]
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d3af      	bcc.n	8002560 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e044      	b.n	8002690 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	3301      	adds	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	429a      	cmp	r2, r3
 8002698:	d3b5      	bcc.n	8002606 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7c1a      	ldrb	r2, [r3, #16]
 80026a2:	f88d 2000 	strb.w	r2, [sp]
 80026a6:	3304      	adds	r3, #4
 80026a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026aa:	f005 fae5 	bl	8007c78 <USB_DevInit>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e013      	b.n	80026e8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7b1b      	ldrb	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f001 f956 	bl	8003988 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f006 fb28 	bl	8008d36 <USB_DevDisconnect>

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_PCD_Start+0x1c>
 8002708:	2302      	movs	r3, #2
 800270a:	e022      	b.n	8002752 <HAL_PCD_Start+0x62>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f005 fa2f 	bl	8007b9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f006 fad6 	bl	8008cf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800275a:	b590      	push	{r4, r7, lr}
 800275c:	b08d      	sub	sp, #52	@ 0x34
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f006 fb94 	bl	8008e9e <USB_GetMode>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	f040 84b9 	bne.w	80030f0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f006 faf8 	bl	8008d78 <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 84af 	beq.w	80030ee <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f006 fae5 	bl	8008d78 <USB_ReadInterrupts>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d107      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 0202 	and.w	r2, r2, #2
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 fad3 	bl	8008d78 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d161      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0210 	bic.w	r2, r2, #16
 80027ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 020f 	and.w	r2, r3, #15
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	0c5b      	lsrs	r3, r3, #17
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	2b02      	cmp	r3, #2
 8002816:	d124      	bne.n	8002862 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d035      	beq.n	8002890 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6a38      	ldr	r0, [r7, #32]
 8002838:	f006 f90a 	bl	8008a50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002848:	441a      	add	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800285a:	441a      	add	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	e016      	b.n	8002890 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	0c5b      	lsrs	r3, r3, #17
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	2b06      	cmp	r3, #6
 800286c:	d110      	bne.n	8002890 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002874:	2208      	movs	r2, #8
 8002876:	4619      	mov	r1, r3
 8002878:	6a38      	ldr	r0, [r7, #32]
 800287a:	f006 f8e9 	bl	8008a50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288a:	441a      	add	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0210 	orr.w	r2, r2, #16
 800289e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f006 fa67 	bl	8008d78 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028b4:	f040 80a7 	bne.w	8002a06 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f006 fa6c 	bl	8008d9e <USB_ReadDevAllOutEpInterrupt>
 80028c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028c8:	e099      	b.n	80029fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 808e 	beq.w	80029f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 fa90 	bl	8008e06 <USB_ReadDevOutEPInterrupt>
 80028e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fe:	461a      	mov	r2, r3
 8002900:	2301      	movs	r3, #1
 8002902:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 feb8 	bl	800367c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002922:	461a      	mov	r2, r3
 8002924:	2308      	movs	r3, #8
 8002926:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 ff8e 	bl	800384c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002946:	461a      	mov	r2, r3
 8002948:	2310      	movs	r3, #16
 800294a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d030      	beq.n	80029b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295e:	2b80      	cmp	r3, #128	@ 0x80
 8002960:	d109      	bne.n	8002976 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002970:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002974:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d108      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f008 fc3d 	bl	800b220 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b2:	461a      	mov	r2, r3
 80029b4:	2302      	movs	r3, #2
 80029b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ce:	461a      	mov	r2, r3
 80029d0:	2320      	movs	r3, #32
 80029d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ea:	461a      	mov	r2, r3
 80029ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	3301      	adds	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f af62 	bne.w	80028ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 f9b4 	bl	8008d78 <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a1a:	f040 80db 	bne.w	8002bd4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f006 f9d5 	bl	8008dd2 <USB_ReadDevAllInEpInterrupt>
 8002a28:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a2e:	e0cd      	b.n	8002bcc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80c2 	beq.w	8002bc0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 f9fb 	bl	8008e42 <USB_ReadDevInEPInterrupt>
 8002a4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d057      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	2201      	movs	r2, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69f9      	ldr	r1, [r7, #28]
 8002a74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a78:	4013      	ands	r3, r2
 8002a7a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d132      	bne.n	8002afc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3320      	adds	r3, #32
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	331c      	adds	r3, #28
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4419      	add	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4403      	add	r3, r0
 8002aca:	3320      	adds	r3, #32
 8002acc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d113      	bne.n	8002afc <HAL_PCD_IRQHandler+0x3a2>
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3324      	adds	r3, #36	@ 0x24
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002af4:	461a      	mov	r2, r3
 8002af6:	2101      	movs	r1, #1
 8002af8:	f006 fa04 	bl	8008f04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f008 fb07 	bl	800b116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2308      	movs	r3, #8
 8002b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b56:	461a      	mov	r2, r3
 8002b58:	2340      	movs	r3, #64	@ 0x40
 8002b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d023      	beq.n	8002bae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b68:	6a38      	ldr	r0, [r7, #32]
 8002b6a:	f005 f9e3 	bl	8007f34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3310      	adds	r3, #16
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d108      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f008 fb54 	bl	800b244 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2302      	movs	r3, #2
 8002bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fcd2 	bl	8003564 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f af2e 	bne.w	8002a30 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f006 f8cd 	bl	8008d78 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002be8:	d122      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d108      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c10:	2100      	movs	r1, #0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fedc 	bl	80039d0 <HAL_PCDEx_LPM_Callback>
 8002c18:	e002      	b.n	8002c20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f008 faf2 	bl	800b204 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f006 f89f 	bl	8008d78 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c44:	d112      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f008 faae 	bl	800b1b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 f881 	bl	8008d78 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c80:	d121      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002c90:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d111      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fe89 	bl	80039d0 <HAL_PCDEx_LPM_Callback>
 8002cbe:	e002      	b.n	8002cc6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f008 fa79 	bl	800b1b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f006 f854 	bl	8008d78 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cda:	f040 80b7 	bne.w	8002e4c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f005 f91b 	bl	8007f34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d02:	e046      	b.n	8002d92 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d10:	461a      	mov	r2, r3
 8002d12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d4a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d8a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8e:	3301      	adds	r3, #1
 8002d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	791b      	ldrb	r3, [r3, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d3b2      	bcc.n	8002d04 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dac:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002db0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7bdb      	ldrb	r3, [r3, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dca:	f043 030b 	orr.w	r3, r3, #11
 8002dce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de0:	f043 030b 	orr.w	r3, r3, #11
 8002de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de6:	e015      	b.n	8002e14 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df6:	4619      	mov	r1, r3
 8002df8:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e0e:	f043 030b 	orr.w	r3, r3, #11
 8002e12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f006 f864 	bl	8008f04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f005 ff91 	bl	8008d78 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e60:	d123      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f006 f828 	bl	8008ebc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 f8d8 	bl	8008026 <USB_GetDevSpeed>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681c      	ldr	r4, [r3, #0]
 8002e82:	f001 fd85 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8002e86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f004 fde2 	bl	8007a58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f008 f966 	bl	800b166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f005 ff62 	bl	8008d78 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f008 f943 	bl	800b14a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f002 0208 	and.w	r2, r2, #8
 8002ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 ff4d 	bl	8008d78 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee4:	2b80      	cmp	r3, #128	@ 0x80
 8002ee6:	d123      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	e014      	b.n	8002f24 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 faf2 	bl	8003502 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	3301      	adds	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	791b      	ldrb	r3, [r3, #4]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d3e4      	bcc.n	8002efa <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f005 ff1f 	bl	8008d78 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f44:	d13c      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f46:	2301      	movs	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4a:	e02b      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d115      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da12      	bge.n	8002f9e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3317      	adds	r3, #23
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fab2 	bl	8003502 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	791b      	ldrb	r3, [r3, #4]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d3cd      	bcc.n	8002f4c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f005 fed7 	bl	8008d78 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd4:	d156      	bne.n	8003084 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fda:	e045      	b.n	8003068 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d12e      	bne.n	8003062 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003004:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	da2b      	bge.n	8003062 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	0c1a      	lsrs	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003014:	4053      	eors	r3, r2
 8003016:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d121      	bne.n	8003062 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305e:	6053      	str	r3, [r2, #4]
            break;
 8003060:	e008      	b.n	8003074 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	3301      	adds	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	791b      	ldrb	r3, [r3, #4]
 800306c:	461a      	mov	r2, r3
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	4293      	cmp	r3, r2
 8003072:	d3b3      	bcc.n	8002fdc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f005 fe75 	bl	8008d78 <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003098:	d10a      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f008 f8e4 	bl	800b268 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fe5f 	bl	8008d78 <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d115      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f008 f8d4 	bl	800b284 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e000      	b.n	80030f0 <HAL_PCD_IRQHandler+0x996>
      return;
 80030ee:	bf00      	nop
    }
  }
}
 80030f0:	3734      	adds	r7, #52	@ 0x34
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}

080030f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_SetAddress+0x1a>
 800310c:	2302      	movs	r3, #2
 800310e:	e012      	b.n	8003136 <HAL_PCD_SetAddress+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f005 fdbe 	bl	8008ca8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	4608      	mov	r0, r1
 8003148:	4611      	mov	r1, r2
 800314a:	461a      	mov	r2, r3
 800314c:	4603      	mov	r3, r0
 800314e:	70fb      	strb	r3, [r7, #3]
 8003150:	460b      	mov	r3, r1
 8003152:	803b      	strh	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da0f      	bge.n	8003184 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3310      	adds	r3, #16
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	705a      	strb	r2, [r3, #1]
 8003182:	e00f      	b.n	80031a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031b0:	883b      	ldrh	r3, [r7, #0]
 80031b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	78ba      	ldrb	r2, [r7, #2]
 80031be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d004      	beq.n	80031d2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031d2:	78bb      	ldrb	r3, [r7, #2]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d102      	bne.n	80031de <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_PCD_EP_Open+0xae>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e00e      	b.n	800320a <HAL_PCD_EP_Open+0xcc>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 ff38 	bl	8008070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003208:	7afb      	ldrb	r3, [r7, #11]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800321e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	da0f      	bge.n	8003246 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3310      	adds	r3, #16
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	705a      	strb	r2, [r3, #1]
 8003244:	e00f      	b.n	8003266 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_PCD_EP_Close+0x6e>
 800327c:	2302      	movs	r3, #2
 800327e:	e00e      	b.n	800329e <HAL_PCD_EP_Close+0x8c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68f9      	ldr	r1, [r7, #12]
 800328e:	4618      	mov	r0, r3
 8003290:	f004 ff76 	bl	8008180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	460b      	mov	r3, r1
 80032b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e8:	7afb      	ldrb	r3, [r7, #11]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	799b      	ldrb	r3, [r3, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	799b      	ldrb	r3, [r3, #6]
 800330a:	461a      	mov	r2, r3
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	f005 f813 	bl	8008338 <USB_EPStartXfer>

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332c:	7afb      	ldrb	r3, [r7, #11]
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	3310      	adds	r3, #16
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	3304      	adds	r3, #4
 8003342:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	b2da      	uxtb	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	799b      	ldrb	r3, [r3, #6]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	799b      	ldrb	r3, [r3, #6]
 800337e:	461a      	mov	r2, r3
 8003380:	6979      	ldr	r1, [r7, #20]
 8003382:	f004 ffd9 	bl	8008338 <USB_EPStartXfer>

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	7912      	ldrb	r2, [r2, #4]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e04f      	b.n	800344e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	da0f      	bge.n	80033d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	3310      	adds	r3, #16
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	705a      	strb	r2, [r3, #1]
 80033d4:	e00d      	b.n	80033f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_PCD_EP_SetStall+0x82>
 800340e:	2302      	movs	r3, #2
 8003410:	e01d      	b.n	800344e <HAL_PCD_EP_SetStall+0xbe>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f005 fb6d 	bl	8008b00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7999      	ldrb	r1, [r3, #6]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800343e:	461a      	mov	r2, r3
 8003440:	f005 fd60 	bl	8008f04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	7912      	ldrb	r2, [r2, #4]
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e042      	b.n	80034fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	da0f      	bge.n	800349c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	3310      	adds	r3, #16
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	705a      	strb	r2, [r3, #1]
 800349a:	e00f      	b.n	80034bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	f003 020f 	and.w	r2, r3, #15
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_PCD_EP_ClrStall+0x86>
 80034d8:	2302      	movs	r3, #2
 80034da:	e00e      	b.n	80034fa <HAL_PCD_EP_ClrStall+0xa4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f005 fb76 	bl	8008bdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0c      	bge.n	8003530 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3310      	adds	r3, #16
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e00c      	b.n	800354a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f005 f995 	bl	8008880 <USB_EPStopXfer>
 8003556:	4603      	mov	r3, r0
 8003558:	72fb      	strb	r3, [r7, #11]

  return ret;
 800355a:	7afb      	ldrb	r3, [r7, #11]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3310      	adds	r3, #16
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	3304      	adds	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d901      	bls.n	800359c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e06b      	b.n	8003674 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d902      	bls.n	80035b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3303      	adds	r3, #3
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c0:	e02a      	b.n	8003618 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d902      	bls.n	80035de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3303      	adds	r3, #3
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68d9      	ldr	r1, [r3, #12]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f005 f9ea 	bl	80089d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	441a      	add	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	441a      	add	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	429a      	cmp	r2, r3
 800362c:	d809      	bhi.n	8003642 <PCD_WriteEmptyTxFifo+0xde>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003636:	429a      	cmp	r2, r3
 8003638:	d203      	bcs.n	8003642 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1bf      	bne.n	80035c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	429a      	cmp	r2, r3
 800364c:	d811      	bhi.n	8003672 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	2201      	movs	r2, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	43db      	mvns	r3, r3
 8003668:	6939      	ldr	r1, [r7, #16]
 800366a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800366e:	4013      	ands	r3, r2
 8003670:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	333c      	adds	r3, #60	@ 0x3c
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d17b      	bne.n	80037aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a61      	ldr	r2, [pc, #388]	@ (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	f240 80b9 	bls.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80b3 	beq.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036de:	461a      	mov	r2, r3
 80036e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	e0a7      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	2320      	movs	r3, #32
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	e098      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8093 	bne.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a4b      	ldr	r2, [pc, #300]	@ (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90f      	bls.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e07e      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	0159      	lsls	r1, r3, #5
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	440b      	add	r3, r1
 800375c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d114      	bne.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	2101      	movs	r1, #1
 8003788:	f005 fbbc 	bl	8008f04 <USB_EP0_OutStart>
 800378c:	e006      	b.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f007 fc9c 	bl	800b0e0 <HAL_PCD_DataOutStageCallback>
 80037a8:	e046      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a26      	ldr	r2, [pc, #152]	@ (8003848 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d124      	bne.n	80037fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ce:	6093      	str	r3, [r2, #8]
 80037d0:	e032      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2320      	movs	r3, #32
 80037ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f007 fc73 	bl	800b0e0 <HAL_PCD_DataOutStageCallback>
 80037fa:	e01d      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003824:	461a      	mov	r2, r3
 8003826:	2100      	movs	r1, #0
 8003828:	f005 fb6c 	bl	8008f04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f007 fc54 	bl	800b0e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	4f54300a 	.word	0x4f54300a
 8003848:	4f54310a 	.word	0x4f54310a

0800384c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	333c      	adds	r3, #60	@ 0x3c
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a15      	ldr	r2, [pc, #84]	@ (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90e      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800389e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f007 fc0b 	bl	800b0bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90c      	bls.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	799b      	ldrb	r3, [r3, #6]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038c0:	461a      	mov	r2, r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f005 fb1e 	bl	8008f04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	4f54300a 	.word	0x4f54300a

080038d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	4613      	mov	r3, r2
 80038e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038f6:	883b      	ldrh	r3, [r7, #0]
 80038f8:	0419      	lsls	r1, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	629a      	str	r2, [r3, #40]	@ 0x28
 8003904:	e028      	b.n	8003958 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e00d      	b.n	8003936 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3340      	adds	r3, #64	@ 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b01      	subs	r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d3ec      	bcc.n	800391a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003940:	883b      	ldrh	r3, [r7, #0]
 8003942:	0418      	lsls	r0, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	3b01      	subs	r3, #1
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4302      	orrs	r2, r0
 8003950:	3340      	adds	r3, #64	@ 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_PCDEx_ActivateLPM+0x44>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	10000003 	.word	0x10000003

080039d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039f0:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d00a      	beq.n	8003a12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039fc:	4b16      	ldr	r3, [pc, #88]	@ (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01f      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e01d      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a12:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	490f      	ldr	r1, [pc, #60]	@ (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a22:	f7fe f9e5 	bl	8001df0 <HAL_GetTick>
 8003a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a28:	e009      	b.n	8003a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a2a:	f7fe f9e1 	bl	8001df0 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a38:	d901      	bls.n	8003a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e007      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	58024800 	.word	0x58024800

08003a5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a04      	ldr	r2, [pc, #16]	@ (8003a78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	58024800 	.word	0x58024800

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	@ 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f000 bc48 	b.w	8004320 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8088 	beq.w	8003bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b99      	ldr	r3, [pc, #612]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa8:	4b96      	ldr	r3, [pc, #600]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d007      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x48>
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	2b18      	cmp	r3, #24
 8003ab8:	d111      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d06d      	beq.n	8003bac <HAL_RCC_OscConfig+0x130>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d169      	bne.n	8003bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f000 bc21 	b.w	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x7a>
 8003ae8:	4b86      	ldr	r3, [pc, #536]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a85      	ldr	r2, [pc, #532]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e02e      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x9c>
 8003afe:	4b81      	ldr	r3, [pc, #516]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a80      	ldr	r2, [pc, #512]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b22:	4b78      	ldr	r3, [pc, #480]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a77      	ldr	r2, [pc, #476]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a74      	ldr	r2, [pc, #464]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b3c:	4b71      	ldr	r3, [pc, #452]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a70      	ldr	r2, [pc, #448]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b6e      	ldr	r3, [pc, #440]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f948 	bl	8001df0 <HAL_GetTick>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe f944 	bl	8001df0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e3d4      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b76:	4b63      	ldr	r3, [pc, #396]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f934 	bl	8001df0 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f930 	bl	8001df0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e3c0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9e:	4b59      	ldr	r3, [pc, #356]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x110>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80ca 	beq.w	8003d50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbc:	4b51      	ldr	r3, [pc, #324]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCC_OscConfig+0x166>
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b18      	cmp	r3, #24
 8003bd6:	d156      	bne.n	8003c86 <HAL_RCC_OscConfig+0x20a>
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d151      	bne.n	8003c86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_RCC_OscConfig+0x17e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e392      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bfa:	4b42      	ldr	r3, [pc, #264]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0219 	bic.w	r2, r3, #25
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	493f      	ldr	r1, [pc, #252]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f8f0 	bl	8001df0 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fe f8ec 	bl	8001df0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e37c      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c26:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	f7fe f90d 	bl	8001e50 <HAL_GetREVID>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d817      	bhi.n	8003c70 <HAL_RCC_OscConfig+0x1f4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d108      	bne.n	8003c5a <HAL_RCC_OscConfig+0x1de>
 8003c48:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c50:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e07a      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	031b      	lsls	r3, r3, #12
 8003c68:	4926      	ldr	r1, [pc, #152]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6e:	e06f      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	4921      	ldr	r1, [pc, #132]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c84:	e064      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d047      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0219 	bic.w	r2, r3, #25
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	491a      	ldr	r1, [pc, #104]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f8a6 	bl	8001df0 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fe f8a2 	bl	8001df0 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e332      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cba:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	f7fe f8c3 	bl	8001e50 <HAL_GetREVID>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d819      	bhi.n	8003d08 <HAL_RCC_OscConfig+0x28c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b40      	cmp	r3, #64	@ 0x40
 8003cda:	d108      	bne.n	8003cee <HAL_RCC_OscConfig+0x272>
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ce4:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	6053      	str	r3, [r2, #4]
 8003cec:	e030      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	031b      	lsls	r3, r3, #12
 8003cfc:	4901      	ldr	r1, [pc, #4]	@ (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
 8003d02:	e025      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
 8003d04:	58024400 	.word	0x58024400
 8003d08:	4b9a      	ldr	r3, [pc, #616]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	4997      	ldr	r1, [pc, #604]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b95      	ldr	r3, [pc, #596]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a94      	ldr	r2, [pc, #592]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fe f861 	bl	8001df0 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fe f85d 	bl	8001df0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2ed      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d44:	4b8b      	ldr	r3, [pc, #556]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a9 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b85      	ldr	r3, [pc, #532]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b82      	ldr	r3, [pc, #520]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x308>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d13a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x374>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d135      	bne.n	8003df0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d84:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x320>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b80      	cmp	r3, #128	@ 0x80
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e2c1      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9c:	f7fe f858 	bl	8001e50 <HAL_GetREVID>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d817      	bhi.n	8003dda <HAL_RCC_OscConfig+0x35e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x348>
 8003db2:	4b70      	ldr	r3, [pc, #448]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003dba:	4a6e      	ldr	r2, [pc, #440]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dc0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dc2:	e075      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	4968      	ldr	r1, [pc, #416]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd8:	e06a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dda:	4b66      	ldr	r3, [pc, #408]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	4962      	ldr	r1, [pc, #392]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dee:	e05f      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d042      	beq.n	8003e7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003df8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fff4 	bl	8001df0 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fff0 	bl	8001df0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e280      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e1e:	4b55      	ldr	r3, [pc, #340]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e2a:	f7fe f811 	bl	8001e50 <HAL_GetREVID>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d817      	bhi.n	8003e68 <HAL_RCC_OscConfig+0x3ec>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d108      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3d6>
 8003e40:	4b4c      	ldr	r3, [pc, #304]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e48:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e4e:	6053      	str	r3, [r2, #4]
 8003e50:	e02e      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	069b      	lsls	r3, r3, #26
 8003e60:	4944      	ldr	r1, [pc, #272]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
 8003e66:	e023      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
 8003e68:	4b42      	ldr	r3, [pc, #264]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	493f      	ldr	r1, [pc, #252]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3c      	ldr	r2, [pc, #240]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd ffb1 	bl	8001df0 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e92:	f7fd ffad 	bl	8001df0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e23d      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ea4:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d036      	beq.n	8003f2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d019      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd ff8e 	bl	8001df0 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fd ff8a 	bl	8001df0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e21a      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x45c>
 8003ef6:	e018      	b.n	8003f2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd ff74 	bl	8001df0 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd ff70 	bl	8001df0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e200      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d039      	beq.n	8003faa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd ff51 	bl	8001df0 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f52:	f7fd ff4d 	bl	8001df0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1dd      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x4d6>
 8003f70:	e01b      	b.n	8003faa <HAL_RCC_OscConfig+0x52e>
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f78:	4b9b      	ldr	r3, [pc, #620]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9a      	ldr	r2, [pc, #616]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003f7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f84:	f7fd ff34 	bl	8001df0 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f8c:	f7fd ff30 	bl	8001df0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1c0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f9e:	4b92      	ldr	r3, [pc, #584]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8081 	beq.w	80040ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a8b      	ldr	r2, [pc, #556]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd ff14 	bl	8001df0 <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fd ff10 	bl	8001df0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1a0      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fde:	4b83      	ldr	r3, [pc, #524]	@ (80041ec <HAL_RCC_OscConfig+0x770>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <HAL_RCC_OscConfig+0x584>
 8003ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e02d      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 8004008:	4b77      	ldr	r3, [pc, #476]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a76      	ldr	r2, [pc, #472]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
 8004014:	4b74      	ldr	r3, [pc, #464]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a73      	ldr	r2, [pc, #460]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	e01c      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x5c8>
 800402a:	4b6f      	ldr	r3, [pc, #444]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a6e      	ldr	r2, [pc, #440]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
 8004036:	4b6c      	ldr	r3, [pc, #432]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a6b      	ldr	r2, [pc, #428]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x5e0>
 8004044:	4b68      	ldr	r3, [pc, #416]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	4a67      	ldr	r2, [pc, #412]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004050:	4b65      	ldr	r3, [pc, #404]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	4a64      	ldr	r2, [pc, #400]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004056:	f023 0304 	bic.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd fec4 	bl	8001df0 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd fec0 	bl	8001df0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e14e      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004082:	4b59      	ldr	r3, [pc, #356]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x5f0>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd feae 	bl	8001df0 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd feaa 	bl	8001df0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e138      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ae:	4b4e      	ldr	r3, [pc, #312]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ee      	bne.n	8004098 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 812d 	beq.w	800431e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040c4:	4b48      	ldr	r3, [pc, #288]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040cc:	2b18      	cmp	r3, #24
 80040ce:	f000 80bd 	beq.w	800424c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f040 809e 	bne.w	8004218 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b42      	ldr	r3, [pc, #264]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a41      	ldr	r2, [pc, #260]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fe82 	bl	8001df0 <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fe7e 	bl	8001df0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e10e      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004102:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410e:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004112:	4b37      	ldr	r3, [pc, #220]	@ (80041f0 <HAL_RCC_OscConfig+0x774>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800411e:	0112      	lsls	r2, r2, #4
 8004120:	430a      	orrs	r2, r1
 8004122:	4931      	ldr	r1, [pc, #196]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	628b      	str	r3, [r1, #40]	@ 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	3b01      	subs	r3, #1
 800412e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	3b01      	subs	r3, #1
 8004138:	025b      	lsls	r3, r3, #9
 800413a:	b29b      	uxth	r3, r3
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	3b01      	subs	r3, #1
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	3b01      	subs	r3, #1
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004158:	4923      	ldr	r1, [pc, #140]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800415e:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a21      	ldr	r2, [pc, #132]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800416a:	4b1f      	ldr	r3, [pc, #124]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800416c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCC_OscConfig+0x778>)
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004176:	00d2      	lsls	r2, r2, #3
 8004178:	491b      	ldr	r1, [pc, #108]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	4917      	ldr	r1, [pc, #92]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800418c:	4313      	orrs	r3, r2
 800418e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004190:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	f023 0202 	bic.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	4912      	ldr	r1, [pc, #72]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	4a07      	ldr	r2, [pc, #28]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <HAL_RCC_OscConfig+0x76c>)
 80041d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd fe07 	bl	8001df0 <HAL_GetTick>
 80041e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e4:	e011      	b.n	800420a <HAL_RCC_OscConfig+0x78e>
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
 80041ec:	58024800 	.word	0x58024800
 80041f0:	fffffc0c 	.word	0xfffffc0c
 80041f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fdfa 	bl	8001df0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e08a      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x77c>
 8004216:	e082      	b.n	800431e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fde4 	bl	8001df0 <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd fde0 	bl	8001df0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e070      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800423e:	4b3a      	ldr	r3, [pc, #232]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x7b0>
 800424a:	e068      	b.n	800431e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800424c:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004252:	4b35      	ldr	r3, [pc, #212]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	2b01      	cmp	r3, #1
 800425e:	d031      	beq.n	80042c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0203 	and.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d12a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d122      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0a5b      	lsrs	r3, r3, #9
 8004292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d111      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d108      	bne.n	80042c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0e1b      	lsrs	r3, r3, #24
 80042b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e02b      	b.n	8004320 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042c8:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d01f      	beq.n	800431e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	4a11      	ldr	r2, [pc, #68]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ea:	f7fd fd81 	bl	8001df0 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042f0:	bf00      	nop
 80042f2:	f7fd fd7d 	bl	8001df0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d0f9      	beq.n	80042f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_OscConfig+0x8b0>)
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800430a:	00d2      	lsls	r2, r2, #3
 800430c:	4906      	ldr	r1, [pc, #24]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 800430e:	4313      	orrs	r3, r2
 8004310:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004312:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <HAL_RCC_OscConfig+0x8ac>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3730      	adds	r7, #48	@ 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	58024400 	.word	0x58024400
 800432c:	ffff0007 	.word	0xffff0007

08004330 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e19c      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b8a      	ldr	r3, [pc, #552]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b87      	ldr	r3, [pc, #540]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 020f 	bic.w	r2, r3, #15
 800435a:	4985      	ldr	r1, [pc, #532]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b83      	ldr	r3, [pc, #524]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e184      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	4b7b      	ldr	r3, [pc, #492]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800438c:	429a      	cmp	r2, r3
 800438e:	d908      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004390:	4b78      	ldr	r3, [pc, #480]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4975      	ldr	r1, [pc, #468]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	4b70      	ldr	r3, [pc, #448]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d908      	bls.n	80043d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043be:	4b6d      	ldr	r3, [pc, #436]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	496a      	ldr	r1, [pc, #424]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	4b64      	ldr	r3, [pc, #400]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d908      	bls.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043ec:	4b61      	ldr	r3, [pc, #388]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	495e      	ldr	r1, [pc, #376]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	4b59      	ldr	r3, [pc, #356]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004416:	429a      	cmp	r2, r3
 8004418:	d908      	bls.n	800442c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800441a:	4b56      	ldr	r3, [pc, #344]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4953      	ldr	r1, [pc, #332]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004428:	4313      	orrs	r3, r2
 800442a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b4d      	ldr	r3, [pc, #308]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	429a      	cmp	r2, r3
 8004446:	d908      	bls.n	800445a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b4a      	ldr	r3, [pc, #296]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f023 020f 	bic.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4947      	ldr	r1, [pc, #284]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004456:	4313      	orrs	r3, r2
 8004458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d055      	beq.n	8004512 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004466:	4b43      	ldr	r3, [pc, #268]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4940      	ldr	r1, [pc, #256]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004474:	4313      	orrs	r3, r2
 8004476:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004480:	4b3c      	ldr	r3, [pc, #240]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0f6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004498:	4b36      	ldr	r3, [pc, #216]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d115      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0ea      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044b0:	4b30      	ldr	r3, [pc, #192]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0de      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0d6      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044d0:	4b28      	ldr	r3, [pc, #160]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 0207 	bic.w	r2, r3, #7
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4925      	ldr	r1, [pc, #148]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e2:	f7fd fc85 	bl	8001df0 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd fc81 	bl	8001df0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0be      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	4b1c      	ldr	r3, [pc, #112]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	429a      	cmp	r2, r3
 8004510:	d1eb      	bne.n	80044ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	429a      	cmp	r2, r3
 800452c:	d208      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452e:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	490e      	ldr	r1, [pc, #56]	@ (8004574 <HAL_RCC_ClockConfig+0x244>)
 800453c:	4313      	orrs	r3, r2
 800453e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d214      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 020f 	bic.w	r2, r3, #15
 8004556:	4906      	ldr	r1, [pc, #24]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <HAL_RCC_ClockConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e086      	b.n	800467e <HAL_RCC_ClockConfig+0x34e>
 8004570:	52002000 	.word	0x52002000
 8004574:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	4b3f      	ldr	r3, [pc, #252]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004590:	429a      	cmp	r2, r3
 8004592:	d208      	bcs.n	80045a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004594:	4b3c      	ldr	r3, [pc, #240]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4939      	ldr	r1, [pc, #228]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045be:	429a      	cmp	r2, r3
 80045c0:	d208      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	492e      	ldr	r1, [pc, #184]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d208      	bcs.n	8004602 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4922      	ldr	r1, [pc, #136]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800461a:	429a      	cmp	r2, r3
 800461c:	d208      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800461e:	4b1a      	ldr	r3, [pc, #104]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4917      	ldr	r1, [pc, #92]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 800462c:	4313      	orrs	r3, r2
 800462e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004630:	f000 f834 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4912      	ldr	r1, [pc, #72]	@ (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800464e:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_RCC_ClockConfig+0x358>)
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	4a0d      	ldr	r2, [pc, #52]	@ (800468c <HAL_RCC_ClockConfig+0x35c>)
 8004658:	5cd3      	ldrb	r3, [r2, r3]
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
 8004664:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x360>)
 8004666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004668:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <HAL_RCC_ClockConfig+0x364>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <HAL_RCC_ClockConfig+0x368>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fb72 	bl	8001d5c <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
 800468c:	0800c15c 	.word	0x0800c15c
 8004690:	24000264 	.word	0x24000264
 8004694:	24000260 	.word	0x24000260
 8004698:	24000268 	.word	0x24000268

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	@ 0x24
 80046a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a2:	4bb3      	ldr	r3, [pc, #716]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046aa:	2b18      	cmp	r3, #24
 80046ac:	f200 8155 	bhi.w	800495a <HAL_RCC_GetSysClockFreq+0x2be>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800495b 	.word	0x0800495b
 80046c0:	0800495b 	.word	0x0800495b
 80046c4:	0800495b 	.word	0x0800495b
 80046c8:	0800495b 	.word	0x0800495b
 80046cc:	0800495b 	.word	0x0800495b
 80046d0:	0800495b 	.word	0x0800495b
 80046d4:	0800495b 	.word	0x0800495b
 80046d8:	08004743 	.word	0x08004743
 80046dc:	0800495b 	.word	0x0800495b
 80046e0:	0800495b 	.word	0x0800495b
 80046e4:	0800495b 	.word	0x0800495b
 80046e8:	0800495b 	.word	0x0800495b
 80046ec:	0800495b 	.word	0x0800495b
 80046f0:	0800495b 	.word	0x0800495b
 80046f4:	0800495b 	.word	0x0800495b
 80046f8:	08004749 	.word	0x08004749
 80046fc:	0800495b 	.word	0x0800495b
 8004700:	0800495b 	.word	0x0800495b
 8004704:	0800495b 	.word	0x0800495b
 8004708:	0800495b 	.word	0x0800495b
 800470c:	0800495b 	.word	0x0800495b
 8004710:	0800495b 	.word	0x0800495b
 8004714:	0800495b 	.word	0x0800495b
 8004718:	0800474f 	.word	0x0800474f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800471c:	4b94      	ldr	r3, [pc, #592]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004728:	4b91      	ldr	r3, [pc, #580]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a90      	ldr	r2, [pc, #576]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800473a:	e111      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800473c:	4b8d      	ldr	r3, [pc, #564]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800473e:	61bb      	str	r3, [r7, #24]
      break;
 8004740:	e10e      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004742:	4b8d      	ldr	r3, [pc, #564]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
      break;
 8004746:	e10b      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004748:	4b8c      	ldr	r3, [pc, #560]	@ (800497c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800474a:	61bb      	str	r3, [r7, #24]
      break;
 800474c:	e108      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800474e:	4b88      	ldr	r3, [pc, #544]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004758:	4b85      	ldr	r3, [pc, #532]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004762:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004764:	4b82      	ldr	r3, [pc, #520]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800476e:	4b80      	ldr	r3, [pc, #512]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80e1 	beq.w	8004954 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b02      	cmp	r3, #2
 8004796:	f000 8083 	beq.w	80048a0 <HAL_RCC_GetSysClockFreq+0x204>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b02      	cmp	r3, #2
 800479e:	f200 80a1 	bhi.w	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x114>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d056      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x1c0>
 80047ae:	e099      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02d      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b62      	ldr	r3, [pc, #392]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004816:	e087      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004984 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b51      	ldr	r3, [pc, #324]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800485a:	e065      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b40      	ldr	r3, [pc, #256]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004882:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489e:	e043      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800498c <HAL_RCC_GetSysClockFreq+0x2f0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048e2:	e021      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004988 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a02 	vldr	s12, [r7, #8]
 800490a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004980 <HAL_RCC_GetSysClockFreq+0x2e4>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004926:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004928:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004932:	3301      	adds	r3, #1
 8004934:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 3a90 	vmov	r3, s15
 8004950:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004952:	e005      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
      break;
 8004958:	e002      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800495a:	4b07      	ldr	r3, [pc, #28]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800495c:	61bb      	str	r3, [r7, #24]
      break;
 800495e:	bf00      	nop
  }

  return sysclockfreq;
 8004960:	69bb      	ldr	r3, [r7, #24]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3724      	adds	r7, #36	@ 0x24
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58024400 	.word	0x58024400
 8004974:	03d09000 	.word	0x03d09000
 8004978:	003d0900 	.word	0x003d0900
 800497c:	017d7840 	.word	0x017d7840
 8004980:	46000000 	.word	0x46000000
 8004984:	4c742400 	.word	0x4c742400
 8004988:	4a742400 	.word	0x4a742400
 800498c:	4bbebc20 	.word	0x4bbebc20

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004996:	f7ff fe81 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490f      	ldr	r1, [pc, #60]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	4a09      	ldr	r2, [pc, #36]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a07      	ldr	r2, [pc, #28]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049ce:	4a07      	ldr	r2, [pc, #28]	@ (80049ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049d4:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	58024400 	.word	0x58024400
 80049e4:	0800c15c 	.word	0x0800c15c
 80049e8:	24000264 	.word	0x24000264
 80049ec:	24000260 	.word	0x24000260

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049f4:	f7ff ffcc 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	@ (8004a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	0800c15c 	.word	0x0800c15c

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a20:	f7ff ffb6 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4904      	ldr	r1, [pc, #16]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58024400 	.word	0x58024400
 8004a44:	0800c15c 	.word	0x0800c15c

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a4c:	b0ca      	sub	sp, #296	@ 0x128
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	ea54 0305 	orrs.w	r3, r4, r5
 8004a72:	d049      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a7e:	d02f      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a84:	d828      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a8a:	d01a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a90:	d822      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a9a:	d007      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9e:	4bb8      	ldr	r3, [pc, #736]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	4ab7      	ldr	r2, [pc, #732]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004aaa:	e01a      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f001 fc8f 	bl	80063d8 <RCCEx_PLL2_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ac0:	e00f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	3328      	adds	r3, #40	@ 0x28
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fd36 	bl	800653c <RCCEx_PLL3_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ad6:	e004      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004aea:	4ba5      	ldr	r3, [pc, #660]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004af8:	4aa1      	ldr	r2, [pc, #644]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b14:	f04f 0900 	mov.w	r9, #0
 8004b18:	ea58 0309 	orrs.w	r3, r8, r9
 8004b1c:	d047      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d82a      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b28:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b45 	.word	0x08004b45
 8004b34:	08004b53 	.word	0x08004b53
 8004b38:	08004b69 	.word	0x08004b69
 8004b3c:	08004b87 	.word	0x08004b87
 8004b40:	08004b87 	.word	0x08004b87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b44:	4b8e      	ldr	r3, [pc, #568]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	4a8d      	ldr	r2, [pc, #564]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b50:	e01a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	3308      	adds	r3, #8
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 fc3c 	bl	80063d8 <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b66:	e00f      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	3328      	adds	r3, #40	@ 0x28
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fce3 	bl	800653c <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e004      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b84:	e000      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b90:	4b7b      	ldr	r3, [pc, #492]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b94:	f023 0107 	bic.w	r1, r3, #7
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	4a78      	ldr	r2, [pc, #480]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004bba:	f04f 0b00 	mov.w	fp, #0
 8004bbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bc2:	d04c      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bce:	d030      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd4:	d829      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bd8:	d02d      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bdc:	d825      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bde:	2b80      	cmp	r3, #128	@ 0x80
 8004be0:	d018      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004be2:	2b80      	cmp	r3, #128	@ 0x80
 8004be4:	d821      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004bea:	2b40      	cmp	r3, #64	@ 0x40
 8004bec:	d007      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004bee:	e01c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf0:	4b63      	ldr	r3, [pc, #396]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	4a62      	ldr	r2, [pc, #392]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bfc:	e01c      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	3308      	adds	r3, #8
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 fbe6 	bl	80063d8 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c12:	e011      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	3328      	adds	r3, #40	@ 0x28
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 fc8d 	bl	800653c <RCCEx_PLL3_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c40:	4b4f      	ldr	r3, [pc, #316]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c54:	e003      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004c74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	d053      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c8a:	d035      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c90:	d82e      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c96:	d031      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c9c:	d828      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca2:	d01a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca8:	d822      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004cae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb2:	d007      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004cb4:	e01c      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb6:	4b32      	ldr	r3, [pc, #200]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	4a31      	ldr	r2, [pc, #196]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cc2:	e01c      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 fb83 	bl	80063d8 <RCCEx_PLL2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cd8:	e011      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cde:	3328      	adds	r3, #40	@ 0x28
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 fc2a 	bl	800653c <RCCEx_PLL3_Config>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cee:	e006      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cf6:	e002      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d06:	4b1e      	ldr	r3, [pc, #120]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d16:	4a1a      	ldr	r2, [pc, #104]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d1c:	e003      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d36:	2300      	movs	r3, #0
 8004d38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d056      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d52:	d038      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d58:	d831      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d5e:	d034      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d64:	d82b      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d6a:	d01d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d70:	d825      	bhi.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d7c:	e01f      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4ba2      	ldr	r3, [pc, #648]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	4aa1      	ldr	r2, [pc, #644]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d90:	e01c      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	3308      	adds	r3, #8
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fb1c 	bl	80063d8 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004da6:	e011      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dac:	3328      	adds	r3, #40	@ 0x28
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 fbc3 	bl	800653c <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004dd4:	4b8e      	ldr	r3, [pc, #568]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004de4:	4a8a      	ldr	r2, [pc, #552]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d03a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e1a:	2b30      	cmp	r3, #48	@ 0x30
 8004e1c:	d01f      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e1e:	2b30      	cmp	r3, #48	@ 0x30
 8004e20:	d819      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d00c      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d815      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d019      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d111      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e32:	4b77      	ldr	r3, [pc, #476]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a76      	ldr	r2, [pc, #472]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e3e:	e011      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	3308      	adds	r3, #8
 8004e46:	2102      	movs	r1, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 fac5 	bl	80063d8 <RCCEx_PLL2_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e54:	e006      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e5c:	e002      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e6c:	4b68      	ldr	r3, [pc, #416]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7a:	4a65      	ldr	r2, [pc, #404]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e80:	e003      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	d051      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb4:	d035      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eba:	d82e      	bhi.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ebc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ec0:	d031      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ec2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ec6:	d828      	bhi.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ecc:	d01a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed2:	d822      	bhi.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004edc:	d007      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ede:	e01c      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004eec:	e01c      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 fa6e 	bl	80063d8 <RCCEx_PLL2_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f02:	e011      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	3328      	adds	r3, #40	@ 0x28
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 fb15 	bl	800653c <RCCEx_PLL3_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f18:	e006      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f30:	4b37      	ldr	r3, [pc, #220]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3e:	4a34      	ldr	r2, [pc, #208]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	d056      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f78:	d033      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f7e:	d82c      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f84:	d02f      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f8a:	d826      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f90:	d02b      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f96:	d820      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f9c:	d012      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fa2:	d81a      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d022      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fac:	d115      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 fa0e 	bl	80063d8 <RCCEx_PLL2_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fc2:	e015      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc8:	3328      	adds	r3, #40	@ 0x28
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fab5 	bl	800653c <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fe0:	e006      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e004      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e002      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fea:	bf00      	nop
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005006:	4a02      	ldr	r2, [pc, #8]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005008:	430b      	orrs	r3, r1
 800500a:	6513      	str	r3, [r2, #80]	@ 0x50
 800500c:	e006      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800500e:	bf00      	nop
 8005010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005032:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005036:	460b      	mov	r3, r1
 8005038:	4313      	orrs	r3, r2
 800503a:	d055      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005048:	d033      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800504a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800504e:	d82c      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005054:	d02f      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505a:	d826      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800505c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005060:	d02b      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005062:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005066:	d820      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800506c:	d012      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800506e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005072:	d81a      	bhi.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d022      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800507c:	d115      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	3308      	adds	r3, #8
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f9a6 	bl	80063d8 <RCCEx_PLL2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005092:	e015      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005098:	3328      	adds	r3, #40	@ 0x28
 800509a:	2101      	movs	r1, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f001 fa4d 	bl	800653c <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050a8:	e00a      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b0:	e006      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050b2:	bf00      	nop
 80050b4:	e004      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050b6:	bf00      	nop
 80050b8:	e002      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050ba:	bf00      	nop
 80050bc:	e000      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050c8:	4ba3      	ldr	r3, [pc, #652]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050da:	430b      	orrs	r3, r1
 80050dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005102:	460b      	mov	r3, r1
 8005104:	4313      	orrs	r3, r2
 8005106:	d037      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005112:	d00e      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005118:	d816      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005122:	d111      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005124:	4b8c      	ldr	r3, [pc, #560]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	4a8b      	ldr	r2, [pc, #556]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800512a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005130:	e00f      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005136:	3308      	adds	r3, #8
 8005138:	2101      	movs	r1, #1
 800513a:	4618      	mov	r0, r3
 800513c:	f001 f94c 	bl	80063d8 <RCCEx_PLL2_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005146:	e004      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800515a:	4b7f      	ldr	r3, [pc, #508]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a7b      	ldr	r2, [pc, #492]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800516a:	430b      	orrs	r3, r1
 800516c:	6513      	str	r3, [r2, #80]	@ 0x50
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800518e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005192:	460b      	mov	r3, r1
 8005194:	4313      	orrs	r3, r2
 8005196:	d039      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d81c      	bhi.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80051a2:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051e5 	.word	0x080051e5
 80051ac:	080051b9 	.word	0x080051b9
 80051b0:	080051c7 	.word	0x080051c7
 80051b4:	080051e5 	.word	0x080051e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b8:	4b67      	ldr	r3, [pc, #412]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	4a66      	ldr	r2, [pc, #408]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051c4:	e00f      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	3308      	adds	r3, #8
 80051cc:	2102      	movs	r1, #2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 f902 	bl	80063d8 <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051da:	e004      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80051e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f2:	f023 0103 	bic.w	r1, r3, #3
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fc:	4a56      	ldr	r2, [pc, #344]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051fe:	430b      	orrs	r3, r1
 8005200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005202:	e003      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800521c:	2300      	movs	r3, #0
 800521e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005222:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	f000 809f 	beq.w	800536c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522e:	4b4b      	ldr	r3, [pc, #300]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a4a      	ldr	r2, [pc, #296]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800523a:	f7fc fdd9 	bl	8001df0 <HAL_GetTick>
 800523e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005242:	e00b      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005244:	f7fc fdd4 	bl	8001df0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b64      	cmp	r3, #100	@ 0x64
 8005252:	d903      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800525a:	e005      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800525c:	4b3f      	ldr	r3, [pc, #252]	@ (800535c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ed      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800526c:	2b00      	cmp	r3, #0
 800526e:	d179      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005270:	4b39      	ldr	r3, [pc, #228]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005272:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800527c:	4053      	eors	r3, r2
 800527e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005282:	2b00      	cmp	r3, #0
 8005284:	d015      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005286:	4b34      	ldr	r3, [pc, #208]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005292:	4b31      	ldr	r3, [pc, #196]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	4a30      	ldr	r2, [pc, #192]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529e:	4b2e      	ldr	r3, [pc, #184]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052be:	d118      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fc fd96 	bl	8001df0 <HAL_GetTick>
 80052c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c8:	e00d      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fc fd91 	bl	8001df0 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052da:	429a      	cmp	r2, r3
 80052dc:	d903      	bls.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80052e4:	e005      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0eb      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80052f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d129      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800530a:	d10e      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800530c:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800531c:	091a      	lsrs	r2, r3, #4
 800531e:	4b10      	ldr	r3, [pc, #64]	@ (8005360 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005320:	4013      	ands	r3, r2
 8005322:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	430b      	orrs	r3, r1
 8005326:	6113      	str	r3, [r2, #16]
 8005328:	e005      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	4a0a      	ldr	r2, [pc, #40]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005330:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005334:	6113      	str	r3, [r2, #16]
 8005336:	4b08      	ldr	r3, [pc, #32]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005338:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005346:	4a04      	ldr	r2, [pc, #16]	@ (8005358 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005348:	430b      	orrs	r3, r1
 800534a:	6713      	str	r3, [r2, #112]	@ 0x70
 800534c:	e00e      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005356:	e009      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005358:	58024400 	.word	0x58024400
 800535c:	58024800 	.word	0x58024800
 8005360:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f002 0301 	and.w	r3, r2, #1
 8005378:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005382:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005386:	460b      	mov	r3, r1
 8005388:	4313      	orrs	r3, r2
 800538a:	f000 8089 	beq.w	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005394:	2b28      	cmp	r3, #40	@ 0x28
 8005396:	d86b      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005398:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	08005479 	.word	0x08005479
 80053a4:	08005471 	.word	0x08005471
 80053a8:	08005471 	.word	0x08005471
 80053ac:	08005471 	.word	0x08005471
 80053b0:	08005471 	.word	0x08005471
 80053b4:	08005471 	.word	0x08005471
 80053b8:	08005471 	.word	0x08005471
 80053bc:	08005471 	.word	0x08005471
 80053c0:	08005445 	.word	0x08005445
 80053c4:	08005471 	.word	0x08005471
 80053c8:	08005471 	.word	0x08005471
 80053cc:	08005471 	.word	0x08005471
 80053d0:	08005471 	.word	0x08005471
 80053d4:	08005471 	.word	0x08005471
 80053d8:	08005471 	.word	0x08005471
 80053dc:	08005471 	.word	0x08005471
 80053e0:	0800545b 	.word	0x0800545b
 80053e4:	08005471 	.word	0x08005471
 80053e8:	08005471 	.word	0x08005471
 80053ec:	08005471 	.word	0x08005471
 80053f0:	08005471 	.word	0x08005471
 80053f4:	08005471 	.word	0x08005471
 80053f8:	08005471 	.word	0x08005471
 80053fc:	08005471 	.word	0x08005471
 8005400:	08005479 	.word	0x08005479
 8005404:	08005471 	.word	0x08005471
 8005408:	08005471 	.word	0x08005471
 800540c:	08005471 	.word	0x08005471
 8005410:	08005471 	.word	0x08005471
 8005414:	08005471 	.word	0x08005471
 8005418:	08005471 	.word	0x08005471
 800541c:	08005471 	.word	0x08005471
 8005420:	08005479 	.word	0x08005479
 8005424:	08005471 	.word	0x08005471
 8005428:	08005471 	.word	0x08005471
 800542c:	08005471 	.word	0x08005471
 8005430:	08005471 	.word	0x08005471
 8005434:	08005471 	.word	0x08005471
 8005438:	08005471 	.word	0x08005471
 800543c:	08005471 	.word	0x08005471
 8005440:	08005479 	.word	0x08005479
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	3308      	adds	r3, #8
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f000 ffc3 	bl	80063d8 <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005458:	e00f      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	3328      	adds	r3, #40	@ 0x28
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f001 f86a 	bl	800653c <RCCEx_PLL3_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800546e:	e004      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005482:	4bbf      	ldr	r3, [pc, #764]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005486:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005490:	4abb      	ldr	r2, [pc, #748]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005492:	430b      	orrs	r3, r1
 8005494:	6553      	str	r3, [r2, #84]	@ 0x54
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800549c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f002 0302 	and.w	r3, r2, #2
 80054ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d041      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d824      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	0800551d 	.word	0x0800551d
 80054d4:	080054e9 	.word	0x080054e9
 80054d8:	080054ff 	.word	0x080054ff
 80054dc:	0800551d 	.word	0x0800551d
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	0800551d 	.word	0x0800551d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ec:	3308      	adds	r3, #8
 80054ee:	2101      	movs	r1, #1
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 ff71 	bl	80063d8 <RCCEx_PLL2_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054fc:	e00f      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	3328      	adds	r3, #40	@ 0x28
 8005504:	2101      	movs	r1, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f001 f818 	bl	800653c <RCCEx_PLL3_Config>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005512:	e004      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800551c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005526:	4b96      	ldr	r3, [pc, #600]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	f023 0107 	bic.w	r1, r3, #7
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005534:	4a92      	ldr	r2, [pc, #584]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005536:	430b      	orrs	r3, r1
 8005538:	6553      	str	r3, [r2, #84]	@ 0x54
 800553a:	e003      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f002 0304 	and.w	r3, r2, #4
 8005550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800555a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800555e:	460b      	mov	r3, r1
 8005560:	4313      	orrs	r3, r2
 8005562:	d044      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800556c:	2b05      	cmp	r3, #5
 800556e:	d825      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055c5 	.word	0x080055c5
 800557c:	08005591 	.word	0x08005591
 8005580:	080055a7 	.word	0x080055a7
 8005584:	080055c5 	.word	0x080055c5
 8005588:	080055c5 	.word	0x080055c5
 800558c:	080055c5 	.word	0x080055c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005594:	3308      	adds	r3, #8
 8005596:	2101      	movs	r1, #1
 8005598:	4618      	mov	r0, r3
 800559a:	f000 ff1d 	bl	80063d8 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055a4:	e00f      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055aa:	3328      	adds	r3, #40	@ 0x28
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 ffc4 	bl	800653c <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055ba:	e004      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	f023 0107 	bic.w	r1, r3, #7
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055de:	4a68      	ldr	r2, [pc, #416]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e4:	e003      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f002 0320 	and.w	r3, r2, #32
 80055fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055fe:	2300      	movs	r3, #0
 8005600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005608:	460b      	mov	r3, r1
 800560a:	4313      	orrs	r3, r2
 800560c:	d055      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561a:	d033      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800561c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005620:	d82c      	bhi.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005626:	d02f      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562c:	d826      	bhi.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800562e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005632:	d02b      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005634:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005638:	d820      	bhi.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800563a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800563e:	d012      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005644:	d81a      	bhi.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d022      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800564a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800564e:	d115      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	3308      	adds	r3, #8
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f000 febd 	bl	80063d8 <RCCEx_PLL2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005664:	e015      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	3328      	adds	r3, #40	@ 0x28
 800566c:	2102      	movs	r1, #2
 800566e:	4618      	mov	r0, r3
 8005670:	f000 ff64 	bl	800653c <RCCEx_PLL3_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800567a:	e00a      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005682:	e006      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005684:	bf00      	nop
 8005686:	e004      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569a:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056aa:	4a35      	ldr	r2, [pc, #212]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4313      	orrs	r3, r2
 80056d8:	d058      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056e6:	d033      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80056e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056ec:	d82c      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f2:	d02f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f8:	d826      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056fe:	d02b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005704:	d820      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570a:	d012      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005710:	d81a      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d022      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800571a:	d115      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005720:	3308      	adds	r3, #8
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fe57 	bl	80063d8 <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005730:	e015      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	3328      	adds	r3, #40	@ 0x28
 8005738:	2102      	movs	r1, #2
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fefe 	bl	800653c <RCCEx_PLL3_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005746:	e00a      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800574e:	e006      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005750:	bf00      	nop
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10e      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005766:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005776:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005778:	430b      	orrs	r3, r1
 800577a:	6593      	str	r3, [r2, #88]	@ 0x58
 800577c:	e006      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800577e:	bf00      	nop
 8005780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800579c:	2300      	movs	r3, #0
 800579e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d055      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057b8:	d033      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057be:	d82c      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c4:	d02f      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ca:	d826      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057d0:	d02b      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057d6:	d820      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057dc:	d012      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80057de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057e2:	d81a      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ec:	d115      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	3308      	adds	r3, #8
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fdee 	bl	80063d8 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005802:	e015      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3328      	adds	r3, #40	@ 0x28
 800580a:	2102      	movs	r1, #2
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fe95 	bl	800653c <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005818:	e00a      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005822:	bf00      	nop
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005838:	4ba1      	ldr	r3, [pc, #644]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005848:	4a9d      	ldr	r2, [pc, #628]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584a:	430b      	orrs	r3, r1
 800584c:	6593      	str	r3, [r2, #88]	@ 0x58
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f002 0308 	and.w	r3, r2, #8
 8005864:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800586e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d01e      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005884:	d10c      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	2102      	movs	r1, #2
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fe54 	bl	800653c <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058a0:	4b87      	ldr	r3, [pc, #540]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b0:	4a83      	ldr	r2, [pc, #524]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f002 0310 	and.w	r3, r2, #16
 80058c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d01e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e2:	d10c      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	3328      	adds	r3, #40	@ 0x28
 80058ea:	2102      	movs	r1, #2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fe25 	bl	800653c <RCCEx_PLL3_Config>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058fe:	4b70      	ldr	r3, [pc, #448]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005902:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800590e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005910:	430b      	orrs	r3, r1
 8005912:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005924:	2300      	movs	r3, #0
 8005926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800592a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d03e      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800593c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005940:	d022      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005946:	d81b      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005950:	d00b      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005952:	e015      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	3308      	adds	r3, #8
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fd3b 	bl	80063d8 <RCCEx_PLL2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005968:	e00f      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	3328      	adds	r3, #40	@ 0x28
 8005970:	2102      	movs	r1, #2
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fde2 	bl	800653c <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800597e:	e004      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005986:	e000      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005992:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005996:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059a2:	4a47      	ldr	r2, [pc, #284]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059c0:	2300      	movs	r3, #0
 80059c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80059c8:	460b      	mov	r3, r1
 80059ca:	4313      	orrs	r3, r2
 80059cc:	d03b      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059da:	d01f      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80059dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059e0:	d818      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059e6:	d003      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80059e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ec:	d007      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80059ee:	e011      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f0:	4b33      	ldr	r3, [pc, #204]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	4a32      	ldr	r2, [pc, #200]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059fc:	e00f      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a02:	3328      	adds	r3, #40	@ 0x28
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fd98 	bl	800653c <RCCEx_PLL3_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a12:	e004      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a26:	4b26      	ldr	r3, [pc, #152]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a36:	4a22      	ldr	r2, [pc, #136]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a3c:	e003      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a52:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a54:	2300      	movs	r3, #0
 8005a56:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d034      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a70:	d007      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a72:	e011      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a74:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	4a11      	ldr	r2, [pc, #68]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a80:	e00e      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	3308      	adds	r3, #8
 8005a88:	2102      	movs	r1, #2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fca4 	bl	80063d8 <RCCEx_PLL2_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10d      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab6:	4a02      	ldr	r2, [pc, #8]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005abc:	e006      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ada:	2300      	movs	r3, #0
 8005adc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ade:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d00c      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aec:	3328      	adds	r3, #40	@ 0x28
 8005aee:	2102      	movs	r1, #2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fd23 	bl	800653c <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b10:	2300      	movs	r3, #0
 8005b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	d038      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b2a:	d018      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b30:	d811      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b36:	d014      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b3c:	d80b      	bhi.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d011      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b46:	d106      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b48:	4bc3      	ldr	r3, [pc, #780]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	4ac2      	ldr	r2, [pc, #776]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b54:	e008      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b5c:	e004      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b70:	4bb9      	ldr	r3, [pc, #740]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b80:	4ab5      	ldr	r2, [pc, #724]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b82:	430b      	orrs	r3, r1
 8005b84:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b86:	e003      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ba2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bac:	4baa      	ldr	r3, [pc, #680]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bba:	4aa7      	ldr	r2, [pc, #668]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bce:	2300      	movs	r3, #0
 8005bd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bdc:	4b9e      	ldr	r3, [pc, #632]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bec:	4a9a      	ldr	r2, [pc, #616]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c00:	2300      	movs	r3, #0
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c0e:	4b92      	ldr	r3, [pc, #584]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c12:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c1c:	4a8e      	ldr	r2, [pc, #568]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c30:	2300      	movs	r3, #0
 8005c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	d00e      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c3e:	4b86      	ldr	r3, [pc, #536]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	4a85      	ldr	r2, [pc, #532]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c48:	6113      	str	r3, [r2, #16]
 8005c4a:	4b83      	ldr	r3, [pc, #524]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c4c:	6919      	ldr	r1, [r3, #16]
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c56:	4a80      	ldr	r2, [pc, #512]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d009      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c78:	4b77      	ldr	r3, [pc, #476]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c86:	4a74      	ldr	r2, [pc, #464]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cb8:	4a67      	ldr	r2, [pc, #412]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d011      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	3308      	adds	r3, #8
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fb78 	bl	80063d8 <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	2100      	movs	r1, #0
 8005d08:	6239      	str	r1, [r7, #32]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d10:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d14:	460b      	mov	r3, r1
 8005d16:	4313      	orrs	r3, r2
 8005d18:	d011      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1e:	3308      	adds	r3, #8
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fb58 	bl	80063d8 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	2100      	movs	r1, #0
 8005d48:	61b9      	str	r1, [r7, #24]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d54:	460b      	mov	r3, r1
 8005d56:	4313      	orrs	r3, r2
 8005d58:	d011      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	3308      	adds	r3, #8
 8005d60:	2102      	movs	r1, #2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fb38 	bl	80063d8 <RCCEx_PLL2_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	2100      	movs	r1, #0
 8005d88:	6139      	str	r1, [r7, #16]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d94:	460b      	mov	r3, r1
 8005d96:	4313      	orrs	r3, r2
 8005d98:	d011      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	3328      	adds	r3, #40	@ 0x28
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fbca 	bl	800653c <RCCEx_PLL3_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	d011      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	3328      	adds	r3, #40	@ 0x28
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fbaa 	bl	800653c <RCCEx_PLL3_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	2100      	movs	r1, #0
 8005e08:	6039      	str	r1, [r7, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d011      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	3328      	adds	r3, #40	@ 0x28
 8005e20:	2102      	movs	r1, #2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb8a 	bl	800653c <RCCEx_PLL3_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e3e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e52:	46bd      	mov	sp, r7
 8005e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e58:	58024400 	.word	0x58024400

08005e5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e60:	f7fe fd96 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	4904      	ldr	r1, [pc, #16]	@ (8005e84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e72:	5ccb      	ldrb	r3, [r1, r3]
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	58024400 	.word	0x58024400
 8005e84:	0800c15c 	.word	0x0800c15c

08005e88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b089      	sub	sp, #36	@ 0x24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e90:	4ba1      	ldr	r3, [pc, #644]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9e:	0b1b      	lsrs	r3, r3, #12
 8005ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005eb2:	4b99      	ldr	r3, [pc, #612]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8111 	beq.w	80060f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	f000 8083 	beq.w	8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	f200 80a1 	bhi.w	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d056      	beq.n	8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ef2:	e099      	b.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef4:	4b88      	ldr	r3, [pc, #544]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d02d      	beq.n	8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f00:	4b85      	ldr	r3, [pc, #532]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	08db      	lsrs	r3, r3, #3
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	4a84      	ldr	r2, [pc, #528]	@ (800611c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f5a:	e087      	b.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9e:	e065      	b.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b59      	ldr	r3, [pc, #356]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe2:	e043      	b.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800612c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b48      	ldr	r3, [pc, #288]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a03 	vldr	s12, [r7, #12]
 800600a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006026:	e021      	b.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b37      	ldr	r3, [pc, #220]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a03 	vldr	s12, [r7, #12]
 800604e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800606c:	4b2a      	ldr	r3, [pc, #168]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	0a5b      	lsrs	r3, r3, #9
 8006072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006086:	edd7 6a07 	vldr	s13, [r7, #28]
 800608a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006092:	ee17 2a90 	vmov	r2, s15
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800609a:	4b1f      	ldr	r3, [pc, #124]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800609c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c0:	ee17 2a90 	vmov	r2, s15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060c8:	4b13      	ldr	r3, [pc, #76]	@ (8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ee:	ee17 2a90 	vmov	r2, s15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060f6:	e008      	b.n	800610a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
}
 800610a:	bf00      	nop
 800610c:	3724      	adds	r7, #36	@ 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	58024400 	.word	0x58024400
 800611c:	03d09000 	.word	0x03d09000
 8006120:	46000000 	.word	0x46000000
 8006124:	4c742400 	.word	0x4c742400
 8006128:	4a742400 	.word	0x4a742400
 800612c:	4bbebc20 	.word	0x4bbebc20

08006130 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	@ 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006138:	4ba1      	ldr	r3, [pc, #644]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006142:	4b9f      	ldr	r3, [pc, #636]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006146:	0d1b      	lsrs	r3, r3, #20
 8006148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800614c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800614e:	4b9c      	ldr	r3, [pc, #624]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800615a:	4b99      	ldr	r3, [pc, #612]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615e:	08db      	lsrs	r3, r3, #3
 8006160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8111 	beq.w	80063a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b02      	cmp	r3, #2
 8006182:	f000 8083 	beq.w	800628c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b02      	cmp	r3, #2
 800618a:	f200 80a1 	bhi.w	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d056      	beq.n	8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800619a:	e099      	b.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800619c:	4b88      	ldr	r3, [pc, #544]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d02d      	beq.n	8006204 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061a8:	4b85      	ldr	r3, [pc, #532]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	08db      	lsrs	r3, r3, #3
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	4a84      	ldr	r2, [pc, #528]	@ (80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d2:	4b7b      	ldr	r3, [pc, #492]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006202:	e087      	b.n	8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006216:	4b6a      	ldr	r3, [pc, #424]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006226:	ed97 6a03 	vldr	s12, [r7, #12]
 800622a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800622e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800623a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006246:	e065      	b.n	8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625a:	4b59      	ldr	r3, [pc, #356]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626a:	ed97 6a03 	vldr	s12, [r7, #12]
 800626e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800627e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800628a:	e043      	b.n	8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800629a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629e:	4b48      	ldr	r3, [pc, #288]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ce:	e021      	b.n	8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e2:	4b37      	ldr	r3, [pc, #220]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800630e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006312:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006314:	4b2a      	ldr	r3, [pc, #168]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006318:	0a5b      	lsrs	r3, r3, #9
 800631a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800632a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800632e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633a:	ee17 2a90 	vmov	r2, s15
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800635c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006368:	ee17 2a90 	vmov	r2, s15
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006370:	4b13      	ldr	r3, [pc, #76]	@ (80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	0e1b      	lsrs	r3, r3, #24
 8006376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800638a:	edd7 6a07 	vldr	s13, [r7, #28]
 800638e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006396:	ee17 2a90 	vmov	r2, s15
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800639e:	e008      	b.n	80063b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	609a      	str	r2, [r3, #8]
}
 80063b2:	bf00      	nop
 80063b4:	3724      	adds	r7, #36	@ 0x24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	58024400 	.word	0x58024400
 80063c4:	03d09000 	.word	0x03d09000
 80063c8:	46000000 	.word	0x46000000
 80063cc:	4c742400 	.word	0x4c742400
 80063d0:	4a742400 	.word	0x4a742400
 80063d4:	4bbebc20 	.word	0x4bbebc20

080063d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063e6:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d101      	bne.n	80063f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e099      	b.n	800652a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063f6:	4b4f      	ldr	r3, [pc, #316]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4e      	ldr	r2, [pc, #312]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80063fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006402:	f7fb fcf5 	bl	8001df0 <HAL_GetTick>
 8006406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006408:	e008      	b.n	800641c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800640a:	f7fb fcf1 	bl	8001df0 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e086      	b.n	800652a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800641c:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006428:	4b42      	ldr	r3, [pc, #264]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	493f      	ldr	r1, [pc, #252]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 8006438:	4313      	orrs	r3, r2
 800643a:	628b      	str	r3, [r1, #40]	@ 0x28
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	3b01      	subs	r3, #1
 8006442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	3b01      	subs	r3, #1
 800644c:	025b      	lsls	r3, r3, #9
 800644e:	b29b      	uxth	r3, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	3b01      	subs	r3, #1
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800646c:	4931      	ldr	r1, [pc, #196]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006472:	4b30      	ldr	r3, [pc, #192]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	492d      	ldr	r1, [pc, #180]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 8006480:	4313      	orrs	r3, r2
 8006482:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	f023 0220 	bic.w	r2, r3, #32
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	4928      	ldr	r1, [pc, #160]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 8006492:	4313      	orrs	r3, r2
 8006494:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006496:	4b27      	ldr	r3, [pc, #156]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649a:	4a26      	ldr	r2, [pc, #152]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 800649c:	f023 0310 	bic.w	r3, r3, #16
 80064a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80064a2:	4b24      	ldr	r3, [pc, #144]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064a6:	4b24      	ldr	r3, [pc, #144]	@ (8006538 <RCCEx_PLL2_Config+0x160>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	69d2      	ldr	r2, [r2, #28]
 80064ae:	00d2      	lsls	r2, r2, #3
 80064b0:	4920      	ldr	r1, [pc, #128]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064bc:	f043 0310 	orr.w	r3, r3, #16
 80064c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	4a19      	ldr	r2, [pc, #100]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064d4:	e00f      	b.n	80064f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064dc:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	4a14      	ldr	r2, [pc, #80]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064e8:	e005      	b.n	80064f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064ea:	4b12      	ldr	r3, [pc, #72]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	4a11      	ldr	r2, [pc, #68]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 80064fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006502:	f7fb fc75 	bl	8001df0 <HAL_GetTick>
 8006506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006508:	e008      	b.n	800651c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800650a:	f7fb fc71 	bl	8001df0 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e006      	b.n	800652a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <RCCEx_PLL2_Config+0x15c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
 8006538:	ffff0007 	.word	0xffff0007

0800653c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800654a:	4b53      	ldr	r3, [pc, #332]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d101      	bne.n	800655a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e099      	b.n	800668e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800655a:	4b4f      	ldr	r3, [pc, #316]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4e      	ldr	r2, [pc, #312]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006566:	f7fb fc43 	bl	8001df0 <HAL_GetTick>
 800656a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800656c:	e008      	b.n	8006580 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800656e:	f7fb fc3f 	bl	8001df0 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e086      	b.n	800668e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006580:	4b45      	ldr	r3, [pc, #276]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800658c:	4b42      	ldr	r3, [pc, #264]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	051b      	lsls	r3, r3, #20
 800659a:	493f      	ldr	r1, [pc, #252]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800659c:	4313      	orrs	r3, r2
 800659e:	628b      	str	r3, [r1, #40]	@ 0x28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	025b      	lsls	r3, r3, #9
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065d0:	4931      	ldr	r1, [pc, #196]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065d6:	4b30      	ldr	r3, [pc, #192]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	492d      	ldr	r1, [pc, #180]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	4928      	ldr	r1, [pc, #160]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065fa:	4b27      	ldr	r3, [pc, #156]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	4a26      	ldr	r2, [pc, #152]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006606:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800660a:	4b24      	ldr	r3, [pc, #144]	@ (800669c <RCCEx_PLL3_Config+0x160>)
 800660c:	4013      	ands	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	69d2      	ldr	r2, [r2, #28]
 8006612:	00d2      	lsls	r2, r2, #3
 8006614:	4920      	ldr	r1, [pc, #128]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800661a:	4b1f      	ldr	r3, [pc, #124]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	4a1e      	ldr	r2, [pc, #120]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006624:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800662c:	4b1a      	ldr	r3, [pc, #104]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	4a19      	ldr	r2, [pc, #100]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006632:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006636:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006638:	e00f      	b.n	800665a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d106      	bne.n	800664e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006640:	4b15      	ldr	r3, [pc, #84]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	4a14      	ldr	r2, [pc, #80]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006646:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800664a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800664c:	e005      	b.n	800665a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800664e:	4b12      	ldr	r3, [pc, #72]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006654:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006658:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800665a:	4b0f      	ldr	r3, [pc, #60]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a0e      	ldr	r2, [pc, #56]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006666:	f7fb fbc3 	bl	8001df0 <HAL_GetTick>
 800666a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800666c:	e008      	b.n	8006680 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800666e:	f7fb fbbf 	bl	8001df0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e006      	b.n	800668e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <RCCEx_PLL3_Config+0x15c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	ffff0007 	.word	0xffff0007

080066a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e042      	b.n	8006738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fb f947 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2224      	movs	r2, #36	@ 0x24
 80066ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fe1e 	bl	800732c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8b3 	bl	800685c <UART_SetConfig>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e01b      	b.n	8006738 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800670e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800671e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fe9d 	bl	8007470 <UART_CheckIdleState>
 8006736:	4603      	mov	r3, r0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	@ 0x28
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006756:	2b20      	cmp	r3, #32
 8006758:	d17b      	bne.n	8006852 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_UART_Transmit+0x26>
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e074      	b.n	8006854 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2221      	movs	r2, #33	@ 0x21
 8006776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800677a:	f7fb fb39 	bl	8001df0 <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006798:	d108      	bne.n	80067ac <HAL_UART_Transmit+0x6c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e003      	b.n	80067b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b4:	e030      	b.n	8006818 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	@ 0x80
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 feff 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e03d      	b.n	8006854 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e007      	b.n	8006806 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1c8      	bne.n	80067b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	2140      	movs	r1, #64	@ 0x40
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fec8 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e006      	b.n	8006854 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e000      	b.n	8006854 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
  }
}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006860:	b092      	sub	sp, #72	@ 0x48
 8006862:	af00      	add	r7, sp, #0
 8006864:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	431a      	orrs	r2, r3
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	431a      	orrs	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	4313      	orrs	r3, r2
 8006882:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4bbe      	ldr	r3, [pc, #760]	@ (8006b84 <UART_SetConfig+0x328>)
 800688c:	4013      	ands	r3, r2
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006894:	430b      	orrs	r3, r1
 8006896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4ab3      	ldr	r2, [pc, #716]	@ (8006b88 <UART_SetConfig+0x32c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d004      	beq.n	80068c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068c4:	4313      	orrs	r3, r2
 80068c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	4baf      	ldr	r3, [pc, #700]	@ (8006b8c <UART_SetConfig+0x330>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068d8:	430b      	orrs	r3, r1
 80068da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	f023 010f 	bic.w	r1, r3, #15
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4aa6      	ldr	r2, [pc, #664]	@ (8006b90 <UART_SetConfig+0x334>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d177      	bne.n	80069ec <UART_SetConfig+0x190>
 80068fc:	4ba5      	ldr	r3, [pc, #660]	@ (8006b94 <UART_SetConfig+0x338>)
 80068fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006904:	2b28      	cmp	r3, #40	@ 0x28
 8006906:	d86d      	bhi.n	80069e4 <UART_SetConfig+0x188>
 8006908:	a201      	add	r2, pc, #4	@ (adr r2, 8006910 <UART_SetConfig+0xb4>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	080069b5 	.word	0x080069b5
 8006914:	080069e5 	.word	0x080069e5
 8006918:	080069e5 	.word	0x080069e5
 800691c:	080069e5 	.word	0x080069e5
 8006920:	080069e5 	.word	0x080069e5
 8006924:	080069e5 	.word	0x080069e5
 8006928:	080069e5 	.word	0x080069e5
 800692c:	080069e5 	.word	0x080069e5
 8006930:	080069bd 	.word	0x080069bd
 8006934:	080069e5 	.word	0x080069e5
 8006938:	080069e5 	.word	0x080069e5
 800693c:	080069e5 	.word	0x080069e5
 8006940:	080069e5 	.word	0x080069e5
 8006944:	080069e5 	.word	0x080069e5
 8006948:	080069e5 	.word	0x080069e5
 800694c:	080069e5 	.word	0x080069e5
 8006950:	080069c5 	.word	0x080069c5
 8006954:	080069e5 	.word	0x080069e5
 8006958:	080069e5 	.word	0x080069e5
 800695c:	080069e5 	.word	0x080069e5
 8006960:	080069e5 	.word	0x080069e5
 8006964:	080069e5 	.word	0x080069e5
 8006968:	080069e5 	.word	0x080069e5
 800696c:	080069e5 	.word	0x080069e5
 8006970:	080069cd 	.word	0x080069cd
 8006974:	080069e5 	.word	0x080069e5
 8006978:	080069e5 	.word	0x080069e5
 800697c:	080069e5 	.word	0x080069e5
 8006980:	080069e5 	.word	0x080069e5
 8006984:	080069e5 	.word	0x080069e5
 8006988:	080069e5 	.word	0x080069e5
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069d5 	.word	0x080069d5
 8006994:	080069e5 	.word	0x080069e5
 8006998:	080069e5 	.word	0x080069e5
 800699c:	080069e5 	.word	0x080069e5
 80069a0:	080069e5 	.word	0x080069e5
 80069a4:	080069e5 	.word	0x080069e5
 80069a8:	080069e5 	.word	0x080069e5
 80069ac:	080069e5 	.word	0x080069e5
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ba:	e222      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069bc:	2304      	movs	r3, #4
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c2:	e21e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069c4:	2308      	movs	r3, #8
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ca:	e21a      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069cc:	2310      	movs	r3, #16
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d2:	e216      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069d4:	2320      	movs	r3, #32
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069da:	e212      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069dc:	2340      	movs	r3, #64	@ 0x40
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e20e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069e4:	2380      	movs	r3, #128	@ 0x80
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e20a      	b.n	8006e02 <UART_SetConfig+0x5a6>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a69      	ldr	r2, [pc, #420]	@ (8006b98 <UART_SetConfig+0x33c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d130      	bne.n	8006a58 <UART_SetConfig+0x1fc>
 80069f6:	4b67      	ldr	r3, [pc, #412]	@ (8006b94 <UART_SetConfig+0x338>)
 80069f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d826      	bhi.n	8006a50 <UART_SetConfig+0x1f4>
 8006a02:	a201      	add	r2, pc, #4	@ (adr r2, 8006a08 <UART_SetConfig+0x1ac>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a21 	.word	0x08006a21
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a31 	.word	0x08006a31
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a49 	.word	0x08006a49
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a26:	e1ec      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2e:	e1e8      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a36:	e1e4      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3e:	e1e0      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a40:	2320      	movs	r3, #32
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e1dc      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a48:	2340      	movs	r3, #64	@ 0x40
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e1d8      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a50:	2380      	movs	r3, #128	@ 0x80
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e1d4      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8006b9c <UART_SetConfig+0x340>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d130      	bne.n	8006ac4 <UART_SetConfig+0x268>
 8006a62:	4b4c      	ldr	r3, [pc, #304]	@ (8006b94 <UART_SetConfig+0x338>)
 8006a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d826      	bhi.n	8006abc <UART_SetConfig+0x260>
 8006a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a74 <UART_SetConfig+0x218>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006a8d 	.word	0x08006a8d
 8006a78:	08006a95 	.word	0x08006a95
 8006a7c:	08006a9d 	.word	0x08006a9d
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006aad 	.word	0x08006aad
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a92:	e1b6      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9a:	e1b2      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	e1ae      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	e1aa      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006aac:	2320      	movs	r3, #32
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e1a6      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006ab4:	2340      	movs	r3, #64	@ 0x40
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e1a2      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006abc:	2380      	movs	r3, #128	@ 0x80
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e19e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a35      	ldr	r2, [pc, #212]	@ (8006ba0 <UART_SetConfig+0x344>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d130      	bne.n	8006b30 <UART_SetConfig+0x2d4>
 8006ace:	4b31      	ldr	r3, [pc, #196]	@ (8006b94 <UART_SetConfig+0x338>)
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d826      	bhi.n	8006b28 <UART_SetConfig+0x2cc>
 8006ada:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <UART_SetConfig+0x284>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af9 	.word	0x08006af9
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afe:	e180      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b06:	e17c      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0e:	e178      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b16:	e174      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1e:	e170      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b20:	2340      	movs	r3, #64	@ 0x40
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b26:	e16c      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b28:	2380      	movs	r3, #128	@ 0x80
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2e:	e168      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba4 <UART_SetConfig+0x348>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d142      	bne.n	8006bc0 <UART_SetConfig+0x364>
 8006b3a:	4b16      	ldr	r3, [pc, #88]	@ (8006b94 <UART_SetConfig+0x338>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d838      	bhi.n	8006bb8 <UART_SetConfig+0x35c>
 8006b46:	a201      	add	r2, pc, #4	@ (adr r2, 8006b4c <UART_SetConfig+0x2f0>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b65 	.word	0x08006b65
 8006b50:	08006b6d 	.word	0x08006b6d
 8006b54:	08006b75 	.word	0x08006b75
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006ba9 	.word	0x08006ba9
 8006b60:	08006bb1 	.word	0x08006bb1
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e14a      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e146      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e142      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b82:	e13e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006b84:	cfff69f3 	.word	0xcfff69f3
 8006b88:	58000c00 	.word	0x58000c00
 8006b8c:	11fff4ff 	.word	0x11fff4ff
 8006b90:	40011000 	.word	0x40011000
 8006b94:	58024400 	.word	0x58024400
 8006b98:	40004400 	.word	0x40004400
 8006b9c:	40004800 	.word	0x40004800
 8006ba0:	40004c00 	.word	0x40004c00
 8006ba4:	40005000 	.word	0x40005000
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e128      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006bb0:	2340      	movs	r3, #64	@ 0x40
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e124      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006bb8:	2380      	movs	r3, #128	@ 0x80
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e120      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4acb      	ldr	r2, [pc, #812]	@ (8006ef4 <UART_SetConfig+0x698>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d176      	bne.n	8006cb8 <UART_SetConfig+0x45c>
 8006bca:	4bcb      	ldr	r3, [pc, #812]	@ (8006ef8 <UART_SetConfig+0x69c>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bd2:	2b28      	cmp	r3, #40	@ 0x28
 8006bd4:	d86c      	bhi.n	8006cb0 <UART_SetConfig+0x454>
 8006bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <UART_SetConfig+0x380>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006cb1 	.word	0x08006cb1
 8006be4:	08006cb1 	.word	0x08006cb1
 8006be8:	08006cb1 	.word	0x08006cb1
 8006bec:	08006cb1 	.word	0x08006cb1
 8006bf0:	08006cb1 	.word	0x08006cb1
 8006bf4:	08006cb1 	.word	0x08006cb1
 8006bf8:	08006cb1 	.word	0x08006cb1
 8006bfc:	08006c89 	.word	0x08006c89
 8006c00:	08006cb1 	.word	0x08006cb1
 8006c04:	08006cb1 	.word	0x08006cb1
 8006c08:	08006cb1 	.word	0x08006cb1
 8006c0c:	08006cb1 	.word	0x08006cb1
 8006c10:	08006cb1 	.word	0x08006cb1
 8006c14:	08006cb1 	.word	0x08006cb1
 8006c18:	08006cb1 	.word	0x08006cb1
 8006c1c:	08006c91 	.word	0x08006c91
 8006c20:	08006cb1 	.word	0x08006cb1
 8006c24:	08006cb1 	.word	0x08006cb1
 8006c28:	08006cb1 	.word	0x08006cb1
 8006c2c:	08006cb1 	.word	0x08006cb1
 8006c30:	08006cb1 	.word	0x08006cb1
 8006c34:	08006cb1 	.word	0x08006cb1
 8006c38:	08006cb1 	.word	0x08006cb1
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006cb1 	.word	0x08006cb1
 8006c44:	08006cb1 	.word	0x08006cb1
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006cb1 	.word	0x08006cb1
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006cb1 	.word	0x08006cb1
 8006c68:	08006cb1 	.word	0x08006cb1
 8006c6c:	08006cb1 	.word	0x08006cb1
 8006c70:	08006cb1 	.word	0x08006cb1
 8006c74:	08006cb1 	.word	0x08006cb1
 8006c78:	08006cb1 	.word	0x08006cb1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e0bc      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e0b8      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c96:	e0b4      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9e:	e0b0      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca6:	e0ac      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006ca8:	2340      	movs	r3, #64	@ 0x40
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e0a8      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006cb0:	2380      	movs	r3, #128	@ 0x80
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e0a4      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a8f      	ldr	r2, [pc, #572]	@ (8006efc <UART_SetConfig+0x6a0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d130      	bne.n	8006d24 <UART_SetConfig+0x4c8>
 8006cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8006ef8 <UART_SetConfig+0x69c>)
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d826      	bhi.n	8006d1c <UART_SetConfig+0x4c0>
 8006cce:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd4 <UART_SetConfig+0x478>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ced 	.word	0x08006ced
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d15 	.word	0x08006d15
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf2:	e086      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfa:	e082      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d02:	e07e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0a:	e07a      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d12:	e076      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d14:	2340      	movs	r3, #64	@ 0x40
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1a:	e072      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d1c:	2380      	movs	r3, #128	@ 0x80
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d22:	e06e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a75      	ldr	r2, [pc, #468]	@ (8006f00 <UART_SetConfig+0x6a4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d130      	bne.n	8006d90 <UART_SetConfig+0x534>
 8006d2e:	4b72      	ldr	r3, [pc, #456]	@ (8006ef8 <UART_SetConfig+0x69c>)
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d826      	bhi.n	8006d88 <UART_SetConfig+0x52c>
 8006d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d40 <UART_SetConfig+0x4e4>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d59 	.word	0x08006d59
 8006d44:	08006d61 	.word	0x08006d61
 8006d48:	08006d69 	.word	0x08006d69
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d79 	.word	0x08006d79
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5e:	e050      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d66:	e04c      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6e:	e048      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d76:	e044      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7e:	e040      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d80:	2340      	movs	r3, #64	@ 0x40
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d86:	e03c      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d88:	2380      	movs	r3, #128	@ 0x80
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8e:	e038      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a5b      	ldr	r2, [pc, #364]	@ (8006f04 <UART_SetConfig+0x6a8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d130      	bne.n	8006dfc <UART_SetConfig+0x5a0>
 8006d9a:	4b57      	ldr	r3, [pc, #348]	@ (8006ef8 <UART_SetConfig+0x69c>)
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	d826      	bhi.n	8006df4 <UART_SetConfig+0x598>
 8006da6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <UART_SetConfig+0x550>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dc5 	.word	0x08006dc5
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	08006dd5 	.word	0x08006dd5
 8006db8:	08006ddd 	.word	0x08006ddd
 8006dbc:	08006de5 	.word	0x08006de5
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dca:	e01a      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd2:	e016      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dda:	e012      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de2:	e00e      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006de4:	2320      	movs	r3, #32
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dea:	e00a      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006dec:	2340      	movs	r3, #64	@ 0x40
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df2:	e006      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfa:	e002      	b.n	8006e02 <UART_SetConfig+0x5a6>
 8006dfc:	2380      	movs	r3, #128	@ 0x80
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3f      	ldr	r2, [pc, #252]	@ (8006f04 <UART_SetConfig+0x6a8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	f040 80f8 	bne.w	8006ffe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	dc46      	bgt.n	8006ea4 <UART_SetConfig+0x648>
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	f2c0 8082 	blt.w	8006f20 <UART_SetConfig+0x6c4>
 8006e1c:	3b02      	subs	r3, #2
 8006e1e:	2b1e      	cmp	r3, #30
 8006e20:	d87e      	bhi.n	8006f20 <UART_SetConfig+0x6c4>
 8006e22:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <UART_SetConfig+0x5cc>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006eab 	.word	0x08006eab
 8006e2c:	08006f21 	.word	0x08006f21
 8006e30:	08006eb3 	.word	0x08006eb3
 8006e34:	08006f21 	.word	0x08006f21
 8006e38:	08006f21 	.word	0x08006f21
 8006e3c:	08006f21 	.word	0x08006f21
 8006e40:	08006ec3 	.word	0x08006ec3
 8006e44:	08006f21 	.word	0x08006f21
 8006e48:	08006f21 	.word	0x08006f21
 8006e4c:	08006f21 	.word	0x08006f21
 8006e50:	08006f21 	.word	0x08006f21
 8006e54:	08006f21 	.word	0x08006f21
 8006e58:	08006f21 	.word	0x08006f21
 8006e5c:	08006f21 	.word	0x08006f21
 8006e60:	08006ed3 	.word	0x08006ed3
 8006e64:	08006f21 	.word	0x08006f21
 8006e68:	08006f21 	.word	0x08006f21
 8006e6c:	08006f21 	.word	0x08006f21
 8006e70:	08006f21 	.word	0x08006f21
 8006e74:	08006f21 	.word	0x08006f21
 8006e78:	08006f21 	.word	0x08006f21
 8006e7c:	08006f21 	.word	0x08006f21
 8006e80:	08006f21 	.word	0x08006f21
 8006e84:	08006f21 	.word	0x08006f21
 8006e88:	08006f21 	.word	0x08006f21
 8006e8c:	08006f21 	.word	0x08006f21
 8006e90:	08006f21 	.word	0x08006f21
 8006e94:	08006f21 	.word	0x08006f21
 8006e98:	08006f21 	.word	0x08006f21
 8006e9c:	08006f21 	.word	0x08006f21
 8006ea0:	08006f13 	.word	0x08006f13
 8006ea4:	2b40      	cmp	r3, #64	@ 0x40
 8006ea6:	d037      	beq.n	8006f18 <UART_SetConfig+0x6bc>
 8006ea8:	e03a      	b.n	8006f20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006eaa:	f7fe ffd7 	bl	8005e5c <HAL_RCCEx_GetD3PCLK1Freq>
 8006eae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006eb0:	e03c      	b.n	8006f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe ffe6 	bl	8005e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec0:	e034      	b.n	8006f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ec2:	f107 0318 	add.w	r3, r7, #24
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff f932 	bl	8006130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	e02c      	b.n	8006f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ed2:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <UART_SetConfig+0x69c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d016      	beq.n	8006f0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ede:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <UART_SetConfig+0x69c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <UART_SetConfig+0x6ac>)
 8006eea:	fa22 f303 	lsr.w	r3, r2, r3
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ef0:	e01c      	b.n	8006f2c <UART_SetConfig+0x6d0>
 8006ef2:	bf00      	nop
 8006ef4:	40011400 	.word	0x40011400
 8006ef8:	58024400 	.word	0x58024400
 8006efc:	40007800 	.word	0x40007800
 8006f00:	40007c00 	.word	0x40007c00
 8006f04:	58000c00 	.word	0x58000c00
 8006f08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006f0c:	4b9d      	ldr	r3, [pc, #628]	@ (8007184 <UART_SetConfig+0x928>)
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f10:	e00c      	b.n	8006f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f12:	4b9d      	ldr	r3, [pc, #628]	@ (8007188 <UART_SetConfig+0x92c>)
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f16:	e009      	b.n	8006f2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1e:	e005      	b.n	8006f2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 81de 	beq.w	80072f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	4a94      	ldr	r2, [pc, #592]	@ (800718c <UART_SetConfig+0x930>)
 8006f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	4413      	add	r3, r2
 8006f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d305      	bcc.n	8006f64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d903      	bls.n	8006f6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f6a:	e1c1      	b.n	80072f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6e:	2200      	movs	r2, #0
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	60fa      	str	r2, [r7, #12]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	4a84      	ldr	r2, [pc, #528]	@ (800718c <UART_SetConfig+0x930>)
 8006f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2200      	movs	r2, #0
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f8e:	f7f9 f9ff 	bl	8000390 <__aeabi_uldivmod>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	020b      	lsls	r3, r1, #8
 8006fa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fa8:	0202      	lsls	r2, r0, #8
 8006faa:	6979      	ldr	r1, [r7, #20]
 8006fac:	6849      	ldr	r1, [r1, #4]
 8006fae:	0849      	lsrs	r1, r1, #1
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	eb12 0804 	adds.w	r8, r2, r4
 8006fba:	eb43 0905 	adc.w	r9, r3, r5
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	469a      	mov	sl, r3
 8006fc6:	4693      	mov	fp, r2
 8006fc8:	4652      	mov	r2, sl
 8006fca:	465b      	mov	r3, fp
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 f9de 	bl	8000390 <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4613      	mov	r3, r2
 8006fda:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe2:	d308      	bcc.n	8006ff6 <UART_SetConfig+0x79a>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fea:	d204      	bcs.n	8006ff6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ff2:	60da      	str	r2, [r3, #12]
 8006ff4:	e17c      	b.n	80072f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ffc:	e178      	b.n	80072f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007006:	f040 80c5 	bne.w	8007194 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800700a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800700e:	2b20      	cmp	r3, #32
 8007010:	dc48      	bgt.n	80070a4 <UART_SetConfig+0x848>
 8007012:	2b00      	cmp	r3, #0
 8007014:	db7b      	blt.n	800710e <UART_SetConfig+0x8b2>
 8007016:	2b20      	cmp	r3, #32
 8007018:	d879      	bhi.n	800710e <UART_SetConfig+0x8b2>
 800701a:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <UART_SetConfig+0x7c4>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	080070ab 	.word	0x080070ab
 8007024:	080070b3 	.word	0x080070b3
 8007028:	0800710f 	.word	0x0800710f
 800702c:	0800710f 	.word	0x0800710f
 8007030:	080070bb 	.word	0x080070bb
 8007034:	0800710f 	.word	0x0800710f
 8007038:	0800710f 	.word	0x0800710f
 800703c:	0800710f 	.word	0x0800710f
 8007040:	080070cb 	.word	0x080070cb
 8007044:	0800710f 	.word	0x0800710f
 8007048:	0800710f 	.word	0x0800710f
 800704c:	0800710f 	.word	0x0800710f
 8007050:	0800710f 	.word	0x0800710f
 8007054:	0800710f 	.word	0x0800710f
 8007058:	0800710f 	.word	0x0800710f
 800705c:	0800710f 	.word	0x0800710f
 8007060:	080070db 	.word	0x080070db
 8007064:	0800710f 	.word	0x0800710f
 8007068:	0800710f 	.word	0x0800710f
 800706c:	0800710f 	.word	0x0800710f
 8007070:	0800710f 	.word	0x0800710f
 8007074:	0800710f 	.word	0x0800710f
 8007078:	0800710f 	.word	0x0800710f
 800707c:	0800710f 	.word	0x0800710f
 8007080:	0800710f 	.word	0x0800710f
 8007084:	0800710f 	.word	0x0800710f
 8007088:	0800710f 	.word	0x0800710f
 800708c:	0800710f 	.word	0x0800710f
 8007090:	0800710f 	.word	0x0800710f
 8007094:	0800710f 	.word	0x0800710f
 8007098:	0800710f 	.word	0x0800710f
 800709c:	0800710f 	.word	0x0800710f
 80070a0:	08007101 	.word	0x08007101
 80070a4:	2b40      	cmp	r3, #64	@ 0x40
 80070a6:	d02e      	beq.n	8007106 <UART_SetConfig+0x8aa>
 80070a8:	e031      	b.n	800710e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070aa:	f7fd fca1 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 80070ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070b0:	e033      	b.n	800711a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b2:	f7fd fcb3 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 80070b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070b8:	e02f      	b.n	800711a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fee2 	bl	8005e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c8:	e027      	b.n	800711a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ca:	f107 0318 	add.w	r3, r7, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff f82e 	bl	8006130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d8:	e01f      	b.n	800711a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070da:	4b2d      	ldr	r3, [pc, #180]	@ (8007190 <UART_SetConfig+0x934>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007190 <UART_SetConfig+0x934>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	4a24      	ldr	r2, [pc, #144]	@ (8007184 <UART_SetConfig+0x928>)
 80070f2:	fa22 f303 	lsr.w	r3, r2, r3
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070f8:	e00f      	b.n	800711a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80070fa:	4b22      	ldr	r3, [pc, #136]	@ (8007184 <UART_SetConfig+0x928>)
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070fe:	e00c      	b.n	800711a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007100:	4b21      	ldr	r3, [pc, #132]	@ (8007188 <UART_SetConfig+0x92c>)
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007104:	e009      	b.n	800711a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800710a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800710c:	e005      	b.n	800711a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800711a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80e7 	beq.w	80072f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	4a19      	ldr	r2, [pc, #100]	@ (800718c <UART_SetConfig+0x930>)
 8007128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800712c:	461a      	mov	r2, r3
 800712e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007130:	fbb3 f3f2 	udiv	r3, r3, r2
 8007134:	005a      	lsls	r2, r3, #1
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	441a      	add	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	fbb2 f3f3 	udiv	r3, r2, r3
 8007146:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	2b0f      	cmp	r3, #15
 800714c:	d916      	bls.n	800717c <UART_SetConfig+0x920>
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007154:	d212      	bcs.n	800717c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	b29b      	uxth	r3, r3
 800715a:	f023 030f 	bic.w	r3, r3, #15
 800715e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	b29b      	uxth	r3, r3
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	b29a      	uxth	r2, r3
 800716c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800716e:	4313      	orrs	r3, r2
 8007170:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	e0b9      	b.n	80072f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007182:	e0b5      	b.n	80072f0 <UART_SetConfig+0xa94>
 8007184:	03d09000 	.word	0x03d09000
 8007188:	003d0900 	.word	0x003d0900
 800718c:	0800c16c 	.word	0x0800c16c
 8007190:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007194:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007198:	2b20      	cmp	r3, #32
 800719a:	dc49      	bgt.n	8007230 <UART_SetConfig+0x9d4>
 800719c:	2b00      	cmp	r3, #0
 800719e:	db7c      	blt.n	800729a <UART_SetConfig+0xa3e>
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d87a      	bhi.n	800729a <UART_SetConfig+0xa3e>
 80071a4:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <UART_SetConfig+0x950>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	08007237 	.word	0x08007237
 80071b0:	0800723f 	.word	0x0800723f
 80071b4:	0800729b 	.word	0x0800729b
 80071b8:	0800729b 	.word	0x0800729b
 80071bc:	08007247 	.word	0x08007247
 80071c0:	0800729b 	.word	0x0800729b
 80071c4:	0800729b 	.word	0x0800729b
 80071c8:	0800729b 	.word	0x0800729b
 80071cc:	08007257 	.word	0x08007257
 80071d0:	0800729b 	.word	0x0800729b
 80071d4:	0800729b 	.word	0x0800729b
 80071d8:	0800729b 	.word	0x0800729b
 80071dc:	0800729b 	.word	0x0800729b
 80071e0:	0800729b 	.word	0x0800729b
 80071e4:	0800729b 	.word	0x0800729b
 80071e8:	0800729b 	.word	0x0800729b
 80071ec:	08007267 	.word	0x08007267
 80071f0:	0800729b 	.word	0x0800729b
 80071f4:	0800729b 	.word	0x0800729b
 80071f8:	0800729b 	.word	0x0800729b
 80071fc:	0800729b 	.word	0x0800729b
 8007200:	0800729b 	.word	0x0800729b
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800729b 	.word	0x0800729b
 800720c:	0800729b 	.word	0x0800729b
 8007210:	0800729b 	.word	0x0800729b
 8007214:	0800729b 	.word	0x0800729b
 8007218:	0800729b 	.word	0x0800729b
 800721c:	0800729b 	.word	0x0800729b
 8007220:	0800729b 	.word	0x0800729b
 8007224:	0800729b 	.word	0x0800729b
 8007228:	0800729b 	.word	0x0800729b
 800722c:	0800728d 	.word	0x0800728d
 8007230:	2b40      	cmp	r3, #64	@ 0x40
 8007232:	d02e      	beq.n	8007292 <UART_SetConfig+0xa36>
 8007234:	e031      	b.n	800729a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007236:	f7fd fbdb 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 800723a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800723c:	e033      	b.n	80072a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800723e:	f7fd fbed 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8007242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007244:	e02f      	b.n	80072a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fe1c 	bl	8005e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007254:	e027      	b.n	80072a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe ff68 	bl	8006130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007264:	e01f      	b.n	80072a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007266:	4b2d      	ldr	r3, [pc, #180]	@ (800731c <UART_SetConfig+0xac0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007272:	4b2a      	ldr	r3, [pc, #168]	@ (800731c <UART_SetConfig+0xac0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	08db      	lsrs	r3, r3, #3
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	4a28      	ldr	r2, [pc, #160]	@ (8007320 <UART_SetConfig+0xac4>)
 800727e:	fa22 f303 	lsr.w	r3, r2, r3
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007284:	e00f      	b.n	80072a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007286:	4b26      	ldr	r3, [pc, #152]	@ (8007320 <UART_SetConfig+0xac4>)
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800728a:	e00c      	b.n	80072a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800728c:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <UART_SetConfig+0xac8>)
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007290:	e009      	b.n	80072a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007298:	e005      	b.n	80072a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80072a4:	bf00      	nop
    }

    if (pclk != 0U)
 80072a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d021      	beq.n	80072f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <UART_SetConfig+0xacc>)
 80072b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	441a      	add	r2, r3
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	2b0f      	cmp	r3, #15
 80072d4:	d909      	bls.n	80072ea <UART_SetConfig+0xa8e>
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072dc:	d205      	bcs.n	80072ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60da      	str	r2, [r3, #12]
 80072e8:	e002      	b.n	80072f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2200      	movs	r2, #0
 8007304:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800730c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007310:	4618      	mov	r0, r3
 8007312:	3748      	adds	r7, #72	@ 0x48
 8007314:	46bd      	mov	sp, r7
 8007316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731a:	bf00      	nop
 800731c:	58024400 	.word	0x58024400
 8007320:	03d09000 	.word	0x03d09000
 8007324:	003d0900 	.word	0x003d0900
 8007328:	0800c16c 	.word	0x0800c16c

0800732c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01a      	beq.n	8007442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800742a:	d10a      	bne.n	8007442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	605a      	str	r2, [r3, #4]
  }
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b098      	sub	sp, #96	@ 0x60
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007480:	f7fa fcb6 	bl	8001df0 <HAL_GetTick>
 8007484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d12f      	bne.n	80074f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f88e 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d022      	beq.n	80074f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e063      	b.n	80075bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d149      	bne.n	8007596 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007502:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800750a:	2200      	movs	r2, #0
 800750c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f857 	bl	80075c4 <UART_WaitOnFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d03c      	beq.n	8007596 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	623b      	str	r3, [r7, #32]
   return(result);
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800753a:	633b      	str	r3, [r7, #48]	@ 0x30
 800753c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	60fb      	str	r3, [r7, #12]
   return(result);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800756e:	61fa      	str	r2, [r7, #28]
 8007570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	69b9      	ldr	r1, [r7, #24]
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	617b      	str	r3, [r7, #20]
   return(result);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e012      	b.n	80075bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3758      	adds	r7, #88	@ 0x58
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d4:	e04f      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d04b      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fa fc07 	bl	8001df0 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e04e      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d037      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b80      	cmp	r3, #128	@ 0x80
 800760a:	d034      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d031      	beq.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b08      	cmp	r3, #8
 800761e:	d110      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2208      	movs	r2, #8
 8007626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f839 	bl	80076a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2208      	movs	r2, #8
 8007632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e029      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800764c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007650:	d111      	bne.n	8007676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800765a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f81f 	bl	80076a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e00f      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4013      	ands	r3, r2
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	429a      	cmp	r2, r3
 8007684:	bf0c      	ite	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	2300      	movne	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	429a      	cmp	r2, r3
 8007692:	d0a0      	beq.n	80075d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b095      	sub	sp, #84	@ 0x54
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e6      	bne.n	80076a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	4b1e      	ldr	r3, [pc, #120]	@ (8007768 <UART_EndRxTransfer+0xc8>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007712:	2b01      	cmp	r3, #1
 8007714:	d118      	bne.n	8007748 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	60bb      	str	r3, [r7, #8]
   return(result);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f023 0310 	bic.w	r3, r3, #16
 800772a:	647b      	str	r3, [r7, #68]	@ 0x44
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6979      	ldr	r1, [r7, #20]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	613b      	str	r3, [r7, #16]
   return(result);
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e6      	bne.n	8007716 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800775c:	bf00      	nop
 800775e:	3754      	adds	r7, #84	@ 0x54
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	effffffe 	.word	0xeffffffe

0800776c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UARTEx_DisableFifoMode+0x16>
 800777e:	2302      	movs	r3, #2
 8007780:	e027      	b.n	80077d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2224      	movs	r2, #36	@ 0x24
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e02d      	b.n	8007852 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2224      	movs	r2, #36	@ 0x24
 8007802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0201 	bic.w	r2, r2, #1
 800781c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f850 	bl	80078d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800786e:	2302      	movs	r3, #2
 8007870:	e02d      	b.n	80078ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2224      	movs	r2, #36	@ 0x24
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f812 	bl	80078d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078f8:	e031      	b.n	800795e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078fa:	2310      	movs	r3, #16
 80078fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078fe:	2310      	movs	r3, #16
 8007900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	0e5b      	lsrs	r3, r3, #25
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	0f5b      	lsrs	r3, r3, #29
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	7b3a      	ldrb	r2, [r7, #12]
 8007926:	4911      	ldr	r1, [pc, #68]	@ (800796c <UARTEx_SetNbDataToProcess+0x94>)
 8007928:	5c8a      	ldrb	r2, [r1, r2]
 800792a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800792e:	7b3a      	ldrb	r2, [r7, #12]
 8007930:	490f      	ldr	r1, [pc, #60]	@ (8007970 <UARTEx_SetNbDataToProcess+0x98>)
 8007932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007934:	fb93 f3f2 	sdiv	r3, r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	7b7a      	ldrb	r2, [r7, #13]
 8007944:	4909      	ldr	r1, [pc, #36]	@ (800796c <UARTEx_SetNbDataToProcess+0x94>)
 8007946:	5c8a      	ldrb	r2, [r1, r2]
 8007948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800794c:	7b7a      	ldrb	r2, [r7, #13]
 800794e:	4908      	ldr	r1, [pc, #32]	@ (8007970 <UARTEx_SetNbDataToProcess+0x98>)
 8007950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007952:	fb93 f3f2 	sdiv	r3, r3, r2
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	0800c184 	.word	0x0800c184
 8007970:	0800c18c 	.word	0x0800c18c

08007974 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007974:	b084      	sub	sp, #16
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	f107 001c 	add.w	r0, r7, #28
 8007982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007986:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800798a:	2b01      	cmp	r3, #1
 800798c:	d121      	bne.n	80079d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007992:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a50 <USB_CoreInit+0xdc>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80079b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d105      	bne.n	80079c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fafa 	bl	8008fc0 <USB_CoreReset>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]
 80079d0:	e01b      	b.n	8007a0a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 faee 	bl	8008fc0 <USB_CoreReset>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80079fc:	e005      	b.n	8007a0a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a0a:	7fbb      	ldrb	r3, [r7, #30]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d116      	bne.n	8007a3e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <USB_CoreInit+0xe0>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f043 0206 	orr.w	r2, r3, #6
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f043 0220 	orr.w	r2, r3, #32
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a4a:	b004      	add	sp, #16
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	ffbdffbf 	.word	0xffbdffbf
 8007a54:	03ee0000 	.word	0x03ee0000

08007a58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d165      	bne.n	8007b38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4a41      	ldr	r2, [pc, #260]	@ (8007b74 <USB_SetTurnaroundTime+0x11c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d906      	bls.n	8007a82 <USB_SetTurnaroundTime+0x2a>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4a40      	ldr	r2, [pc, #256]	@ (8007b78 <USB_SetTurnaroundTime+0x120>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d202      	bcs.n	8007a82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a7c:	230f      	movs	r3, #15
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e062      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4a3c      	ldr	r2, [pc, #240]	@ (8007b78 <USB_SetTurnaroundTime+0x120>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d306      	bcc.n	8007a98 <USB_SetTurnaroundTime+0x40>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8007b7c <USB_SetTurnaroundTime+0x124>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d202      	bcs.n	8007a98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a92:	230e      	movs	r3, #14
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e057      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4a38      	ldr	r2, [pc, #224]	@ (8007b7c <USB_SetTurnaroundTime+0x124>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d306      	bcc.n	8007aae <USB_SetTurnaroundTime+0x56>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4a37      	ldr	r2, [pc, #220]	@ (8007b80 <USB_SetTurnaroundTime+0x128>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d202      	bcs.n	8007aae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007aa8:	230d      	movs	r3, #13
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e04c      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4a33      	ldr	r2, [pc, #204]	@ (8007b80 <USB_SetTurnaroundTime+0x128>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d306      	bcc.n	8007ac4 <USB_SetTurnaroundTime+0x6c>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4a32      	ldr	r2, [pc, #200]	@ (8007b84 <USB_SetTurnaroundTime+0x12c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d802      	bhi.n	8007ac4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007abe:	230c      	movs	r3, #12
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e041      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8007b84 <USB_SetTurnaroundTime+0x12c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d906      	bls.n	8007ada <USB_SetTurnaroundTime+0x82>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4a2e      	ldr	r2, [pc, #184]	@ (8007b88 <USB_SetTurnaroundTime+0x130>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d802      	bhi.n	8007ada <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ad4:	230b      	movs	r3, #11
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	e036      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4a2a      	ldr	r2, [pc, #168]	@ (8007b88 <USB_SetTurnaroundTime+0x130>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d906      	bls.n	8007af0 <USB_SetTurnaroundTime+0x98>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4a29      	ldr	r2, [pc, #164]	@ (8007b8c <USB_SetTurnaroundTime+0x134>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d802      	bhi.n	8007af0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007aea:	230a      	movs	r3, #10
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e02b      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4a26      	ldr	r2, [pc, #152]	@ (8007b8c <USB_SetTurnaroundTime+0x134>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d906      	bls.n	8007b06 <USB_SetTurnaroundTime+0xae>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4a25      	ldr	r2, [pc, #148]	@ (8007b90 <USB_SetTurnaroundTime+0x138>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d202      	bcs.n	8007b06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b00:	2309      	movs	r3, #9
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e020      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4a21      	ldr	r2, [pc, #132]	@ (8007b90 <USB_SetTurnaroundTime+0x138>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d306      	bcc.n	8007b1c <USB_SetTurnaroundTime+0xc4>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4a20      	ldr	r2, [pc, #128]	@ (8007b94 <USB_SetTurnaroundTime+0x13c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d802      	bhi.n	8007b1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007b16:	2308      	movs	r3, #8
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	e015      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <USB_SetTurnaroundTime+0x13c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d906      	bls.n	8007b32 <USB_SetTurnaroundTime+0xda>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	@ (8007b98 <USB_SetTurnaroundTime+0x140>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d202      	bcs.n	8007b32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b2c:	2307      	movs	r3, #7
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e00a      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b32:	2306      	movs	r3, #6
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	e007      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007b3e:	2309      	movs	r3, #9
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e001      	b.n	8007b48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b44:	2309      	movs	r3, #9
 8007b46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	00d8acbf 	.word	0x00d8acbf
 8007b78:	00e4e1c0 	.word	0x00e4e1c0
 8007b7c:	00f42400 	.word	0x00f42400
 8007b80:	01067380 	.word	0x01067380
 8007b84:	011a499f 	.word	0x011a499f
 8007b88:	01312cff 	.word	0x01312cff
 8007b8c:	014ca43f 	.word	0x014ca43f
 8007b90:	016e3600 	.word	0x016e3600
 8007b94:	01a6ab1f 	.word	0x01a6ab1f
 8007b98:	01e84800 	.word	0x01e84800

08007b9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f043 0201 	orr.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f023 0201 	bic.w	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d115      	bne.n	8007c2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c0e:	200a      	movs	r0, #10
 8007c10:	f7fa f8fa 	bl	8001e08 <HAL_Delay>
      ms += 10U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	330a      	adds	r3, #10
 8007c18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 f93f 	bl	8008e9e <USB_GetMode>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d01e      	beq.n	8007c64 <USB_SetCurrentMode+0x84>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c2a:	d9f0      	bls.n	8007c0e <USB_SetCurrentMode+0x2e>
 8007c2c:	e01a      	b.n	8007c64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d115      	bne.n	8007c60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c40:	200a      	movs	r0, #10
 8007c42:	f7fa f8e1 	bl	8001e08 <HAL_Delay>
      ms += 10U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	330a      	adds	r3, #10
 8007c4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 f926 	bl	8008e9e <USB_GetMode>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <USB_SetCurrentMode+0x84>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c5c:	d9f0      	bls.n	8007c40 <USB_SetCurrentMode+0x60>
 8007c5e:	e001      	b.n	8007c64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e005      	b.n	8007c70 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2bc8      	cmp	r3, #200	@ 0xc8
 8007c68:	d101      	bne.n	8007c6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e000      	b.n	8007c70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c78:	b084      	sub	sp, #16
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b086      	sub	sp, #24
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	e009      	b.n	8007cac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3340      	adds	r3, #64	@ 0x40
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b0e      	cmp	r3, #14
 8007cb0:	d9f2      	bls.n	8007c98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11c      	bne.n	8007cf4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	e005      	b.n	8007d00 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d06:	461a      	mov	r2, r3
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d10d      	bne.n	8007d30 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f968 	bl	8007ff4 <USB_SetDevSpeed>
 8007d24:	e008      	b.n	8007d38 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d26:	2101      	movs	r1, #1
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f963 	bl	8007ff4 <USB_SetDevSpeed>
 8007d2e:	e003      	b.n	8007d38 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d30:	2103      	movs	r1, #3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f95e 	bl	8007ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d38:	2110      	movs	r1, #16
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f8fa 	bl	8007f34 <USB_FlushTxFifo>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f924 	bl	8007f98 <USB_FlushRxFifo>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d60:	461a      	mov	r2, r3
 8007d62:	2300      	movs	r3, #0
 8007d64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d7e:	2300      	movs	r3, #0
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	e043      	b.n	8007e0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d9a:	d118      	bne.n	8007dce <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dae:	461a      	mov	r2, r3
 8007db0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e013      	b.n	8007de0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e008      	b.n	8007de0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dec:	461a      	mov	r2, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e10:	461a      	mov	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d3b5      	bcc.n	8007d84 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	e043      	b.n	8007ea6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e34:	d118      	bne.n	8007e68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e013      	b.n	8007e7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	e008      	b.n	8007e7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e86:	461a      	mov	r2, r3
 8007e88:	2300      	movs	r3, #0
 8007e8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007eaa:	461a      	mov	r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d3b5      	bcc.n	8007e1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ec4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ed2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f043 0210 	orr.w	r2, r3, #16
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	4b0f      	ldr	r3, [pc, #60]	@ (8007f2c <USB_DevInit+0x2b4>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ef4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f043 0208 	orr.w	r2, r3, #8
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d105      	bne.n	8007f1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <USB_DevInit+0x2b8>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f28:	b004      	add	sp, #16
 8007f2a:	4770      	bx	lr
 8007f2c:	803c3800 	.word	0x803c3800
 8007f30:	40000004 	.word	0x40000004

08007f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f4e:	d901      	bls.n	8007f54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e01b      	b.n	8007f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	daf2      	bge.n	8007f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	019b      	lsls	r3, r3, #6
 8007f64:	f043 0220 	orr.w	r2, r3, #32
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f78:	d901      	bls.n	8007f7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e006      	b.n	8007f8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d0f0      	beq.n	8007f6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fb0:	d901      	bls.n	8007fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e018      	b.n	8007fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	daf2      	bge.n	8007fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fd4:	d901      	bls.n	8007fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e006      	b.n	8007fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d0f0      	beq.n	8007fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008014:	4313      	orrs	r3, r2
 8008016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008026:	b480      	push	{r7}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 0306 	and.w	r3, r3, #6
 800803e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d102      	bne.n	800804c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008046:	2300      	movs	r3, #0
 8008048:	75fb      	strb	r3, [r7, #23]
 800804a:	e00a      	b.n	8008062 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d002      	beq.n	8008058 <USB_GetDevSpeed+0x32>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b06      	cmp	r3, #6
 8008056:	d102      	bne.n	800805e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008058:	2302      	movs	r3, #2
 800805a:	75fb      	strb	r3, [r7, #23]
 800805c:	e001      	b.n	8008062 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800805e:	230f      	movs	r3, #15
 8008060:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
}
 8008064:	4618      	mov	r0, r3
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d139      	bne.n	8008100 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 030f 	and.w	r3, r3, #15
 800809c:	2101      	movs	r1, #1
 800809e:	fa01 f303 	lsl.w	r3, r1, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	68f9      	ldr	r1, [r7, #12]
 80080a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080aa:	4313      	orrs	r3, r2
 80080ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d153      	bne.n	800816c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	059b      	lsls	r3, r3, #22
 80080e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080e8:	431a      	orrs	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	0159      	lsls	r1, r3, #5
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	440b      	add	r3, r1
 80080f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f6:	4619      	mov	r1, r3
 80080f8:	4b20      	ldr	r3, [pc, #128]	@ (800817c <USB_ActivateEndpoint+0x10c>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]
 80080fe:	e035      	b.n	800816c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	2101      	movs	r1, #1
 8008112:	fa01 f303 	lsl.w	r3, r1, r3
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	68f9      	ldr	r1, [r7, #12]
 800811a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800811e:	4313      	orrs	r3, r2
 8008120:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d119      	bne.n	800816c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	791b      	ldrb	r3, [r3, #4]
 8008152:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008154:	430b      	orrs	r3, r1
 8008156:	431a      	orrs	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	0159      	lsls	r1, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	440b      	add	r3, r1
 8008160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008164:	4619      	mov	r1, r3
 8008166:	4b05      	ldr	r3, [pc, #20]	@ (800817c <USB_ActivateEndpoint+0x10c>)
 8008168:	4313      	orrs	r3, r2
 800816a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	10008000 	.word	0x10008000

08008180 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d161      	bne.n	8008260 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081b2:	d11f      	bne.n	80081f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	2101      	movs	r1, #1
 8008206:	fa01 f303 	lsl.w	r3, r1, r3
 800820a:	b29b      	uxth	r3, r3
 800820c:	43db      	mvns	r3, r3
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008214:	4013      	ands	r3, r2
 8008216:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	43db      	mvns	r3, r3
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008238:	4013      	ands	r3, r2
 800823a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	0159      	lsls	r1, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	440b      	add	r3, r1
 8008252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008256:	4619      	mov	r1, r3
 8008258:	4b35      	ldr	r3, [pc, #212]	@ (8008330 <USB_DeactivateEndpoint+0x1b0>)
 800825a:	4013      	ands	r3, r2
 800825c:	600b      	str	r3, [r1, #0]
 800825e:	e060      	b.n	8008322 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008276:	d11f      	bne.n	80082b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008292:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008296:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	0151      	lsls	r1, r2, #5
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	440a      	add	r2, r1
 80082ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	2101      	movs	r1, #1
 80082ca:	fa01 f303 	lsl.w	r3, r1, r3
 80082ce:	041b      	lsls	r3, r3, #16
 80082d0:	43db      	mvns	r3, r3
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082d8:	4013      	ands	r3, r2
 80082da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	2101      	movs	r1, #1
 80082ee:	fa01 f303 	lsl.w	r3, r1, r3
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	43db      	mvns	r3, r3
 80082f6:	68f9      	ldr	r1, [r7, #12]
 80082f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082fc:	4013      	ands	r3, r2
 80082fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	0159      	lsls	r1, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	440b      	add	r3, r1
 8008316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800831a:	4619      	mov	r1, r3
 800831c:	4b05      	ldr	r3, [pc, #20]	@ (8008334 <USB_DeactivateEndpoint+0x1b4>)
 800831e:	4013      	ands	r3, r2
 8008320:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	ec337800 	.word	0xec337800
 8008334:	eff37800 	.word	0xeff37800

08008338 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	@ 0x28
 800833c:	af02      	add	r7, sp, #8
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b01      	cmp	r3, #1
 8008356:	f040 8185 	bne.w	8008664 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d132      	bne.n	80083c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	0159      	lsls	r1, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	440b      	add	r3, r1
 8008378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800837c:	4619      	mov	r1, r3
 800837e:	4ba7      	ldr	r3, [pc, #668]	@ (800861c <USB_EPStartXfer+0x2e4>)
 8008380:	4013      	ands	r3, r2
 8008382:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	0151      	lsls	r1, r2, #5
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	440a      	add	r2, r1
 800839a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800839e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	0159      	lsls	r1, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	440b      	add	r3, r1
 80083ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083be:	4619      	mov	r1, r3
 80083c0:	4b97      	ldr	r3, [pc, #604]	@ (8008620 <USB_EPStartXfer+0x2e8>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	610b      	str	r3, [r1, #16]
 80083c6:	e097      	b.n	80084f8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	691a      	ldr	r2, [r3, #16]
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	0159      	lsls	r1, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	440b      	add	r3, r1
 80083de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e2:	4619      	mov	r1, r3
 80083e4:	4b8e      	ldr	r3, [pc, #568]	@ (8008620 <USB_EPStartXfer+0x2e8>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	0159      	lsls	r1, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	440b      	add	r3, r1
 8008400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008404:	4619      	mov	r1, r3
 8008406:	4b85      	ldr	r3, [pc, #532]	@ (800861c <USB_EPStartXfer+0x2e4>)
 8008408:	4013      	ands	r3, r2
 800840a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d11a      	bne.n	8008448 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	691a      	ldr	r2, [r3, #16]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	429a      	cmp	r2, r3
 800841c:	d903      	bls.n	8008426 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	0151      	lsls	r1, r2, #5
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	440a      	add	r2, r1
 800843c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008440:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008444:	6113      	str	r3, [r2, #16]
 8008446:	e044      	b.n	80084d2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	4413      	add	r3, r2
 8008452:	1e5a      	subs	r2, r3, #1
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	fbb2 f3f3 	udiv	r3, r2, r3
 800845c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	8afb      	ldrh	r3, [r7, #22]
 800846e:	04d9      	lsls	r1, r3, #19
 8008470:	4b6c      	ldr	r3, [pc, #432]	@ (8008624 <USB_EPStartXfer+0x2ec>)
 8008472:	400b      	ands	r3, r1
 8008474:	69b9      	ldr	r1, [r7, #24]
 8008476:	0148      	lsls	r0, r1, #5
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	4401      	add	r1, r0
 800847c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008480:	4313      	orrs	r3, r2
 8008482:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	791b      	ldrb	r3, [r3, #4]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d122      	bne.n	80084d2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80084aa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	075b      	lsls	r3, r3, #29
 80084be:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80084c2:	69b9      	ldr	r1, [r7, #24]
 80084c4:	0148      	lsls	r0, r1, #5
 80084c6:	69f9      	ldr	r1, [r7, #28]
 80084c8:	4401      	add	r1, r0
 80084ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80084ce:	4313      	orrs	r3, r2
 80084d0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084e8:	69b9      	ldr	r1, [r7, #24]
 80084ea:	0148      	lsls	r0, r1, #5
 80084ec:	69f9      	ldr	r1, [r7, #28]
 80084ee:	4401      	add	r1, r0
 80084f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80084f4:	4313      	orrs	r3, r2
 80084f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d14b      	bne.n	8008596 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d009      	beq.n	800851a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008512:	461a      	mov	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	791b      	ldrb	r3, [r3, #4]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d128      	bne.n	8008574 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852e:	2b00      	cmp	r3, #0
 8008530:	d110      	bne.n	8008554 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	440a      	add	r2, r1
 8008548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800854c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	e00f      	b.n	8008574 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	440a      	add	r2, r1
 800856a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800856e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008572:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	440a      	add	r2, r1
 800858a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800858e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	e169      	b.n	800886a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80085b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	791b      	ldrb	r3, [r3, #4]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d015      	beq.n	80085ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8151 	beq.w	800886a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	2101      	movs	r1, #1
 80085da:	fa01 f303 	lsl.w	r3, r1, r3
 80085de:	69f9      	ldr	r1, [r7, #28]
 80085e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085e4:	4313      	orrs	r3, r2
 80085e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80085e8:	e13f      	b.n	800886a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d116      	bne.n	8008628 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	440a      	add	r2, r1
 8008610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008614:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	e015      	b.n	8008648 <USB_EPStartXfer+0x310>
 800861c:	e007ffff 	.word	0xe007ffff
 8008620:	fff80000 	.word	0xfff80000
 8008624:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	0151      	lsls	r1, r2, #5
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	440a      	add	r2, r1
 800863e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008646:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	68d9      	ldr	r1, [r3, #12]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	781a      	ldrb	r2, [r3, #0]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	b298      	uxth	r0, r3
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	4603      	mov	r3, r0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f9b9 	bl	80089d4 <USB_WritePacket>
 8008662:	e102      	b.n	800886a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	0159      	lsls	r1, r3, #5
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	440b      	add	r3, r1
 800867a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800867e:	4619      	mov	r1, r3
 8008680:	4b7c      	ldr	r3, [pc, #496]	@ (8008874 <USB_EPStartXfer+0x53c>)
 8008682:	4013      	ands	r3, r2
 8008684:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	691a      	ldr	r2, [r3, #16]
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	0159      	lsls	r1, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	440b      	add	r3, r1
 800869c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086a0:	4619      	mov	r1, r3
 80086a2:	4b75      	ldr	r3, [pc, #468]	@ (8008878 <USB_EPStartXfer+0x540>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d12f      	bne.n	800870e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	689a      	ldr	r2, [r3, #8]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d2:	691a      	ldr	r2, [r3, #16]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086dc:	69b9      	ldr	r1, [r7, #24]
 80086de:	0148      	lsls	r0, r1, #5
 80086e0:	69f9      	ldr	r1, [r7, #28]
 80086e2:	4401      	add	r1, r0
 80086e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086e8:	4313      	orrs	r3, r2
 80086ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008706:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800870a:	6113      	str	r3, [r2, #16]
 800870c:	e05f      	b.n	80087ce <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d123      	bne.n	800875e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800872c:	69b9      	ldr	r1, [r7, #24]
 800872e:	0148      	lsls	r0, r1, #5
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	4401      	add	r1, r0
 8008734:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008738:	4313      	orrs	r3, r2
 800873a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	0151      	lsls	r1, r2, #5
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	440a      	add	r2, r1
 8008752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800875a:	6113      	str	r3, [r2, #16]
 800875c:	e037      	b.n	80087ce <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	4413      	add	r3, r2
 8008768:	1e5a      	subs	r2, r3, #1
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008772:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	8afa      	ldrh	r2, [r7, #22]
 800877a:	fb03 f202 	mul.w	r2, r3, r2
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	8afb      	ldrh	r3, [r7, #22]
 8008792:	04d9      	lsls	r1, r3, #19
 8008794:	4b39      	ldr	r3, [pc, #228]	@ (800887c <USB_EPStartXfer+0x544>)
 8008796:	400b      	ands	r3, r1
 8008798:	69b9      	ldr	r1, [r7, #24]
 800879a:	0148      	lsls	r0, r1, #5
 800879c:	69f9      	ldr	r1, [r7, #28]
 800879e:	4401      	add	r1, r0
 80087a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80087a4:	4313      	orrs	r3, r2
 80087a6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087be:	69b9      	ldr	r1, [r7, #24]
 80087c0:	0148      	lsls	r0, r1, #5
 80087c2:	69f9      	ldr	r1, [r7, #28]
 80087c4:	4401      	add	r1, r0
 80087c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80087ca:	4313      	orrs	r3, r2
 80087cc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80087ce:	79fb      	ldrb	r3, [r7, #7]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d10d      	bne.n	80087f0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	68d9      	ldr	r1, [r3, #12]
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ec:	460a      	mov	r2, r1
 80087ee:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	791b      	ldrb	r3, [r3, #4]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d128      	bne.n	800884a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008804:	2b00      	cmp	r3, #0
 8008806:	d110      	bne.n	800882a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008822:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	e00f      	b.n	800884a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	0151      	lsls	r1, r2, #5
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	440a      	add	r2, r1
 8008840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008848:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	0151      	lsls	r1, r2, #5
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	440a      	add	r2, r1
 8008860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008864:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3720      	adds	r7, #32
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	fff80000 	.word	0xfff80000
 8008878:	e007ffff 	.word	0xe007ffff
 800887c:	1ff80000 	.word	0x1ff80000

08008880 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d14a      	bne.n	8008934 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088b6:	f040 8086 	bne.w	80089c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	7812      	ldrb	r2, [r2, #0]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800890e:	4293      	cmp	r3, r2
 8008910:	d902      	bls.n	8008918 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	75fb      	strb	r3, [r7, #23]
          break;
 8008916:	e056      	b.n	80089c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800892c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008930:	d0e7      	beq.n	8008902 <USB_EPStopXfer+0x82>
 8008932:	e048      	b.n	80089c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800894c:	d13b      	bne.n	80089c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	7812      	ldrb	r2, [r2, #0]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800896c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008970:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	7812      	ldrb	r2, [r2, #0]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008990:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3301      	adds	r3, #1
 800899a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d902      	bls.n	80089ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
          break;
 80089aa:	e00c      	b.n	80089c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089c4:	d0e7      	beq.n	8008996 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b089      	sub	sp, #36	@ 0x24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	4611      	mov	r1, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	460b      	mov	r3, r1
 80089e4:	71fb      	strb	r3, [r7, #7]
 80089e6:	4613      	mov	r3, r2
 80089e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d123      	bne.n	8008a42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089fa:	88bb      	ldrh	r3, [r7, #4]
 80089fc:	3303      	adds	r3, #3
 80089fe:	089b      	lsrs	r3, r3, #2
 8008a00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a02:	2300      	movs	r3, #0
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	e018      	b.n	8008a3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	031a      	lsls	r2, r3, #12
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a14:	461a      	mov	r2, r3
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3301      	adds	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	3301      	adds	r3, #1
 8008a32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	3301      	adds	r3, #1
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d3e2      	bcc.n	8008a08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3724      	adds	r7, #36	@ 0x24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b08b      	sub	sp, #44	@ 0x2c
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a66:	88fb      	ldrh	r3, [r7, #6]
 8008a68:	089b      	lsrs	r3, r3, #2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a6e:	88fb      	ldrh	r3, [r7, #6]
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a76:	2300      	movs	r3, #0
 8008a78:	623b      	str	r3, [r7, #32]
 8008a7a:	e014      	b.n	8008aa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	3301      	adds	r3, #1
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a96:	3301      	adds	r3, #1
 8008a98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	623b      	str	r3, [r7, #32]
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d3e6      	bcc.n	8008a7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008aae:	8bfb      	ldrh	r3, [r7, #30]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01e      	beq.n	8008af2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f107 0310 	add.w	r3, r7, #16
 8008ac4:	6812      	ldr	r2, [r2, #0]
 8008ac6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	701a      	strb	r2, [r3, #0]
      i++;
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	3301      	adds	r3, #1
 8008ade:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008ae6:	8bfb      	ldrh	r3, [r7, #30]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008aec:	8bfb      	ldrh	r3, [r7, #30]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1ea      	bne.n	8008ac8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	372c      	adds	r7, #44	@ 0x2c
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d12c      	bne.n	8008b76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	db12      	blt.n	8008b54 <USB_EPSetStall+0x54>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00f      	beq.n	8008b54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	0151      	lsls	r1, r2, #5
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	440a      	add	r2, r1
 8008b4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	0151      	lsls	r1, r2, #5
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	440a      	add	r2, r1
 8008b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	e02b      	b.n	8008bce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	db12      	blt.n	8008bae <USB_EPSetStall+0xae>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00f      	beq.n	8008bae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	0151      	lsls	r1, r2, #5
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	440a      	add	r2, r1
 8008ba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ba8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008bcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d128      	bne.n	8008c4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	791b      	ldrb	r3, [r3, #4]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d003      	beq.n	8008c28 <USB_EPClearStall+0x4c>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	791b      	ldrb	r3, [r3, #4]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d138      	bne.n	8008c9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	e027      	b.n	8008c9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	791b      	ldrb	r3, [r3, #4]
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d003      	beq.n	8008c7a <USB_EPClearStall+0x9e>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d10f      	bne.n	8008c9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008cc6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008cca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008cdc:	68f9      	ldr	r1, [r7, #12]
 8008cde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d22:	f023 0302 	bic.w	r3, r3, #2
 8008d26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d50:	f023 0303 	bic.w	r3, r3, #3
 8008d54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d64:	f043 0302 	orr.w	r3, r3, #2
 8008d68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d90:	68fb      	ldr	r3, [r7, #12]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	4013      	ands	r3, r2
 8008df4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	b29b      	uxth	r3, r3
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4013      	ands	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e34:	68bb      	ldr	r3, [r7, #8]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b087      	sub	sp, #28
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e72:	01db      	lsls	r3, r3, #7
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e90:	68bb      	ldr	r3, [r7, #8]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4b09      	ldr	r3, [pc, #36]	@ (8008f00 <USB_ActivateSetup+0x44>)
 8008eda:	4013      	ands	r3, r2
 8008edc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	fffff800 	.word	0xfffff800

08008f04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	333c      	adds	r3, #60	@ 0x3c
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4a26      	ldr	r2, [pc, #152]	@ (8008fbc <USB_EP0_OutStart+0xb8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d90a      	bls.n	8008f3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f38:	d101      	bne.n	8008f3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e037      	b.n	8008fae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f6c:	f043 0318 	orr.w	r3, r3, #24
 8008f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f80:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008f84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f86:	7afb      	ldrb	r3, [r7, #11]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d10f      	bne.n	8008fac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fa6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	4f54300a 	.word	0x4f54300a

08008fc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fd8:	d901      	bls.n	8008fde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e01b      	b.n	8009016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	daf2      	bge.n	8008fcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f043 0201 	orr.w	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009002:	d901      	bls.n	8009008 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e006      	b.n	8009016 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b01      	cmp	r3, #1
 8009012:	d0f0      	beq.n	8008ff6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
	...

08009024 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009030:	2010      	movs	r0, #16
 8009032:	f002 fafb 	bl	800b62c <USBD_static_malloc>
 8009036:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32b0      	adds	r2, #176	@ 0xb0
 8009048:	2100      	movs	r1, #0
 800904a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800904e:	2302      	movs	r3, #2
 8009050:	e048      	b.n	80090e4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	32b0      	adds	r2, #176	@ 0xb0
 800905c:	68f9      	ldr	r1, [r7, #12]
 800905e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	32b0      	adds	r2, #176	@ 0xb0
 800906c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7c1b      	ldrb	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10d      	bne.n	800909a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800907e:	4b1b      	ldr	r3, [pc, #108]	@ (80090ec <USBD_HID_Init+0xc8>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	f003 020f 	and.w	r2, r3, #15
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	3326      	adds	r3, #38	@ 0x26
 8009094:	2207      	movs	r2, #7
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e00c      	b.n	80090b4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800909a:	4b14      	ldr	r3, [pc, #80]	@ (80090ec <USBD_HID_Init+0xc8>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	f003 020f 	and.w	r2, r3, #15
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	3326      	adds	r3, #38	@ 0x26
 80090b0:	220a      	movs	r2, #10
 80090b2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80090b4:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <USBD_HID_Init+0xc8>)
 80090b6:	7819      	ldrb	r1, [r3, #0]
 80090b8:	2304      	movs	r3, #4
 80090ba:	2203      	movs	r2, #3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f002 f9a4 	bl	800b40a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <USBD_HID_Init+0xc8>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	f003 020f 	and.w	r2, r3, #15
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	3324      	adds	r3, #36	@ 0x24
 80090d8:	2201      	movs	r2, #1
 80090da:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	24000323 	.word	0x24000323

080090f0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80090fc:	4b1f      	ldr	r3, [pc, #124]	@ (800917c <USBD_HID_DeInit+0x8c>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f002 f9a7 	bl	800b456 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009108:	4b1c      	ldr	r3, [pc, #112]	@ (800917c <USBD_HID_DeInit+0x8c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 020f 	and.w	r2, r3, #15
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	440b      	add	r3, r1
 800911c:	3324      	adds	r3, #36	@ 0x24
 800911e:	2200      	movs	r2, #0
 8009120:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009122:	4b16      	ldr	r3, [pc, #88]	@ (800917c <USBD_HID_DeInit+0x8c>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f003 020f 	and.w	r2, r3, #15
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	3326      	adds	r3, #38	@ 0x26
 8009138:	2200      	movs	r2, #0
 800913a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	32b0      	adds	r2, #176	@ 0xb0
 8009146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d011      	beq.n	8009172 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	32b0      	adds	r2, #176	@ 0xb0
 8009158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915c:	4618      	mov	r0, r3
 800915e:	f002 fa73 	bl	800b648 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	32b0      	adds	r2, #176	@ 0xb0
 800916c:	2100      	movs	r1, #0
 800916e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	24000323 	.word	0x24000323

08009180 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	32b0      	adds	r2, #176	@ 0xb0
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e0e8      	b.n	800937e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d046      	beq.n	8009246 <USBD_HID_Setup+0xc6>
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	f040 80d8 	bne.w	800936e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	785b      	ldrb	r3, [r3, #1]
 80091c2:	3b02      	subs	r3, #2
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	d836      	bhi.n	8009236 <USBD_HID_Setup+0xb6>
 80091c8:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <USBD_HID_Setup+0x50>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	08009227 	.word	0x08009227
 80091d4:	08009207 	.word	0x08009207
 80091d8:	08009237 	.word	0x08009237
 80091dc:	08009237 	.word	0x08009237
 80091e0:	08009237 	.word	0x08009237
 80091e4:	08009237 	.word	0x08009237
 80091e8:	08009237 	.word	0x08009237
 80091ec:	08009237 	.word	0x08009237
 80091f0:	08009215 	.word	0x08009215
 80091f4:	080091f9 	.word	0x080091f9
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	885b      	ldrh	r3, [r3, #2]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]
          break;
 8009204:	e01e      	b.n	8009244 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2201      	movs	r2, #1
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 fc0f 	bl	800aa30 <USBD_CtlSendData>
          break;
 8009212:	e017      	b.n	8009244 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	885b      	ldrh	r3, [r3, #2]
 8009218:	0a1b      	lsrs	r3, r3, #8
 800921a:	b29b      	uxth	r3, r3
 800921c:	b2db      	uxtb	r3, r3
 800921e:	461a      	mov	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	605a      	str	r2, [r3, #4]
          break;
 8009224:	e00e      	b.n	8009244 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3304      	adds	r3, #4
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f001 fbfe 	bl	800aa30 <USBD_CtlSendData>
          break;
 8009234:	e006      	b.n	8009244 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 fb7c 	bl	800a936 <USBD_CtlError>
          ret = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	75fb      	strb	r3, [r7, #23]
          break;
 8009242:	bf00      	nop
      }
      break;
 8009244:	e09a      	b.n	800937c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	2b0b      	cmp	r3, #11
 800924c:	f200 8086 	bhi.w	800935c <USBD_HID_Setup+0x1dc>
 8009250:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <USBD_HID_Setup+0xd8>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	08009289 	.word	0x08009289
 800925c:	0800936b 	.word	0x0800936b
 8009260:	0800935d 	.word	0x0800935d
 8009264:	0800935d 	.word	0x0800935d
 8009268:	0800935d 	.word	0x0800935d
 800926c:	0800935d 	.word	0x0800935d
 8009270:	080092b3 	.word	0x080092b3
 8009274:	0800935d 	.word	0x0800935d
 8009278:	0800935d 	.word	0x0800935d
 800927c:	0800935d 	.word	0x0800935d
 8009280:	0800930b 	.word	0x0800930b
 8009284:	08009335 	.word	0x08009335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b03      	cmp	r3, #3
 8009292:	d107      	bne.n	80092a4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009294:	f107 030a 	add.w	r3, r7, #10
 8009298:	2202      	movs	r2, #2
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 fbc7 	bl	800aa30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092a2:	e063      	b.n	800936c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f001 fb45 	bl	800a936 <USBD_CtlError>
            ret = USBD_FAIL;
 80092ac:	2303      	movs	r3, #3
 80092ae:	75fb      	strb	r3, [r7, #23]
          break;
 80092b0:	e05c      	b.n	800936c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	885b      	ldrh	r3, [r3, #2]
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b22      	cmp	r3, #34	@ 0x22
 80092bc:	d108      	bne.n	80092d0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	88db      	ldrh	r3, [r3, #6]
 80092c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80092c4:	bf28      	it	cs
 80092c6:	233f      	movcs	r3, #63	@ 0x3f
 80092c8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80092ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009388 <USBD_HID_Setup+0x208>)
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	e015      	b.n	80092fc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	0a1b      	lsrs	r3, r3, #8
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b21      	cmp	r3, #33	@ 0x21
 80092da:	d108      	bne.n	80092ee <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80092dc:	4b2b      	ldr	r3, [pc, #172]	@ (800938c <USBD_HID_Setup+0x20c>)
 80092de:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	88db      	ldrh	r3, [r3, #6]
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	bf28      	it	cs
 80092e8:	2309      	movcs	r3, #9
 80092ea:	82bb      	strh	r3, [r7, #20]
 80092ec:	e006      	b.n	80092fc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 fb20 	bl	800a936 <USBD_CtlError>
            ret = USBD_FAIL;
 80092f6:	2303      	movs	r3, #3
 80092f8:	75fb      	strb	r3, [r7, #23]
            break;
 80092fa:	e037      	b.n	800936c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80092fc:	8abb      	ldrh	r3, [r7, #20]
 80092fe:	461a      	mov	r2, r3
 8009300:	6939      	ldr	r1, [r7, #16]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 fb94 	bl	800aa30 <USBD_CtlSendData>
          break;
 8009308:	e030      	b.n	800936c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d107      	bne.n	8009326 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3308      	adds	r3, #8
 800931a:	2201      	movs	r2, #1
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 fb86 	bl	800aa30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009324:	e022      	b.n	800936c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 fb04 	bl	800a936 <USBD_CtlError>
            ret = USBD_FAIL;
 800932e:	2303      	movs	r3, #3
 8009330:	75fb      	strb	r3, [r7, #23]
          break;
 8009332:	e01b      	b.n	800936c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b03      	cmp	r3, #3
 800933e:	d106      	bne.n	800934e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	885b      	ldrh	r3, [r3, #2]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	461a      	mov	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800934c:	e00e      	b.n	800936c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 faf0 	bl	800a936 <USBD_CtlError>
            ret = USBD_FAIL;
 8009356:	2303      	movs	r3, #3
 8009358:	75fb      	strb	r3, [r7, #23]
          break;
 800935a:	e007      	b.n	800936c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 fae9 	bl	800a936 <USBD_CtlError>
          ret = USBD_FAIL;
 8009364:	2303      	movs	r3, #3
 8009366:	75fb      	strb	r3, [r7, #23]
          break;
 8009368:	e000      	b.n	800936c <USBD_HID_Setup+0x1ec>
          break;
 800936a:	bf00      	nop
      }
      break;
 800936c:	e006      	b.n	800937c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 fae0 	bl	800a936 <USBD_CtlError>
      ret = USBD_FAIL;
 8009376:	2303      	movs	r3, #3
 8009378:	75fb      	strb	r3, [r7, #23]
      break;
 800937a:	bf00      	nop
  }

  return (uint8_t)ret;
 800937c:	7dfb      	ldrb	r3, [r7, #23]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	240002e4 	.word	0x240002e4
 800938c:	240002cc 	.word	0x240002cc

08009390 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32b0      	adds	r2, #176	@ 0xb0
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e014      	b.n	80093e2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d10d      	bne.n	80093e0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	7b1b      	ldrb	r3, [r3, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d109      	bne.n	80093e0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2201      	movs	r2, #1
 80093d0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80093d2:	4b06      	ldr	r3, [pc, #24]	@ (80093ec <USBD_HID_SendReport+0x5c>)
 80093d4:	7819      	ldrb	r1, [r3, #0]
 80093d6:	88fb      	ldrh	r3, [r7, #6]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f002 f8e3 	bl	800b5a6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	24000323 	.word	0x24000323

080093f0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80093f8:	2181      	movs	r1, #129	@ 0x81
 80093fa:	4809      	ldr	r0, [pc, #36]	@ (8009420 <USBD_HID_GetFSCfgDesc+0x30>)
 80093fc:	f000 fc3b 	bl	8009c76 <USBD_GetEpDesc>
 8009400:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	220a      	movs	r2, #10
 800940c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2222      	movs	r2, #34	@ 0x22
 8009412:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009414:	4b02      	ldr	r3, [pc, #8]	@ (8009420 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	240002a8 	.word	0x240002a8

08009424 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800942c:	2181      	movs	r1, #129	@ 0x81
 800942e:	4809      	ldr	r0, [pc, #36]	@ (8009454 <USBD_HID_GetHSCfgDesc+0x30>)
 8009430:	f000 fc21 	bl	8009c76 <USBD_GetEpDesc>
 8009434:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2207      	movs	r2, #7
 8009440:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2222      	movs	r2, #34	@ 0x22
 8009446:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009448:	4b02      	ldr	r3, [pc, #8]	@ (8009454 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	240002a8 	.word	0x240002a8

08009458 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009460:	2181      	movs	r1, #129	@ 0x81
 8009462:	4809      	ldr	r0, [pc, #36]	@ (8009488 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009464:	f000 fc07 	bl	8009c76 <USBD_GetEpDesc>
 8009468:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	220a      	movs	r2, #10
 8009474:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2222      	movs	r2, #34	@ 0x22
 800947a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800947c:	4b02      	ldr	r3, [pc, #8]	@ (8009488 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	240002a8 	.word	0x240002a8

0800948c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32b0      	adds	r2, #176	@ 0xb0
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	2200      	movs	r2, #0
 80094a8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	220a      	movs	r2, #10
 80094c4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80094c6:	4b03      	ldr	r3, [pc, #12]	@ (80094d4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	240002d8 	.word	0x240002d8

080094d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	4613      	mov	r3, r2
 80094e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e01f      	b.n	8009530 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	79fa      	ldrb	r2, [r7, #7]
 8009522:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 febb 	bl	800b2a0 <USBD_LL_Init>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800954c:	2303      	movs	r3, #3
 800954e:	e025      	b.n	800959c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	32ae      	adds	r2, #174	@ 0xae
 8009562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00f      	beq.n	800958c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	32ae      	adds	r2, #174	@ 0xae
 8009576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957c:	f107 020e 	add.w	r2, r7, #14
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 ff11 	bl	800b3d4 <USBD_LL_Start>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d009      	beq.n	8009600 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	4611      	mov	r1, r2
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	78fa      	ldrb	r2, [r7, #3]
 8009624:	4611      	mov	r1, r2
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	4618      	mov	r0, r3
 8009652:	f001 f936 	bl	800a8c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009664:	461a      	mov	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009672:	f003 031f 	and.w	r3, r3, #31
 8009676:	2b02      	cmp	r3, #2
 8009678:	d01a      	beq.n	80096b0 <USBD_LL_SetupStage+0x72>
 800967a:	2b02      	cmp	r3, #2
 800967c:	d822      	bhi.n	80096c4 <USBD_LL_SetupStage+0x86>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <USBD_LL_SetupStage+0x4a>
 8009682:	2b01      	cmp	r3, #1
 8009684:	d00a      	beq.n	800969c <USBD_LL_SetupStage+0x5e>
 8009686:	e01d      	b.n	80096c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fb63 	bl	8009d5c <USBD_StdDevReq>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]
      break;
 800969a:	e020      	b.n	80096de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fbcb 	bl	8009e40 <USBD_StdItfReq>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
      break;
 80096ae:	e016      	b.n	80096de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fc2d 	bl	8009f18 <USBD_StdEPReq>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]
      break;
 80096c2:	e00c      	b.n	80096de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 fede 	bl	800b494 <USBD_LL_StallEP>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
      break;
 80096dc:	bf00      	nop
  }

  return ret;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	460b      	mov	r3, r1
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d16e      	bne.n	80097de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009706:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800970e:	2b03      	cmp	r3, #3
 8009710:	f040 8098 	bne.w	8009844 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	429a      	cmp	r2, r3
 800971e:	d913      	bls.n	8009748 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	1ad2      	subs	r2, r2, r3
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	68da      	ldr	r2, [r3, #12]
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	4293      	cmp	r3, r2
 8009738:	bf28      	it	cs
 800973a:	4613      	movcs	r3, r2
 800973c:	461a      	mov	r2, r3
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f001 f9a1 	bl	800aa88 <USBD_CtlContinueRx>
 8009746:	e07d      	b.n	8009844 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	2b02      	cmp	r3, #2
 8009754:	d014      	beq.n	8009780 <USBD_LL_DataOutStage+0x98>
 8009756:	2b02      	cmp	r3, #2
 8009758:	d81d      	bhi.n	8009796 <USBD_LL_DataOutStage+0xae>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <USBD_LL_DataOutStage+0x7c>
 800975e:	2b01      	cmp	r3, #1
 8009760:	d003      	beq.n	800976a <USBD_LL_DataOutStage+0x82>
 8009762:	e018      	b.n	8009796 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	75bb      	strb	r3, [r7, #22]
            break;
 8009768:	e018      	b.n	800979c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009770:	b2db      	uxtb	r3, r3
 8009772:	4619      	mov	r1, r3
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 fa64 	bl	8009c42 <USBD_CoreFindIF>
 800977a:	4603      	mov	r3, r0
 800977c:	75bb      	strb	r3, [r7, #22]
            break;
 800977e:	e00d      	b.n	800979c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009786:	b2db      	uxtb	r3, r3
 8009788:	4619      	mov	r1, r3
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fa66 	bl	8009c5c <USBD_CoreFindEP>
 8009790:	4603      	mov	r3, r0
 8009792:	75bb      	strb	r3, [r7, #22]
            break;
 8009794:	e002      	b.n	800979c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	75bb      	strb	r3, [r7, #22]
            break;
 800979a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800979c:	7dbb      	ldrb	r3, [r7, #22]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d119      	bne.n	80097d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	d113      	bne.n	80097d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80097ae:	7dba      	ldrb	r2, [r7, #22]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	32ae      	adds	r2, #174	@ 0xae
 80097b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80097be:	7dba      	ldrb	r2, [r7, #22]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80097c6:	7dba      	ldrb	r2, [r7, #22]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	32ae      	adds	r2, #174	@ 0xae
 80097cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f001 f967 	bl	800aaaa <USBD_CtlSendStatus>
 80097dc:	e032      	b.n	8009844 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f000 fa37 	bl	8009c5c <USBD_CoreFindEP>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097f2:	7dbb      	ldrb	r3, [r7, #22]
 80097f4:	2bff      	cmp	r3, #255	@ 0xff
 80097f6:	d025      	beq.n	8009844 <USBD_LL_DataOutStage+0x15c>
 80097f8:	7dbb      	ldrb	r3, [r7, #22]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d122      	bne.n	8009844 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b03      	cmp	r3, #3
 8009808:	d117      	bne.n	800983a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800980a:	7dba      	ldrb	r2, [r7, #22]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	32ae      	adds	r2, #174	@ 0xae
 8009810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00f      	beq.n	800983a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800981a:	7dba      	ldrb	r2, [r7, #22]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009822:	7dba      	ldrb	r2, [r7, #22]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	32ae      	adds	r2, #174	@ 0xae
 8009828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	7afa      	ldrb	r2, [r7, #11]
 8009830:	4611      	mov	r1, r2
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	4798      	blx	r3
 8009836:	4603      	mov	r3, r0
 8009838:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	e000      	b.n	8009846 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	460b      	mov	r3, r1
 8009858:	607a      	str	r2, [r7, #4]
 800985a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d16f      	bne.n	8009942 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3314      	adds	r3, #20
 8009866:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800986e:	2b02      	cmp	r3, #2
 8009870:	d15a      	bne.n	8009928 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	429a      	cmp	r2, r3
 800987c:	d914      	bls.n	80098a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	1ad2      	subs	r2, r2, r3
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	461a      	mov	r2, r3
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f001 f8e6 	bl	800aa66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800989a:	2300      	movs	r3, #0
 800989c:	2200      	movs	r2, #0
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f001 fea1 	bl	800b5e8 <USBD_LL_PrepareReceive>
 80098a6:	e03f      	b.n	8009928 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d11c      	bne.n	80098ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098bc:	429a      	cmp	r2, r3
 80098be:	d316      	bcc.n	80098ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d20f      	bcs.n	80098ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098ce:	2200      	movs	r2, #0
 80098d0:	2100      	movs	r1, #0
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f001 f8c7 	bl	800aa66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098e0:	2300      	movs	r3, #0
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f001 fe7e 	bl	800b5e8 <USBD_LL_PrepareReceive>
 80098ec:	e01c      	b.n	8009928 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d10f      	bne.n	800991a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d009      	beq.n	800991a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800991a:	2180      	movs	r1, #128	@ 0x80
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f001 fdb9 	bl	800b494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f001 f8d4 	bl	800aad0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d03a      	beq.n	80099a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7ff fe42 	bl	80095bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009940:	e032      	b.n	80099a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009942:	7afb      	ldrb	r3, [r7, #11]
 8009944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009948:	b2db      	uxtb	r3, r3
 800994a:	4619      	mov	r1, r3
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f985 	bl	8009c5c <USBD_CoreFindEP>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	2bff      	cmp	r3, #255	@ 0xff
 800995a:	d025      	beq.n	80099a8 <USBD_LL_DataInStage+0x15a>
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d122      	bne.n	80099a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b03      	cmp	r3, #3
 800996c:	d11c      	bne.n	80099a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800996e:	7dfa      	ldrb	r2, [r7, #23]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	32ae      	adds	r2, #174	@ 0xae
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d014      	beq.n	80099a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800997e:	7dfa      	ldrb	r2, [r7, #23]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009986:	7dfa      	ldrb	r2, [r7, #23]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	32ae      	adds	r2, #174	@ 0xae
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	7afa      	ldrb	r2, [r7, #11]
 8009994:	4611      	mov	r1, r2
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	4798      	blx	r3
 800999a:	4603      	mov	r3, r0
 800999c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800999e:	7dbb      	ldrb	r3, [r7, #22]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099a4:	7dbb      	ldrb	r3, [r7, #22]
 80099a6:	e000      	b.n	80099aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d014      	beq.n	8009a18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	6852      	ldr	r2, [r2, #4]
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	4611      	mov	r1, r2
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	4798      	blx	r3
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a14:	2303      	movs	r3, #3
 8009a16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a18:	2340      	movs	r3, #64	@ 0x40
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fcf3 	bl	800b40a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2240      	movs	r2, #64	@ 0x40
 8009a30:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a34:	2340      	movs	r3, #64	@ 0x40
 8009a36:	2200      	movs	r2, #0
 8009a38:	2180      	movs	r1, #128	@ 0x80
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 fce5 	bl	800b40a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2240      	movs	r2, #64	@ 0x40
 8009a4a:	621a      	str	r2, [r3, #32]

  return ret;
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d006      	beq.n	8009a98 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d106      	bne.n	8009ad0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d110      	bne.n	8009b14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b082      	sub	sp, #8
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	32ae      	adds	r2, #174	@ 0xae
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e01c      	b.n	8009b7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d115      	bne.n	8009b78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	32ae      	adds	r2, #174	@ 0xae
 8009b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	32ae      	adds	r2, #174	@ 0xae
 8009b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	4611      	mov	r1, r2
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	32ae      	adds	r2, #174	@ 0xae
 8009b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e01c      	b.n	8009bde <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d115      	bne.n	8009bdc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	32ae      	adds	r2, #174	@ 0xae
 8009bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	32ae      	adds	r2, #174	@ 0xae
 8009bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	78fa      	ldrb	r2, [r7, #3]
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00e      	beq.n	8009c38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6852      	ldr	r2, [r2, #4]
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	4611      	mov	r1, r2
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	885b      	ldrh	r3, [r3, #2]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d91f      	bls.n	8009cdc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009ca2:	e013      	b.n	8009ccc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ca4:	f107 030a 	add.w	r3, r7, #10
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	f000 f81b 	bl	8009ce6 <USBD_GetNextDesc>
 8009cb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d108      	bne.n	8009ccc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	789b      	ldrb	r3, [r3, #2]
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d008      	beq.n	8009cda <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	885b      	ldrh	r3, [r3, #2]
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	897b      	ldrh	r3, [r7, #10]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d8e5      	bhi.n	8009ca4 <USBD_GetEpDesc+0x2e>
 8009cd8:	e000      	b.n	8009cdc <USBD_GetEpDesc+0x66>
          break;
 8009cda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009cdc:	693b      	ldr	r3, [r7, #16]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d10:	68fb      	ldr	r3, [r7, #12]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b087      	sub	sp, #28
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	3301      	adds	r3, #1
 8009d34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d3c:	8a3b      	ldrh	r3, [r7, #16]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	b21a      	sxth	r2, r3
 8009d42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	b21b      	sxth	r3, r3
 8009d4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009d4c:	89fb      	ldrh	r3, [r7, #14]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	371c      	adds	r7, #28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d72:	2b40      	cmp	r3, #64	@ 0x40
 8009d74:	d005      	beq.n	8009d82 <USBD_StdDevReq+0x26>
 8009d76:	2b40      	cmp	r3, #64	@ 0x40
 8009d78:	d857      	bhi.n	8009e2a <USBD_StdDevReq+0xce>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00f      	beq.n	8009d9e <USBD_StdDevReq+0x42>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	d153      	bne.n	8009e2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	32ae      	adds	r2, #174	@ 0xae
 8009d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9c:	e04a      	b.n	8009e34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b09      	cmp	r3, #9
 8009da4:	d83b      	bhi.n	8009e1e <USBD_StdDevReq+0xc2>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <USBD_StdDevReq+0x50>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009e01 	.word	0x08009e01
 8009db0:	08009e15 	.word	0x08009e15
 8009db4:	08009e1f 	.word	0x08009e1f
 8009db8:	08009e0b 	.word	0x08009e0b
 8009dbc:	08009e1f 	.word	0x08009e1f
 8009dc0:	08009ddf 	.word	0x08009ddf
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009e1f 	.word	0x08009e1f
 8009dcc:	08009df7 	.word	0x08009df7
 8009dd0:	08009de9 	.word	0x08009de9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fa3c 	bl	800a254 <USBD_GetDescriptor>
          break;
 8009ddc:	e024      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fbcb 	bl	800a57c <USBD_SetAddress>
          break;
 8009de6:	e01f      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fc0a 	bl	800a604 <USBD_SetConfig>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
          break;
 8009df4:	e018      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fcad 	bl	800a758 <USBD_GetConfig>
          break;
 8009dfe:	e013      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fcde 	bl	800a7c4 <USBD_GetStatus>
          break;
 8009e08:	e00e      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fd0d 	bl	800a82c <USBD_SetFeature>
          break;
 8009e12:	e009      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fd31 	bl	800a87e <USBD_ClrFeature>
          break;
 8009e1c:	e004      	b.n	8009e28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fd88 	bl	800a936 <USBD_CtlError>
          break;
 8009e26:	bf00      	nop
      }
      break;
 8009e28:	e004      	b.n	8009e34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fd82 	bl	800a936 <USBD_CtlError>
      break;
 8009e32:	bf00      	nop
  }

  return ret;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop

08009e40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e56:	2b40      	cmp	r3, #64	@ 0x40
 8009e58:	d005      	beq.n	8009e66 <USBD_StdItfReq+0x26>
 8009e5a:	2b40      	cmp	r3, #64	@ 0x40
 8009e5c:	d852      	bhi.n	8009f04 <USBD_StdItfReq+0xc4>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <USBD_StdItfReq+0x26>
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	d14e      	bne.n	8009f04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d840      	bhi.n	8009ef6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	889b      	ldrh	r3, [r3, #4]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d836      	bhi.n	8009eec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	889b      	ldrh	r3, [r3, #4]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fedb 	bl	8009c42 <USBD_CoreFindIF>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2bff      	cmp	r3, #255	@ 0xff
 8009e94:	d01d      	beq.n	8009ed2 <USBD_StdItfReq+0x92>
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d11a      	bne.n	8009ed2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009e9c:	7bba      	ldrb	r2, [r7, #14]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	32ae      	adds	r2, #174	@ 0xae
 8009ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00f      	beq.n	8009ecc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009eac:	7bba      	ldrb	r2, [r7, #14]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009eb4:	7bba      	ldrb	r2, [r7, #14]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	32ae      	adds	r2, #174	@ 0xae
 8009eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009eca:	e004      	b.n	8009ed6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ed0:	e001      	b.n	8009ed6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	88db      	ldrh	r3, [r3, #6]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d110      	bne.n	8009f00 <USBD_StdItfReq+0xc0>
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10d      	bne.n	8009f00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fde0 	bl	800aaaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009eea:	e009      	b.n	8009f00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fd21 	bl	800a936 <USBD_CtlError>
          break;
 8009ef4:	e004      	b.n	8009f00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fd1c 	bl	800a936 <USBD_CtlError>
          break;
 8009efe:	e000      	b.n	8009f02 <USBD_StdItfReq+0xc2>
          break;
 8009f00:	bf00      	nop
      }
      break;
 8009f02:	e004      	b.n	8009f0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fd15 	bl	800a936 <USBD_CtlError>
      break;
 8009f0c:	bf00      	nop
  }

  return ret;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	889b      	ldrh	r3, [r3, #4]
 8009f2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f34:	2b40      	cmp	r3, #64	@ 0x40
 8009f36:	d007      	beq.n	8009f48 <USBD_StdEPReq+0x30>
 8009f38:	2b40      	cmp	r3, #64	@ 0x40
 8009f3a:	f200 817f 	bhi.w	800a23c <USBD_StdEPReq+0x324>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d02a      	beq.n	8009f98 <USBD_StdEPReq+0x80>
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	f040 817a 	bne.w	800a23c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff fe85 	bl	8009c5c <USBD_CoreFindEP>
 8009f52:	4603      	mov	r3, r0
 8009f54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f56:	7b7b      	ldrb	r3, [r7, #13]
 8009f58:	2bff      	cmp	r3, #255	@ 0xff
 8009f5a:	f000 8174 	beq.w	800a246 <USBD_StdEPReq+0x32e>
 8009f5e:	7b7b      	ldrb	r3, [r7, #13]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f040 8170 	bne.w	800a246 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009f66:	7b7a      	ldrb	r2, [r7, #13]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009f6e:	7b7a      	ldrb	r2, [r7, #13]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	32ae      	adds	r2, #174	@ 0xae
 8009f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 8163 	beq.w	800a246 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009f80:	7b7a      	ldrb	r2, [r7, #13]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	32ae      	adds	r2, #174	@ 0xae
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f96:	e156      	b.n	800a246 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d008      	beq.n	8009fb2 <USBD_StdEPReq+0x9a>
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	f300 8145 	bgt.w	800a230 <USBD_StdEPReq+0x318>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 809b 	beq.w	800a0e2 <USBD_StdEPReq+0x1ca>
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d03c      	beq.n	800a02a <USBD_StdEPReq+0x112>
 8009fb0:	e13e      	b.n	800a230 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d002      	beq.n	8009fc4 <USBD_StdEPReq+0xac>
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d016      	beq.n	8009ff0 <USBD_StdEPReq+0xd8>
 8009fc2:	e02c      	b.n	800a01e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00d      	beq.n	8009fe6 <USBD_StdEPReq+0xce>
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b80      	cmp	r3, #128	@ 0x80
 8009fce:	d00a      	beq.n	8009fe6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 fa5d 	bl	800b494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fda:	2180      	movs	r1, #128	@ 0x80
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 fa59 	bl	800b494 <USBD_LL_StallEP>
 8009fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fe4:	e020      	b.n	800a028 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fca4 	bl	800a936 <USBD_CtlError>
              break;
 8009fee:	e01b      	b.n	800a028 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	885b      	ldrh	r3, [r3, #2]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10e      	bne.n	800a016 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <USBD_StdEPReq+0xfe>
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	2b80      	cmp	r3, #128	@ 0x80
 800a002:	d008      	beq.n	800a016 <USBD_StdEPReq+0xfe>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	88db      	ldrh	r3, [r3, #6]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 fa3f 	bl	800b494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fd47 	bl	800aaaa <USBD_CtlSendStatus>

              break;
 800a01c:	e004      	b.n	800a028 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fc88 	bl	800a936 <USBD_CtlError>
              break;
 800a026:	bf00      	nop
          }
          break;
 800a028:	e107      	b.n	800a23a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d002      	beq.n	800a03c <USBD_StdEPReq+0x124>
 800a036:	2b03      	cmp	r3, #3
 800a038:	d016      	beq.n	800a068 <USBD_StdEPReq+0x150>
 800a03a:	e04b      	b.n	800a0d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a03c:	7bbb      	ldrb	r3, [r7, #14]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00d      	beq.n	800a05e <USBD_StdEPReq+0x146>
 800a042:	7bbb      	ldrb	r3, [r7, #14]
 800a044:	2b80      	cmp	r3, #128	@ 0x80
 800a046:	d00a      	beq.n	800a05e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f001 fa21 	bl	800b494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a052:	2180      	movs	r1, #128	@ 0x80
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f001 fa1d 	bl	800b494 <USBD_LL_StallEP>
 800a05a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a05c:	e040      	b.n	800a0e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fc68 	bl	800a936 <USBD_CtlError>
              break;
 800a066:	e03b      	b.n	800a0e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	885b      	ldrh	r3, [r3, #2]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d136      	bne.n	800a0de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fa27 	bl	800b4d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fd10 	bl	800aaaa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff fde4 	bl	8009c5c <USBD_CoreFindEP>
 800a094:	4603      	mov	r3, r0
 800a096:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a098:	7b7b      	ldrb	r3, [r7, #13]
 800a09a:	2bff      	cmp	r3, #255	@ 0xff
 800a09c:	d01f      	beq.n	800a0de <USBD_StdEPReq+0x1c6>
 800a09e:	7b7b      	ldrb	r3, [r7, #13]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d11c      	bne.n	800a0de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a0a4:	7b7a      	ldrb	r2, [r7, #13]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a0ac:	7b7a      	ldrb	r2, [r7, #13]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	32ae      	adds	r2, #174	@ 0xae
 800a0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d010      	beq.n	800a0de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a0bc:	7b7a      	ldrb	r2, [r7, #13]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	32ae      	adds	r2, #174	@ 0xae
 800a0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	4798      	blx	r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a0d2:	e004      	b.n	800a0de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fc2d 	bl	800a936 <USBD_CtlError>
              break;
 800a0dc:	e000      	b.n	800a0e0 <USBD_StdEPReq+0x1c8>
              break;
 800a0de:	bf00      	nop
          }
          break;
 800a0e0:	e0ab      	b.n	800a23a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d002      	beq.n	800a0f4 <USBD_StdEPReq+0x1dc>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d032      	beq.n	800a158 <USBD_StdEPReq+0x240>
 800a0f2:	e097      	b.n	800a224 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <USBD_StdEPReq+0x1f2>
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b80      	cmp	r3, #128	@ 0x80
 800a0fe:	d004      	beq.n	800a10a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fc17 	bl	800a936 <USBD_CtlError>
                break;
 800a108:	e091      	b.n	800a22e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a10a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da0b      	bge.n	800a12a <USBD_StdEPReq+0x212>
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	3310      	adds	r3, #16
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	4413      	add	r3, r2
 800a126:	3304      	adds	r3, #4
 800a128:	e00b      	b.n	800a142 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	4413      	add	r3, r2
 800a140:	3304      	adds	r3, #4
 800a142:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2200      	movs	r2, #0
 800a148:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2202      	movs	r2, #2
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fc6d 	bl	800aa30 <USBD_CtlSendData>
              break;
 800a156:	e06a      	b.n	800a22e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	da11      	bge.n	800a184 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	f003 020f 	and.w	r2, r3, #15
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	440b      	add	r3, r1
 800a172:	3324      	adds	r3, #36	@ 0x24
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d117      	bne.n	800a1aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fbda 	bl	800a936 <USBD_CtlError>
                  break;
 800a182:	e054      	b.n	800a22e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	f003 020f 	and.w	r2, r3, #15
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d104      	bne.n	800a1aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fbc7 	bl	800a936 <USBD_CtlError>
                  break;
 800a1a8:	e041      	b.n	800a22e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	da0b      	bge.n	800a1ca <USBD_StdEPReq+0x2b2>
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	3310      	adds	r3, #16
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	e00b      	b.n	800a1e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	4413      	add	r3, r2
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <USBD_StdEPReq+0x2d8>
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b80      	cmp	r3, #128	@ 0x80
 800a1ee:	d103      	bne.n	800a1f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	e00e      	b.n	800a216 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f987 	bl	800b510 <USBD_LL_IsStallEP>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2201      	movs	r2, #1
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	e002      	b.n	800a216 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2202      	movs	r2, #2
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fc07 	bl	800aa30 <USBD_CtlSendData>
              break;
 800a222:	e004      	b.n	800a22e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fb85 	bl	800a936 <USBD_CtlError>
              break;
 800a22c:	bf00      	nop
          }
          break;
 800a22e:	e004      	b.n	800a23a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fb7f 	bl	800a936 <USBD_CtlError>
          break;
 800a238:	bf00      	nop
      }
      break;
 800a23a:	e005      	b.n	800a248 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fb79 	bl	800a936 <USBD_CtlError>
      break;
 800a244:	e000      	b.n	800a248 <USBD_StdEPReq+0x330>
      break;
 800a246:	bf00      	nop
  }

  return ret;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	885b      	ldrh	r3, [r3, #2]
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	b29b      	uxth	r3, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	2b0e      	cmp	r3, #14
 800a276:	f200 8152 	bhi.w	800a51e <USBD_GetDescriptor+0x2ca>
 800a27a:	a201      	add	r2, pc, #4	@ (adr r2, 800a280 <USBD_GetDescriptor+0x2c>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a2f1 	.word	0x0800a2f1
 800a284:	0800a309 	.word	0x0800a309
 800a288:	0800a349 	.word	0x0800a349
 800a28c:	0800a51f 	.word	0x0800a51f
 800a290:	0800a51f 	.word	0x0800a51f
 800a294:	0800a4bf 	.word	0x0800a4bf
 800a298:	0800a4eb 	.word	0x0800a4eb
 800a29c:	0800a51f 	.word	0x0800a51f
 800a2a0:	0800a51f 	.word	0x0800a51f
 800a2a4:	0800a51f 	.word	0x0800a51f
 800a2a8:	0800a51f 	.word	0x0800a51f
 800a2ac:	0800a51f 	.word	0x0800a51f
 800a2b0:	0800a51f 	.word	0x0800a51f
 800a2b4:	0800a51f 	.word	0x0800a51f
 800a2b8:	0800a2bd 	.word	0x0800a2bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	7c12      	ldrb	r2, [r2, #16]
 800a2d4:	f107 0108 	add.w	r1, r7, #8
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
 800a2dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2de:	e126      	b.n	800a52e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fb27 	bl	800a936 <USBD_CtlError>
        err++;
 800a2e8:	7afb      	ldrb	r3, [r7, #11]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	72fb      	strb	r3, [r7, #11]
      break;
 800a2ee:	e11e      	b.n	800a52e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	7c12      	ldrb	r2, [r2, #16]
 800a2fc:	f107 0108 	add.w	r1, r7, #8
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
      break;
 800a306:	e112      	b.n	800a52e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7c1b      	ldrb	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10d      	bne.n	800a32c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a318:	f107 0208 	add.w	r2, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	2202      	movs	r2, #2
 800a328:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a32a:	e100      	b.n	800a52e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	f107 0208 	add.w	r2, r7, #8
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3301      	adds	r3, #1
 800a342:	2202      	movs	r2, #2
 800a344:	701a      	strb	r2, [r3, #0]
      break;
 800a346:	e0f2      	b.n	800a52e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	885b      	ldrh	r3, [r3, #2]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b05      	cmp	r3, #5
 800a350:	f200 80ac 	bhi.w	800a4ac <USBD_GetDescriptor+0x258>
 800a354:	a201      	add	r2, pc, #4	@ (adr r2, 800a35c <USBD_GetDescriptor+0x108>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a375 	.word	0x0800a375
 800a360:	0800a3a9 	.word	0x0800a3a9
 800a364:	0800a3dd 	.word	0x0800a3dd
 800a368:	0800a411 	.word	0x0800a411
 800a36c:	0800a445 	.word	0x0800a445
 800a370:	0800a479 	.word	0x0800a479
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	7c12      	ldrb	r2, [r2, #16]
 800a38c:	f107 0108 	add.w	r1, r7, #8
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
 800a394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a396:	e091      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 facb 	bl	800a936 <USBD_CtlError>
            err++;
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3a6:	e089      	b.n	800a4bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00b      	beq.n	800a3cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	7c12      	ldrb	r2, [r2, #16]
 800a3c0:	f107 0108 	add.w	r1, r7, #8
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
 800a3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ca:	e077      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fab1 	bl	800a936 <USBD_CtlError>
            err++;
 800a3d4:	7afb      	ldrb	r3, [r7, #11]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3da:	e06f      	b.n	800a4bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	7c12      	ldrb	r2, [r2, #16]
 800a3f4:	f107 0108 	add.w	r1, r7, #8
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	4798      	blx	r3
 800a3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3fe:	e05d      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fa97 	bl	800a936 <USBD_CtlError>
            err++;
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	3301      	adds	r3, #1
 800a40c:	72fb      	strb	r3, [r7, #11]
          break;
 800a40e:	e055      	b.n	800a4bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	7c12      	ldrb	r2, [r2, #16]
 800a428:	f107 0108 	add.w	r1, r7, #8
 800a42c:	4610      	mov	r0, r2
 800a42e:	4798      	blx	r3
 800a430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a432:	e043      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fa7d 	bl	800a936 <USBD_CtlError>
            err++;
 800a43c:	7afb      	ldrb	r3, [r7, #11]
 800a43e:	3301      	adds	r3, #1
 800a440:	72fb      	strb	r3, [r7, #11]
          break;
 800a442:	e03b      	b.n	800a4bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00b      	beq.n	800a468 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	7c12      	ldrb	r2, [r2, #16]
 800a45c:	f107 0108 	add.w	r1, r7, #8
 800a460:	4610      	mov	r0, r2
 800a462:	4798      	blx	r3
 800a464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a466:	e029      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fa63 	bl	800a936 <USBD_CtlError>
            err++;
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	3301      	adds	r3, #1
 800a474:	72fb      	strb	r3, [r7, #11]
          break;
 800a476:	e021      	b.n	800a4bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00b      	beq.n	800a49c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	7c12      	ldrb	r2, [r2, #16]
 800a490:	f107 0108 	add.w	r1, r7, #8
 800a494:	4610      	mov	r0, r2
 800a496:	4798      	blx	r3
 800a498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a49a:	e00f      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fa49 	bl	800a936 <USBD_CtlError>
            err++;
 800a4a4:	7afb      	ldrb	r3, [r7, #11]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4aa:	e007      	b.n	800a4bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa41 	bl	800a936 <USBD_CtlError>
          err++;
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a4ba:	bf00      	nop
      }
      break;
 800a4bc:	e037      	b.n	800a52e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7c1b      	ldrb	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d109      	bne.n	800a4da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ce:	f107 0208 	add.w	r2, r7, #8
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	4798      	blx	r3
 800a4d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4d8:	e029      	b.n	800a52e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fa2a 	bl	800a936 <USBD_CtlError>
        err++;
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a4e8:	e021      	b.n	800a52e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	7c1b      	ldrb	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10d      	bne.n	800a50e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4fa:	f107 0208 	add.w	r2, r7, #8
 800a4fe:	4610      	mov	r0, r2
 800a500:	4798      	blx	r3
 800a502:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	3301      	adds	r3, #1
 800a508:	2207      	movs	r2, #7
 800a50a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a50c:	e00f      	b.n	800a52e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fa10 	bl	800a936 <USBD_CtlError>
        err++;
 800a516:	7afb      	ldrb	r3, [r7, #11]
 800a518:	3301      	adds	r3, #1
 800a51a:	72fb      	strb	r3, [r7, #11]
      break;
 800a51c:	e007      	b.n	800a52e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fa08 	bl	800a936 <USBD_CtlError>
      err++;
 800a526:	7afb      	ldrb	r3, [r7, #11]
 800a528:	3301      	adds	r3, #1
 800a52a:	72fb      	strb	r3, [r7, #11]
      break;
 800a52c:	bf00      	nop
  }

  if (err != 0U)
 800a52e:	7afb      	ldrb	r3, [r7, #11]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d11e      	bne.n	800a572 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	88db      	ldrh	r3, [r3, #6]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d016      	beq.n	800a56a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a53c:	893b      	ldrh	r3, [r7, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00e      	beq.n	800a560 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	88da      	ldrh	r2, [r3, #6]
 800a546:	893b      	ldrh	r3, [r7, #8]
 800a548:	4293      	cmp	r3, r2
 800a54a:	bf28      	it	cs
 800a54c:	4613      	movcs	r3, r2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a552:	893b      	ldrh	r3, [r7, #8]
 800a554:	461a      	mov	r2, r3
 800a556:	68f9      	ldr	r1, [r7, #12]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fa69 	bl	800aa30 <USBD_CtlSendData>
 800a55e:	e009      	b.n	800a574 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f9e7 	bl	800a936 <USBD_CtlError>
 800a568:	e004      	b.n	800a574 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fa9d 	bl	800aaaa <USBD_CtlSendStatus>
 800a570:	e000      	b.n	800a574 <USBD_GetDescriptor+0x320>
    return;
 800a572:	bf00      	nop
  }
}
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop

0800a57c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	889b      	ldrh	r3, [r3, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d131      	bne.n	800a5f2 <USBD_SetAddress+0x76>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	88db      	ldrh	r3, [r3, #6]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d12d      	bne.n	800a5f2 <USBD_SetAddress+0x76>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	885b      	ldrh	r3, [r3, #2]
 800a59a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a59c:	d829      	bhi.n	800a5f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	885b      	ldrh	r3, [r3, #2]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d104      	bne.n	800a5c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f9bc 	bl	800a936 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5be:	e01d      	b.n	800a5fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7bfa      	ldrb	r2, [r7, #15]
 800a5c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 ffcb 	bl	800b568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa69 	bl	800aaaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e6:	e009      	b.n	800a5fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f0:	e004      	b.n	800a5fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f99e 	bl	800a936 <USBD_CtlError>
  }
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	b2da      	uxtb	r2, r3
 800a618:	4b4e      	ldr	r3, [pc, #312]	@ (800a754 <USBD_SetConfig+0x150>)
 800a61a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a61c:	4b4d      	ldr	r3, [pc, #308]	@ (800a754 <USBD_SetConfig+0x150>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d905      	bls.n	800a630 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f985 	bl	800a936 <USBD_CtlError>
    return USBD_FAIL;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e08c      	b.n	800a74a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a636:	b2db      	uxtb	r3, r3
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d002      	beq.n	800a642 <USBD_SetConfig+0x3e>
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d029      	beq.n	800a694 <USBD_SetConfig+0x90>
 800a640:	e075      	b.n	800a72e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a642:	4b44      	ldr	r3, [pc, #272]	@ (800a754 <USBD_SetConfig+0x150>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d020      	beq.n	800a68c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a64a:	4b42      	ldr	r3, [pc, #264]	@ (800a754 <USBD_SetConfig+0x150>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a654:	4b3f      	ldr	r3, [pc, #252]	@ (800a754 <USBD_SetConfig+0x150>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7fe ffb9 	bl	80095d2 <USBD_SetClassConfig>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d008      	beq.n	800a67c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f962 	bl	800a936 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a67a:	e065      	b.n	800a748 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fa14 	bl	800aaaa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2203      	movs	r2, #3
 800a686:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a68a:	e05d      	b.n	800a748 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fa0c 	bl	800aaaa <USBD_CtlSendStatus>
      break;
 800a692:	e059      	b.n	800a748 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a694:	4b2f      	ldr	r3, [pc, #188]	@ (800a754 <USBD_SetConfig+0x150>)
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d112      	bne.n	800a6c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800a754 <USBD_SetConfig+0x150>)
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6ae:	4b29      	ldr	r3, [pc, #164]	@ (800a754 <USBD_SetConfig+0x150>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7fe ffa8 	bl	800960a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f9f5 	bl	800aaaa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6c0:	e042      	b.n	800a748 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a6c2:	4b24      	ldr	r3, [pc, #144]	@ (800a754 <USBD_SetConfig+0x150>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d02a      	beq.n	800a726 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7fe ff96 	bl	800960a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a6de:	4b1d      	ldr	r3, [pc, #116]	@ (800a754 <USBD_SetConfig+0x150>)
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a754 <USBD_SetConfig+0x150>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fe ff6f 	bl	80095d2 <USBD_SetClassConfig>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00f      	beq.n	800a71e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f918 	bl	800a936 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7fe ff7b 	bl	800960a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a71c:	e014      	b.n	800a748 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f9c3 	bl	800aaaa <USBD_CtlSendStatus>
      break;
 800a724:	e010      	b.n	800a748 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f9bf 	bl	800aaaa <USBD_CtlSendStatus>
      break;
 800a72c:	e00c      	b.n	800a748 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f900 	bl	800a936 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a736:	4b07      	ldr	r3, [pc, #28]	@ (800a754 <USBD_SetConfig+0x150>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7fe ff64 	bl	800960a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a742:	2303      	movs	r3, #3
 800a744:	73fb      	strb	r3, [r7, #15]
      break;
 800a746:	bf00      	nop
  }

  return ret;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	2400093c 	.word	0x2400093c

0800a758 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	88db      	ldrh	r3, [r3, #6]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d004      	beq.n	800a774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f8e2 	bl	800a936 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a772:	e023      	b.n	800a7bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	dc02      	bgt.n	800a786 <USBD_GetConfig+0x2e>
 800a780:	2b00      	cmp	r3, #0
 800a782:	dc03      	bgt.n	800a78c <USBD_GetConfig+0x34>
 800a784:	e015      	b.n	800a7b2 <USBD_GetConfig+0x5a>
 800a786:	2b03      	cmp	r3, #3
 800a788:	d00b      	beq.n	800a7a2 <USBD_GetConfig+0x4a>
 800a78a:	e012      	b.n	800a7b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3308      	adds	r3, #8
 800a796:	2201      	movs	r2, #1
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f948 	bl	800aa30 <USBD_CtlSendData>
        break;
 800a7a0:	e00c      	b.n	800a7bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f940 	bl	800aa30 <USBD_CtlSendData>
        break;
 800a7b0:	e004      	b.n	800a7bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f8be 	bl	800a936 <USBD_CtlError>
        break;
 800a7ba:	bf00      	nop
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d81e      	bhi.n	800a81a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	88db      	ldrh	r3, [r3, #6]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d004      	beq.n	800a7ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f8a5 	bl	800a936 <USBD_CtlError>
        break;
 800a7ec:	e01a      	b.n	800a824 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	f043 0202 	orr.w	r2, r3, #2
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	330c      	adds	r3, #12
 800a80e:	2202      	movs	r2, #2
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f90c 	bl	800aa30 <USBD_CtlSendData>
      break;
 800a818:	e004      	b.n	800a824 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f88a 	bl	800a936 <USBD_CtlError>
      break;
 800a822:	bf00      	nop
  }
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	885b      	ldrh	r3, [r3, #2]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d107      	bne.n	800a84e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f92f 	bl	800aaaa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a84c:	e013      	b.n	800a876 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	885b      	ldrh	r3, [r3, #2]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d10b      	bne.n	800a86e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	889b      	ldrh	r3, [r3, #4]
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f91f 	bl	800aaaa <USBD_CtlSendStatus>
}
 800a86c:	e003      	b.n	800a876 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f860 	bl	800a936 <USBD_CtlError>
}
 800a876:	bf00      	nop
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	3b01      	subs	r3, #1
 800a892:	2b02      	cmp	r3, #2
 800a894:	d80b      	bhi.n	800a8ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	885b      	ldrh	r3, [r3, #2]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d10c      	bne.n	800a8b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f8ff 	bl	800aaaa <USBD_CtlSendStatus>
      }
      break;
 800a8ac:	e004      	b.n	800a8b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f840 	bl	800a936 <USBD_CtlError>
      break;
 800a8b6:	e000      	b.n	800a8ba <USBD_ClrFeature+0x3c>
      break;
 800a8b8:	bf00      	nop
  }
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	781a      	ldrb	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff fa16 	bl	8009d1e <SWAPBYTE>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	3301      	adds	r3, #1
 800a904:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f7ff fa09 	bl	8009d1e <SWAPBYTE>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3301      	adds	r3, #1
 800a918:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3301      	adds	r3, #1
 800a91e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff f9fc 	bl	8009d1e <SWAPBYTE>
 800a926:	4603      	mov	r3, r0
 800a928:	461a      	mov	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	80da      	strh	r2, [r3, #6]
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a940:	2180      	movs	r1, #128	@ 0x80
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fda6 	bl	800b494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fda2 	bl	800b494 <USBD_LL_StallEP>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d042      	beq.n	800a9f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a972:	6938      	ldr	r0, [r7, #16]
 800a974:	f000 f842 	bl	800a9fc <USBD_GetLen>
 800a978:	4603      	mov	r3, r0
 800a97a:	3301      	adds	r3, #1
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a982:	d808      	bhi.n	800a996 <USBD_GetString+0x3e>
 800a984:	6938      	ldr	r0, [r7, #16]
 800a986:	f000 f839 	bl	800a9fc <USBD_GetLen>
 800a98a:	4603      	mov	r3, r0
 800a98c:	3301      	adds	r3, #1
 800a98e:	b29b      	uxth	r3, r3
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	e001      	b.n	800a99a <USBD_GetString+0x42>
 800a996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	7812      	ldrb	r2, [r2, #0]
 800a9a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	2203      	movs	r2, #3
 800a9b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a9c0:	e013      	b.n	800a9ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	7812      	ldrb	r2, [r2, #0]
 800a9cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	613b      	str	r3, [r7, #16]
    idx++;
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	4413      	add	r3, r2
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e7      	bne.n	800a9c2 <USBD_GetString+0x6a>
 800a9f2:	e000      	b.n	800a9f6 <USBD_GetString+0x9e>
    return;
 800a9f4:	bf00      	nop
  }
}
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa0c:	e005      	b.n	800aa1a <USBD_GetLen+0x1e>
  {
    len++;
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	3301      	adds	r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	3301      	adds	r3, #1
 800aa18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1f5      	bne.n	800aa0e <USBD_GetLen+0x12>
  }

  return len;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	2100      	movs	r1, #0
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f000 fda5 	bl	800b5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	2100      	movs	r1, #0
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 fd94 	bl	800b5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 fda4 	bl	800b5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2204      	movs	r2, #4
 800aab6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aaba:	2300      	movs	r3, #0
 800aabc:	2200      	movs	r2, #0
 800aabe:	2100      	movs	r1, #0
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fd70 	bl	800b5a6 <USBD_LL_Transmit>

  return USBD_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2205      	movs	r2, #5
 800aadc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae0:	2300      	movs	r3, #0
 800aae2:	2200      	movs	r2, #0
 800aae4:	2100      	movs	r1, #0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fd7e 	bl	800b5e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800aafc:	2201      	movs	r2, #1
 800aafe:	491c      	ldr	r1, [pc, #112]	@ (800ab70 <MX_USB_DEVICE_Init+0x78>)
 800ab00:	481c      	ldr	r0, [pc, #112]	@ (800ab74 <MX_USB_DEVICE_Init+0x7c>)
 800ab02:	f7fe fce9 	bl	80094d8 <USBD_Init>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d001      	beq.n	800ab10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab0c:	f7f6 ff04 	bl	8001918 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 800ab10:	4919      	ldr	r1, [pc, #100]	@ (800ab78 <MX_USB_DEVICE_Init+0x80>)
 800ab12:	4818      	ldr	r0, [pc, #96]	@ (800ab74 <MX_USB_DEVICE_Init+0x7c>)
 800ab14:	f7fe fd10 	bl	8009538 <USBD_RegisterClass>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab1e:	f7f6 fefb 	bl	8001918 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ab22:	4814      	ldr	r0, [pc, #80]	@ (800ab74 <MX_USB_DEVICE_Init+0x7c>)
 800ab24:	f7fe fd3e 	bl	80095a4 <USBD_Start>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800ab2e:	f7f6 fef3 	bl	8001918 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab32:	2200      	movs	r2, #0
 800ab34:	4911      	ldr	r1, [pc, #68]	@ (800ab7c <MX_USB_DEVICE_Init+0x84>)
 800ab36:	4812      	ldr	r0, [pc, #72]	@ (800ab80 <MX_USB_DEVICE_Init+0x88>)
 800ab38:	f7fe fcce 	bl	80094d8 <USBD_Init>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <MX_USB_DEVICE_Init+0x4e>
  {
    Error_Handler();
 800ab42:	f7f6 fee9 	bl	8001918 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ab46:	490c      	ldr	r1, [pc, #48]	@ (800ab78 <MX_USB_DEVICE_Init+0x80>)
 800ab48:	480d      	ldr	r0, [pc, #52]	@ (800ab80 <MX_USB_DEVICE_Init+0x88>)
 800ab4a:	f7fe fcf5 	bl	8009538 <USBD_RegisterClass>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 800ab54:	f7f6 fee0 	bl	8001918 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab58:	4809      	ldr	r0, [pc, #36]	@ (800ab80 <MX_USB_DEVICE_Init+0x88>)
 800ab5a:	f7fe fd23 	bl	80095a4 <USBD_Start>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <MX_USB_DEVICE_Init+0x70>
  {
    Error_Handler();
 800ab64:	f7f6 fed8 	bl	8001918 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ab68:	f7f8 ff78 	bl	8003a5c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab6c:	bf00      	nop
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	24000358 	.word	0x24000358
 800ab74:	24000940 	.word	0x24000940
 800ab78:	24000270 	.word	0x24000270
 800ab7c:	24000324 	.word	0x24000324
 800ab80:	24000c1c 	.word	0x24000c1c

0800ab84 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	6039      	str	r1, [r7, #0]
 800ab8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2212      	movs	r2, #18
 800ab94:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ab96:	4b03      	ldr	r3, [pc, #12]	@ (800aba4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	24000378 	.word	0x24000378

0800aba8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	6039      	str	r1, [r7, #0]
 800abb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2204      	movs	r2, #4
 800abb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abba:	4b03      	ldr	r3, [pc, #12]	@ (800abc8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	2400038c 	.word	0x2400038c

0800abcc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4907      	ldr	r1, [pc, #28]	@ (800ac00 <USBD_HS_ProductStrDescriptor+0x34>)
 800abe2:	4808      	ldr	r0, [pc, #32]	@ (800ac04 <USBD_HS_ProductStrDescriptor+0x38>)
 800abe4:	f7ff feb8 	bl	800a958 <USBD_GetString>
 800abe8:	e004      	b.n	800abf4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4904      	ldr	r1, [pc, #16]	@ (800ac00 <USBD_HS_ProductStrDescriptor+0x34>)
 800abee:	4805      	ldr	r0, [pc, #20]	@ (800ac04 <USBD_HS_ProductStrDescriptor+0x38>)
 800abf0:	f7ff feb2 	bl	800a958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	24000ef8 	.word	0x24000ef8
 800ac04:	0800c114 	.word	0x0800c114

0800ac08 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6039      	str	r1, [r7, #0]
 800ac12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4904      	ldr	r1, [pc, #16]	@ (800ac28 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ac18:	4804      	ldr	r0, [pc, #16]	@ (800ac2c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ac1a:	f7ff fe9d 	bl	800a958 <USBD_GetString>
  return USBD_StrDesc;
 800ac1e:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	24000ef8 	.word	0x24000ef8
 800ac2c:	0800c12c 	.word	0x0800c12c

0800ac30 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	221a      	movs	r2, #26
 800ac40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac42:	f000 f8e7 	bl	800ae14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac46:	4b02      	ldr	r3, [pc, #8]	@ (800ac50 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	24000390 	.word	0x24000390

0800ac54 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	6039      	str	r1, [r7, #0]
 800ac5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d105      	bne.n	800ac72 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4907      	ldr	r1, [pc, #28]	@ (800ac88 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ac6a:	4808      	ldr	r0, [pc, #32]	@ (800ac8c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ac6c:	f7ff fe74 	bl	800a958 <USBD_GetString>
 800ac70:	e004      	b.n	800ac7c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	4904      	ldr	r1, [pc, #16]	@ (800ac88 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ac76:	4805      	ldr	r0, [pc, #20]	@ (800ac8c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ac78:	f7ff fe6e 	bl	800a958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac7c:	4b02      	ldr	r3, [pc, #8]	@ (800ac88 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	24000ef8 	.word	0x24000ef8
 800ac8c:	0800c140 	.word	0x0800c140

0800ac90 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	6039      	str	r1, [r7, #0]
 800ac9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4907      	ldr	r1, [pc, #28]	@ (800acc4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aca6:	4808      	ldr	r0, [pc, #32]	@ (800acc8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aca8:	f7ff fe56 	bl	800a958 <USBD_GetString>
 800acac:	e004      	b.n	800acb8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	4904      	ldr	r1, [pc, #16]	@ (800acc4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800acb2:	4805      	ldr	r0, [pc, #20]	@ (800acc8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800acb4:	f7ff fe50 	bl	800a958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acb8:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	24000ef8 	.word	0x24000ef8
 800acc8:	0800c14c 	.word	0x0800c14c

0800accc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2212      	movs	r2, #18
 800acdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800acde:	4b03      	ldr	r3, [pc, #12]	@ (800acec <USBD_FS_DeviceDescriptor+0x20>)
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	24000344 	.word	0x24000344

0800acf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	6039      	str	r1, [r7, #0]
 800acfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2204      	movs	r2, #4
 800ad00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad02:	4b03      	ldr	r3, [pc, #12]	@ (800ad10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	2400038c 	.word	0x2400038c

0800ad14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	6039      	str	r1, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d105      	bne.n	800ad32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	4907      	ldr	r1, [pc, #28]	@ (800ad48 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad2a:	4808      	ldr	r0, [pc, #32]	@ (800ad4c <USBD_FS_ProductStrDescriptor+0x38>)
 800ad2c:	f7ff fe14 	bl	800a958 <USBD_GetString>
 800ad30:	e004      	b.n	800ad3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	4904      	ldr	r1, [pc, #16]	@ (800ad48 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad36:	4805      	ldr	r0, [pc, #20]	@ (800ad4c <USBD_FS_ProductStrDescriptor+0x38>)
 800ad38:	f7ff fe0e 	bl	800a958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad3c:	4b02      	ldr	r3, [pc, #8]	@ (800ad48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	24000ef8 	.word	0x24000ef8
 800ad4c:	0800c114 	.word	0x0800c114

0800ad50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	6039      	str	r1, [r7, #0]
 800ad5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	4904      	ldr	r1, [pc, #16]	@ (800ad70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad60:	4804      	ldr	r0, [pc, #16]	@ (800ad74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad62:	f7ff fdf9 	bl	800a958 <USBD_GetString>
  return USBD_StrDesc;
 800ad66:	4b02      	ldr	r3, [pc, #8]	@ (800ad70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	24000ef8 	.word	0x24000ef8
 800ad74:	0800c12c 	.word	0x0800c12c

0800ad78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	221a      	movs	r2, #26
 800ad88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad8a:	f000 f843 	bl	800ae14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad8e:	4b02      	ldr	r3, [pc, #8]	@ (800ad98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	24000390 	.word	0x24000390

0800ad9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6039      	str	r1, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ada8:	79fb      	ldrb	r3, [r7, #7]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d105      	bne.n	800adba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	4907      	ldr	r1, [pc, #28]	@ (800add0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800adb2:	4808      	ldr	r0, [pc, #32]	@ (800add4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800adb4:	f7ff fdd0 	bl	800a958 <USBD_GetString>
 800adb8:	e004      	b.n	800adc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	4904      	ldr	r1, [pc, #16]	@ (800add0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800adbe:	4805      	ldr	r0, [pc, #20]	@ (800add4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800adc0:	f7ff fdca 	bl	800a958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adc4:	4b02      	ldr	r3, [pc, #8]	@ (800add0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	24000ef8 	.word	0x24000ef8
 800add4:	0800c140 	.word	0x0800c140

0800add8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	6039      	str	r1, [r7, #0]
 800ade2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	4907      	ldr	r1, [pc, #28]	@ (800ae0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adee:	4808      	ldr	r0, [pc, #32]	@ (800ae10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adf0:	f7ff fdb2 	bl	800a958 <USBD_GetString>
 800adf4:	e004      	b.n	800ae00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	4904      	ldr	r1, [pc, #16]	@ (800ae0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adfa:	4805      	ldr	r0, [pc, #20]	@ (800ae10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adfc:	f7ff fdac 	bl	800a958 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae00:	4b02      	ldr	r3, [pc, #8]	@ (800ae0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	24000ef8 	.word	0x24000ef8
 800ae10:	0800c14c 	.word	0x0800c14c

0800ae14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ae58 <Get_SerialNum+0x44>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae20:	4b0e      	ldr	r3, [pc, #56]	@ (800ae5c <Get_SerialNum+0x48>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae26:	4b0e      	ldr	r3, [pc, #56]	@ (800ae60 <Get_SerialNum+0x4c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4413      	add	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d009      	beq.n	800ae4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae3a:	2208      	movs	r2, #8
 800ae3c:	4909      	ldr	r1, [pc, #36]	@ (800ae64 <Get_SerialNum+0x50>)
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 f814 	bl	800ae6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae44:	2204      	movs	r2, #4
 800ae46:	4908      	ldr	r1, [pc, #32]	@ (800ae68 <Get_SerialNum+0x54>)
 800ae48:	68b8      	ldr	r0, [r7, #8]
 800ae4a:	f000 f80f 	bl	800ae6c <IntToUnicode>
  }
}
 800ae4e:	bf00      	nop
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	1ff1e800 	.word	0x1ff1e800
 800ae5c:	1ff1e804 	.word	0x1ff1e804
 800ae60:	1ff1e808 	.word	0x1ff1e808
 800ae64:	24000392 	.word	0x24000392
 800ae68:	240003a2 	.word	0x240003a2

0800ae6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	4613      	mov	r3, r2
 800ae78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]
 800ae82:	e027      	b.n	800aed4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	0f1b      	lsrs	r3, r3, #28
 800ae88:	2b09      	cmp	r3, #9
 800ae8a:	d80b      	bhi.n	800aea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	0f1b      	lsrs	r3, r3, #28
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	4619      	mov	r1, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	440b      	add	r3, r1
 800ae9c:	3230      	adds	r2, #48	@ 0x30
 800ae9e:	b2d2      	uxtb	r2, r2
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	e00a      	b.n	800aeba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	0f1b      	lsrs	r3, r3, #28
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	7dfb      	ldrb	r3, [r7, #23]
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	4619      	mov	r1, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	440b      	add	r3, r1
 800aeb4:	3237      	adds	r2, #55	@ 0x37
 800aeb6:	b2d2      	uxtb	r2, r2
 800aeb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	3301      	adds	r3, #1
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	4413      	add	r3, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	3301      	adds	r3, #1
 800aed2:	75fb      	strb	r3, [r7, #23]
 800aed4:	7dfa      	ldrb	r2, [r7, #23]
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d3d3      	bcc.n	800ae84 <IntToUnicode+0x18>
  }
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08e      	sub	sp, #56	@ 0x38
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	605a      	str	r2, [r3, #4]
 800aefe:	609a      	str	r2, [r3, #8]
 800af00:	60da      	str	r2, [r3, #12]
 800af02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a66      	ldr	r2, [pc, #408]	@ (800b0a4 <HAL_PCD_MspInit+0x1b8>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d139      	bne.n	800af82 <HAL_PCD_MspInit+0x96>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800af0e:	f7f8 fda5 	bl	8003a5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af12:	4b65      	ldr	r3, [pc, #404]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af18:	4a63      	ldr	r2, [pc, #396]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af1a:	f043 0301 	orr.w	r3, r3, #1
 800af1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af22:	4b61      	ldr	r3, [pc, #388]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	623b      	str	r3, [r7, #32]
 800af2e:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800af30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800af34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af36:	2302      	movs	r3, #2
 800af38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af3e:	2300      	movs	r3, #0
 800af40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800af42:	230a      	movs	r3, #10
 800af44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af4a:	4619      	mov	r1, r3
 800af4c:	4857      	ldr	r0, [pc, #348]	@ (800b0ac <HAL_PCD_MspInit+0x1c0>)
 800af4e:	f7f7 f913 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af52:	4b55      	ldr	r3, [pc, #340]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800af58:	4a53      	ldr	r2, [pc, #332]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800af62:	4b51      	ldr	r3, [pc, #324]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800af68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af70:	2200      	movs	r2, #0
 800af72:	2100      	movs	r1, #0
 800af74:	2065      	movs	r0, #101	@ 0x65
 800af76:	f7f7 f852 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af7a:	2065      	movs	r0, #101	@ 0x65
 800af7c:	f7f7 f869 	bl	8002052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800af80:	e08b      	b.n	800b09a <HAL_PCD_MspInit+0x1ae>
  else if(pcdHandle->Instance==USB_OTG_HS)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a4a      	ldr	r2, [pc, #296]	@ (800b0b0 <HAL_PCD_MspInit+0x1c4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	f040 8086 	bne.w	800b09a <HAL_PCD_MspInit+0x1ae>
    HAL_PWREx_EnableUSBVoltageDetector();
 800af8e:	f7f8 fd65 	bl	8003a5c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af92:	4b45      	ldr	r3, [pc, #276]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af98:	4a43      	ldr	r2, [pc, #268]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800af9a:	f043 0304 	orr.w	r3, r3, #4
 800af9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800afa2:	4b41      	ldr	r3, [pc, #260]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afa8:	f003 0304 	and.w	r3, r3, #4
 800afac:	61bb      	str	r3, [r7, #24]
 800afae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afb0:	4b3d      	ldr	r3, [pc, #244]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afb6:	4a3c      	ldr	r2, [pc, #240]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afb8:	f043 0301 	orr.w	r3, r3, #1
 800afbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800afc0:	4b39      	ldr	r3, [pc, #228]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800afce:	4b36      	ldr	r3, [pc, #216]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afd4:	4a34      	ldr	r2, [pc, #208]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afd6:	f043 0302 	orr.w	r3, r3, #2
 800afda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800afde:	4b32      	ldr	r3, [pc, #200]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800afe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afe4:	f003 0302 	and.w	r3, r3, #2
 800afe8:	613b      	str	r3, [r7, #16]
 800afea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800afec:	230d      	movs	r3, #13
 800afee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aff0:	2302      	movs	r3, #2
 800aff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff4:	2300      	movs	r3, #0
 800aff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aff8:	2302      	movs	r3, #2
 800affa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800affc:	230a      	movs	r3, #10
 800affe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b004:	4619      	mov	r1, r3
 800b006:	482b      	ldr	r0, [pc, #172]	@ (800b0b4 <HAL_PCD_MspInit+0x1c8>)
 800b008:	f7f7 f8b6 	bl	8002178 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800b00c:	2328      	movs	r3, #40	@ 0x28
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b010:	2302      	movs	r3, #2
 800b012:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b014:	2300      	movs	r3, #0
 800b016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b018:	2302      	movs	r3, #2
 800b01a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800b01c:	230a      	movs	r3, #10
 800b01e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b024:	4619      	mov	r1, r3
 800b026:	4821      	ldr	r0, [pc, #132]	@ (800b0ac <HAL_PCD_MspInit+0x1c0>)
 800b028:	f7f7 f8a6 	bl	8002178 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800b02c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800b030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b032:	2302      	movs	r3, #2
 800b034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b036:	2300      	movs	r3, #0
 800b038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b03a:	2302      	movs	r3, #2
 800b03c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800b03e:	230a      	movs	r3, #10
 800b040:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b046:	4619      	mov	r1, r3
 800b048:	481b      	ldr	r0, [pc, #108]	@ (800b0b8 <HAL_PCD_MspInit+0x1cc>)
 800b04a:	f7f7 f895 	bl	8002178 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b04e:	4b16      	ldr	r3, [pc, #88]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800b050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b054:	4a14      	ldr	r2, [pc, #80]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800b056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b05a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b05e:	4b12      	ldr	r3, [pc, #72]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800b060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800b06c:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800b06e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b072:	4a0d      	ldr	r2, [pc, #52]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800b074:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b078:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b07c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a8 <HAL_PCD_MspInit+0x1bc>)
 800b07e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b082:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b086:	60bb      	str	r3, [r7, #8]
 800b088:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	204d      	movs	r0, #77	@ 0x4d
 800b090:	f7f6 ffc5 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b094:	204d      	movs	r0, #77	@ 0x4d
 800b096:	f7f6 ffdc 	bl	8002052 <HAL_NVIC_EnableIRQ>
}
 800b09a:	bf00      	nop
 800b09c:	3738      	adds	r7, #56	@ 0x38
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	40080000 	.word	0x40080000
 800b0a8:	58024400 	.word	0x58024400
 800b0ac:	58020000 	.word	0x58020000
 800b0b0:	40040000 	.word	0x40040000
 800b0b4:	58020800 	.word	0x58020800
 800b0b8:	58020400 	.word	0x58020400

0800b0bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	f7fe fab3 	bl	800963e <USBD_LL_SetupStage>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b0f2:	78fa      	ldrb	r2, [r7, #3]
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	440b      	add	r3, r1
 800b100:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	78fb      	ldrb	r3, [r7, #3]
 800b108:	4619      	mov	r1, r3
 800b10a:	f7fe faed 	bl	80096e8 <USBD_LL_DataOutStage>
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	460b      	mov	r3, r1
 800b120:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b128:	78fa      	ldrb	r2, [r7, #3]
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	4613      	mov	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	4413      	add	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	440b      	add	r3, r1
 800b136:	3320      	adds	r3, #32
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	4619      	mov	r1, r3
 800b13e:	f7fe fb86 	bl	800984e <USBD_LL_DataInStage>
}
 800b142:	bf00      	nop
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe fcc0 	bl	8009ade <USBD_LL_SOF>
}
 800b15e:	bf00      	nop
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b16e:	2301      	movs	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	79db      	ldrb	r3, [r3, #7]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d102      	bne.n	800b180 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
 800b17e:	e008      	b.n	800b192 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	79db      	ldrb	r3, [r3, #7]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d102      	bne.n	800b18e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b188:	2301      	movs	r3, #1
 800b18a:	73fb      	strb	r3, [r7, #15]
 800b18c:	e001      	b.n	800b192 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b18e:	f7f6 fbc3 	bl	8001918 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b198:	7bfa      	ldrb	r2, [r7, #15]
 800b19a:	4611      	mov	r1, r2
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fe fc5a 	bl	8009a56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fc02 	bl	80099b2 <USBD_LL_Reset>
}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fc55 	bl	8009a76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	6812      	ldr	r2, [r2, #0]
 800b1da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1de:	f043 0301 	orr.w	r3, r3, #1
 800b1e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	7adb      	ldrb	r3, [r3, #11]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1ec:	4b04      	ldr	r3, [pc, #16]	@ (800b200 <HAL_PCD_SuspendCallback+0x48>)
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	4a03      	ldr	r2, [pc, #12]	@ (800b200 <HAL_PCD_SuspendCallback+0x48>)
 800b1f2:	f043 0306 	orr.w	r3, r3, #6
 800b1f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	e000ed00 	.word	0xe000ed00

0800b204 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe fc4b 	bl	8009aae <USBD_LL_Resume>
}
 800b218:	bf00      	nop
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b232:	78fa      	ldrb	r2, [r7, #3]
 800b234:	4611      	mov	r1, r2
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fca3 	bl	8009b82 <USBD_LL_IsoOUTIncomplete>
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b256:	78fa      	ldrb	r2, [r7, #3]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fc5f 	bl	8009b1e <USBD_LL_IsoINIncomplete>
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fcb5 	bl	8009be6 <USBD_LL_DevConnected>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fcb2 	bl	8009bfc <USBD_LL_DevDisconnected>
}
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d13e      	bne.n	800b32e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b2b0:	4a44      	ldr	r2, [pc, #272]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a42      	ldr	r2, [pc, #264]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2c0:	4b40      	ldr	r3, [pc, #256]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2c2:	4a41      	ldr	r2, [pc, #260]	@ (800b3c8 <USBD_LL_Init+0x128>)
 800b2c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b2c6:	4b3f      	ldr	r3, [pc, #252]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2c8:	2209      	movs	r2, #9
 800b2ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b2cc:	4b3d      	ldr	r3, [pc, #244]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2d2:	4b3c      	ldr	r3, [pc, #240]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b2d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2da:	2202      	movs	r2, #2
 800b2dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2de:	4b39      	ldr	r3, [pc, #228]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b2e4:	4b37      	ldr	r3, [pc, #220]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b2ea:	4b36      	ldr	r3, [pc, #216]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b2f0:	4b34      	ldr	r3, [pc, #208]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b2f6:	4b33      	ldr	r3, [pc, #204]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b2fc:	4b31      	ldr	r3, [pc, #196]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b302:	4830      	ldr	r0, [pc, #192]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b304:	f7f7 f8e8 	bl	80024d8 <HAL_PCD_Init>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b30e:	f7f6 fb03 	bl	8001918 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b312:	2180      	movs	r1, #128	@ 0x80
 800b314:	482b      	ldr	r0, [pc, #172]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b316:	f7f8 fb26 	bl	8003966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b31a:	2240      	movs	r2, #64	@ 0x40
 800b31c:	2100      	movs	r1, #0
 800b31e:	4829      	ldr	r0, [pc, #164]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b320:	f7f8 fada 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b324:	2280      	movs	r2, #128	@ 0x80
 800b326:	2101      	movs	r1, #1
 800b328:	4826      	ldr	r0, [pc, #152]	@ (800b3c4 <USBD_LL_Init+0x124>)
 800b32a:	f7f8 fad5 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  if (pdev->id == DEVICE_HS) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d140      	bne.n	800b3b8 <USBD_LL_Init+0x118>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b336:	4a25      	ldr	r2, [pc, #148]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a22      	ldr	r2, [pc, #136]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b342:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b346:	4b21      	ldr	r3, [pc, #132]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b348:	4a21      	ldr	r2, [pc, #132]	@ (800b3d0 <USBD_LL_Init+0x130>)
 800b34a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b34c:	4b1f      	ldr	r3, [pc, #124]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b34e:	2209      	movs	r2, #9
 800b350:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800b352:	4b1e      	ldr	r3, [pc, #120]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b354:	2200      	movs	r2, #0
 800b356:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b358:	4b1c      	ldr	r3, [pc, #112]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800b35e:	4b1b      	ldr	r3, [pc, #108]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b360:	2201      	movs	r2, #1
 800b362:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b364:	4b19      	ldr	r3, [pc, #100]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b366:	2200      	movs	r2, #0
 800b368:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b36a:	4b18      	ldr	r3, [pc, #96]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b370:	4b16      	ldr	r3, [pc, #88]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b372:	2200      	movs	r2, #0
 800b374:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b376:	4b15      	ldr	r3, [pc, #84]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b378:	2200      	movs	r2, #0
 800b37a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b37c:	4b13      	ldr	r3, [pc, #76]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b37e:	2200      	movs	r2, #0
 800b380:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b382:	4b12      	ldr	r3, [pc, #72]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b384:	2200      	movs	r2, #0
 800b386:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b388:	4810      	ldr	r0, [pc, #64]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b38a:	f7f7 f8a5 	bl	80024d8 <HAL_PCD_Init>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <USBD_LL_Init+0xf8>
  {
    Error_Handler( );
 800b394:	f7f6 fac0 	bl	8001918 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b39c:	480b      	ldr	r0, [pc, #44]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b39e:	f7f8 fae2 	bl	8003966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b3a2:	2280      	movs	r2, #128	@ 0x80
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	4809      	ldr	r0, [pc, #36]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b3a8:	f7f8 fa96 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b3ac:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	4806      	ldr	r0, [pc, #24]	@ (800b3cc <USBD_LL_Init+0x12c>)
 800b3b4:	f7f8 fa90 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	240010f8 	.word	0x240010f8
 800b3c8:	40080000 	.word	0x40080000
 800b3cc:	240015dc 	.word	0x240015dc
 800b3d0:	40040000 	.word	0x40040000

0800b3d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7f7 f980 	bl	80026f0 <HAL_PCD_Start>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f930 	bl	800b65c <USBD_Get_USB_Status>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b400:	7bbb      	ldrb	r3, [r7, #14]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b084      	sub	sp, #16
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	4608      	mov	r0, r1
 800b414:	4611      	mov	r1, r2
 800b416:	461a      	mov	r2, r3
 800b418:	4603      	mov	r3, r0
 800b41a:	70fb      	strb	r3, [r7, #3]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70bb      	strb	r3, [r7, #2]
 800b420:	4613      	mov	r3, r2
 800b422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b432:	78bb      	ldrb	r3, [r7, #2]
 800b434:	883a      	ldrh	r2, [r7, #0]
 800b436:	78f9      	ldrb	r1, [r7, #3]
 800b438:	f7f7 fe81 	bl	800313e <HAL_PCD_EP_Open>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f90a 	bl	800b65c <USBD_Get_USB_Status>
 800b448:	4603      	mov	r3, r0
 800b44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	460b      	mov	r3, r1
 800b460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b470:	78fa      	ldrb	r2, [r7, #3]
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7f7 fecc 	bl	8003212 <HAL_PCD_EP_Close>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f8eb 	bl	800b65c <USBD_Get_USB_Status>
 800b486:	4603      	mov	r3, r0
 800b488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7f7 ff6c 	bl	8003390 <HAL_PCD_EP_SetStall>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 f8cc 	bl	800b65c <USBD_Get_USB_Status>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	460b      	mov	r3, r1
 800b4dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ec:	78fa      	ldrb	r2, [r7, #3]
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7f7 ffb0 	bl	8003456 <HAL_PCD_EP_ClrStall>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 f8ad 	bl	800b65c <USBD_Get_USB_Status>
 800b502:	4603      	mov	r3, r0
 800b504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b506:	7bbb      	ldrb	r3, [r7, #14]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	da0b      	bge.n	800b544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b532:	68f9      	ldr	r1, [r7, #12]
 800b534:	4613      	mov	r3, r2
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	4413      	add	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	440b      	add	r3, r1
 800b53e:	3316      	adds	r3, #22
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	e00b      	b.n	800b55c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b544:	78fb      	ldrb	r3, [r7, #3]
 800b546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b54a:	68f9      	ldr	r1, [r7, #12]
 800b54c:	4613      	mov	r3, r2
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	4413      	add	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	440b      	add	r3, r1
 800b556:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b55a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b582:	78fa      	ldrb	r2, [r7, #3]
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f7f7 fdb5 	bl	80030f6 <HAL_PCD_SetAddress>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 f862 	bl	800b65c <USBD_Get_USB_Status>
 800b598:	4603      	mov	r3, r0
 800b59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b086      	sub	sp, #24
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b5c4:	7af9      	ldrb	r1, [r7, #11]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	f7f7 fea7 	bl	800331c <HAL_PCD_EP_Transmit>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 f841 	bl	800b65c <USBD_Get_USB_Status>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	607a      	str	r2, [r7, #4]
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b606:	7af9      	ldrb	r1, [r7, #11]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	f7f7 fe4b 	bl	80032a6 <HAL_PCD_EP_Receive>
 800b610:	4603      	mov	r3, r0
 800b612:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b614:	7dfb      	ldrb	r3, [r7, #23]
 800b616:	4618      	mov	r0, r3
 800b618:	f000 f820 	bl	800b65c <USBD_Get_USB_Status>
 800b61c:	4603      	mov	r3, r0
 800b61e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b620:	7dbb      	ldrb	r3, [r7, #22]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3718      	adds	r7, #24
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b634:	4b03      	ldr	r3, [pc, #12]	@ (800b644 <USBD_static_malloc+0x18>)
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	24001ac0 	.word	0x24001ac0

0800b648 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d817      	bhi.n	800b6a0 <USBD_Get_USB_Status+0x44>
 800b670:	a201      	add	r2, pc, #4	@ (adr r2, 800b678 <USBD_Get_USB_Status+0x1c>)
 800b672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b676:	bf00      	nop
 800b678:	0800b689 	.word	0x0800b689
 800b67c:	0800b68f 	.word	0x0800b68f
 800b680:	0800b695 	.word	0x0800b695
 800b684:	0800b69b 	.word	0x0800b69b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
    break;
 800b68c:	e00b      	b.n	800b6a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b68e:	2303      	movs	r3, #3
 800b690:	73fb      	strb	r3, [r7, #15]
    break;
 800b692:	e008      	b.n	800b6a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b694:	2301      	movs	r3, #1
 800b696:	73fb      	strb	r3, [r7, #15]
    break;
 800b698:	e005      	b.n	800b6a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b69a:	2303      	movs	r3, #3
 800b69c:	73fb      	strb	r3, [r7, #15]
    break;
 800b69e:	e002      	b.n	800b6a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a4:	bf00      	nop
  }
  return usb_status;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <siprintf>:
 800b6b4:	b40e      	push	{r1, r2, r3}
 800b6b6:	b500      	push	{lr}
 800b6b8:	b09c      	sub	sp, #112	@ 0x70
 800b6ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800b6bc:	9002      	str	r0, [sp, #8]
 800b6be:	9006      	str	r0, [sp, #24]
 800b6c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b6c4:	4809      	ldr	r0, [pc, #36]	@ (800b6ec <siprintf+0x38>)
 800b6c6:	9107      	str	r1, [sp, #28]
 800b6c8:	9104      	str	r1, [sp, #16]
 800b6ca:	4909      	ldr	r1, [pc, #36]	@ (800b6f0 <siprintf+0x3c>)
 800b6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d0:	9105      	str	r1, [sp, #20]
 800b6d2:	6800      	ldr	r0, [r0, #0]
 800b6d4:	9301      	str	r3, [sp, #4]
 800b6d6:	a902      	add	r1, sp, #8
 800b6d8:	f000 f994 	bl	800ba04 <_svfiprintf_r>
 800b6dc:	9b02      	ldr	r3, [sp, #8]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	b01c      	add	sp, #112	@ 0x70
 800b6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e8:	b003      	add	sp, #12
 800b6ea:	4770      	bx	lr
 800b6ec:	240003ac 	.word	0x240003ac
 800b6f0:	ffff0208 	.word	0xffff0208

0800b6f4 <memset>:
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d100      	bne.n	800b6fe <memset+0xa>
 800b6fc:	4770      	bx	lr
 800b6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b702:	e7f9      	b.n	800b6f8 <memset+0x4>

0800b704 <__errno>:
 800b704:	4b01      	ldr	r3, [pc, #4]	@ (800b70c <__errno+0x8>)
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	240003ac 	.word	0x240003ac

0800b710 <__libc_init_array>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	4d0d      	ldr	r5, [pc, #52]	@ (800b748 <__libc_init_array+0x38>)
 800b714:	4c0d      	ldr	r4, [pc, #52]	@ (800b74c <__libc_init_array+0x3c>)
 800b716:	1b64      	subs	r4, r4, r5
 800b718:	10a4      	asrs	r4, r4, #2
 800b71a:	2600      	movs	r6, #0
 800b71c:	42a6      	cmp	r6, r4
 800b71e:	d109      	bne.n	800b734 <__libc_init_array+0x24>
 800b720:	4d0b      	ldr	r5, [pc, #44]	@ (800b750 <__libc_init_array+0x40>)
 800b722:	4c0c      	ldr	r4, [pc, #48]	@ (800b754 <__libc_init_array+0x44>)
 800b724:	f000 fc66 	bl	800bff4 <_init>
 800b728:	1b64      	subs	r4, r4, r5
 800b72a:	10a4      	asrs	r4, r4, #2
 800b72c:	2600      	movs	r6, #0
 800b72e:	42a6      	cmp	r6, r4
 800b730:	d105      	bne.n	800b73e <__libc_init_array+0x2e>
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	f855 3b04 	ldr.w	r3, [r5], #4
 800b738:	4798      	blx	r3
 800b73a:	3601      	adds	r6, #1
 800b73c:	e7ee      	b.n	800b71c <__libc_init_array+0xc>
 800b73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b742:	4798      	blx	r3
 800b744:	3601      	adds	r6, #1
 800b746:	e7f2      	b.n	800b72e <__libc_init_array+0x1e>
 800b748:	0800c1d0 	.word	0x0800c1d0
 800b74c:	0800c1d0 	.word	0x0800c1d0
 800b750:	0800c1d0 	.word	0x0800c1d0
 800b754:	0800c1d4 	.word	0x0800c1d4

0800b758 <__retarget_lock_acquire_recursive>:
 800b758:	4770      	bx	lr

0800b75a <__retarget_lock_release_recursive>:
 800b75a:	4770      	bx	lr

0800b75c <_free_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4605      	mov	r5, r0
 800b760:	2900      	cmp	r1, #0
 800b762:	d041      	beq.n	800b7e8 <_free_r+0x8c>
 800b764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b768:	1f0c      	subs	r4, r1, #4
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	bfb8      	it	lt
 800b76e:	18e4      	addlt	r4, r4, r3
 800b770:	f000 f8e0 	bl	800b934 <__malloc_lock>
 800b774:	4a1d      	ldr	r2, [pc, #116]	@ (800b7ec <_free_r+0x90>)
 800b776:	6813      	ldr	r3, [r2, #0]
 800b778:	b933      	cbnz	r3, 800b788 <_free_r+0x2c>
 800b77a:	6063      	str	r3, [r4, #4]
 800b77c:	6014      	str	r4, [r2, #0]
 800b77e:	4628      	mov	r0, r5
 800b780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b784:	f000 b8dc 	b.w	800b940 <__malloc_unlock>
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d908      	bls.n	800b79e <_free_r+0x42>
 800b78c:	6820      	ldr	r0, [r4, #0]
 800b78e:	1821      	adds	r1, r4, r0
 800b790:	428b      	cmp	r3, r1
 800b792:	bf01      	itttt	eq
 800b794:	6819      	ldreq	r1, [r3, #0]
 800b796:	685b      	ldreq	r3, [r3, #4]
 800b798:	1809      	addeq	r1, r1, r0
 800b79a:	6021      	streq	r1, [r4, #0]
 800b79c:	e7ed      	b.n	800b77a <_free_r+0x1e>
 800b79e:	461a      	mov	r2, r3
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_free_r+0x4c>
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	d9fa      	bls.n	800b79e <_free_r+0x42>
 800b7a8:	6811      	ldr	r1, [r2, #0]
 800b7aa:	1850      	adds	r0, r2, r1
 800b7ac:	42a0      	cmp	r0, r4
 800b7ae:	d10b      	bne.n	800b7c8 <_free_r+0x6c>
 800b7b0:	6820      	ldr	r0, [r4, #0]
 800b7b2:	4401      	add	r1, r0
 800b7b4:	1850      	adds	r0, r2, r1
 800b7b6:	4283      	cmp	r3, r0
 800b7b8:	6011      	str	r1, [r2, #0]
 800b7ba:	d1e0      	bne.n	800b77e <_free_r+0x22>
 800b7bc:	6818      	ldr	r0, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	6053      	str	r3, [r2, #4]
 800b7c2:	4408      	add	r0, r1
 800b7c4:	6010      	str	r0, [r2, #0]
 800b7c6:	e7da      	b.n	800b77e <_free_r+0x22>
 800b7c8:	d902      	bls.n	800b7d0 <_free_r+0x74>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	e7d6      	b.n	800b77e <_free_r+0x22>
 800b7d0:	6820      	ldr	r0, [r4, #0]
 800b7d2:	1821      	adds	r1, r4, r0
 800b7d4:	428b      	cmp	r3, r1
 800b7d6:	bf04      	itt	eq
 800b7d8:	6819      	ldreq	r1, [r3, #0]
 800b7da:	685b      	ldreq	r3, [r3, #4]
 800b7dc:	6063      	str	r3, [r4, #4]
 800b7de:	bf04      	itt	eq
 800b7e0:	1809      	addeq	r1, r1, r0
 800b7e2:	6021      	streq	r1, [r4, #0]
 800b7e4:	6054      	str	r4, [r2, #4]
 800b7e6:	e7ca      	b.n	800b77e <_free_r+0x22>
 800b7e8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ea:	bf00      	nop
 800b7ec:	24001c18 	.word	0x24001c18

0800b7f0 <sbrk_aligned>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4e0f      	ldr	r6, [pc, #60]	@ (800b830 <sbrk_aligned+0x40>)
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	6831      	ldr	r1, [r6, #0]
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	b911      	cbnz	r1, 800b802 <sbrk_aligned+0x12>
 800b7fc:	f000 fba6 	bl	800bf4c <_sbrk_r>
 800b800:	6030      	str	r0, [r6, #0]
 800b802:	4621      	mov	r1, r4
 800b804:	4628      	mov	r0, r5
 800b806:	f000 fba1 	bl	800bf4c <_sbrk_r>
 800b80a:	1c43      	adds	r3, r0, #1
 800b80c:	d103      	bne.n	800b816 <sbrk_aligned+0x26>
 800b80e:	f04f 34ff 	mov.w	r4, #4294967295
 800b812:	4620      	mov	r0, r4
 800b814:	bd70      	pop	{r4, r5, r6, pc}
 800b816:	1cc4      	adds	r4, r0, #3
 800b818:	f024 0403 	bic.w	r4, r4, #3
 800b81c:	42a0      	cmp	r0, r4
 800b81e:	d0f8      	beq.n	800b812 <sbrk_aligned+0x22>
 800b820:	1a21      	subs	r1, r4, r0
 800b822:	4628      	mov	r0, r5
 800b824:	f000 fb92 	bl	800bf4c <_sbrk_r>
 800b828:	3001      	adds	r0, #1
 800b82a:	d1f2      	bne.n	800b812 <sbrk_aligned+0x22>
 800b82c:	e7ef      	b.n	800b80e <sbrk_aligned+0x1e>
 800b82e:	bf00      	nop
 800b830:	24001c14 	.word	0x24001c14

0800b834 <_malloc_r>:
 800b834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b838:	1ccd      	adds	r5, r1, #3
 800b83a:	f025 0503 	bic.w	r5, r5, #3
 800b83e:	3508      	adds	r5, #8
 800b840:	2d0c      	cmp	r5, #12
 800b842:	bf38      	it	cc
 800b844:	250c      	movcc	r5, #12
 800b846:	2d00      	cmp	r5, #0
 800b848:	4606      	mov	r6, r0
 800b84a:	db01      	blt.n	800b850 <_malloc_r+0x1c>
 800b84c:	42a9      	cmp	r1, r5
 800b84e:	d904      	bls.n	800b85a <_malloc_r+0x26>
 800b850:	230c      	movs	r3, #12
 800b852:	6033      	str	r3, [r6, #0]
 800b854:	2000      	movs	r0, #0
 800b856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b930 <_malloc_r+0xfc>
 800b85e:	f000 f869 	bl	800b934 <__malloc_lock>
 800b862:	f8d8 3000 	ldr.w	r3, [r8]
 800b866:	461c      	mov	r4, r3
 800b868:	bb44      	cbnz	r4, 800b8bc <_malloc_r+0x88>
 800b86a:	4629      	mov	r1, r5
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7ff ffbf 	bl	800b7f0 <sbrk_aligned>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	4604      	mov	r4, r0
 800b876:	d158      	bne.n	800b92a <_malloc_r+0xf6>
 800b878:	f8d8 4000 	ldr.w	r4, [r8]
 800b87c:	4627      	mov	r7, r4
 800b87e:	2f00      	cmp	r7, #0
 800b880:	d143      	bne.n	800b90a <_malloc_r+0xd6>
 800b882:	2c00      	cmp	r4, #0
 800b884:	d04b      	beq.n	800b91e <_malloc_r+0xea>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	4639      	mov	r1, r7
 800b88a:	4630      	mov	r0, r6
 800b88c:	eb04 0903 	add.w	r9, r4, r3
 800b890:	f000 fb5c 	bl	800bf4c <_sbrk_r>
 800b894:	4581      	cmp	r9, r0
 800b896:	d142      	bne.n	800b91e <_malloc_r+0xea>
 800b898:	6821      	ldr	r1, [r4, #0]
 800b89a:	1a6d      	subs	r5, r5, r1
 800b89c:	4629      	mov	r1, r5
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff ffa6 	bl	800b7f0 <sbrk_aligned>
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d03a      	beq.n	800b91e <_malloc_r+0xea>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	442b      	add	r3, r5
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	bb62      	cbnz	r2, 800b910 <_malloc_r+0xdc>
 800b8b6:	f8c8 7000 	str.w	r7, [r8]
 800b8ba:	e00f      	b.n	800b8dc <_malloc_r+0xa8>
 800b8bc:	6822      	ldr	r2, [r4, #0]
 800b8be:	1b52      	subs	r2, r2, r5
 800b8c0:	d420      	bmi.n	800b904 <_malloc_r+0xd0>
 800b8c2:	2a0b      	cmp	r2, #11
 800b8c4:	d917      	bls.n	800b8f6 <_malloc_r+0xc2>
 800b8c6:	1961      	adds	r1, r4, r5
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	6025      	str	r5, [r4, #0]
 800b8cc:	bf18      	it	ne
 800b8ce:	6059      	strne	r1, [r3, #4]
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	bf08      	it	eq
 800b8d4:	f8c8 1000 	streq.w	r1, [r8]
 800b8d8:	5162      	str	r2, [r4, r5]
 800b8da:	604b      	str	r3, [r1, #4]
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f000 f82f 	bl	800b940 <__malloc_unlock>
 800b8e2:	f104 000b 	add.w	r0, r4, #11
 800b8e6:	1d23      	adds	r3, r4, #4
 800b8e8:	f020 0007 	bic.w	r0, r0, #7
 800b8ec:	1ac2      	subs	r2, r0, r3
 800b8ee:	bf1c      	itt	ne
 800b8f0:	1a1b      	subne	r3, r3, r0
 800b8f2:	50a3      	strne	r3, [r4, r2]
 800b8f4:	e7af      	b.n	800b856 <_malloc_r+0x22>
 800b8f6:	6862      	ldr	r2, [r4, #4]
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	bf0c      	ite	eq
 800b8fc:	f8c8 2000 	streq.w	r2, [r8]
 800b900:	605a      	strne	r2, [r3, #4]
 800b902:	e7eb      	b.n	800b8dc <_malloc_r+0xa8>
 800b904:	4623      	mov	r3, r4
 800b906:	6864      	ldr	r4, [r4, #4]
 800b908:	e7ae      	b.n	800b868 <_malloc_r+0x34>
 800b90a:	463c      	mov	r4, r7
 800b90c:	687f      	ldr	r7, [r7, #4]
 800b90e:	e7b6      	b.n	800b87e <_malloc_r+0x4a>
 800b910:	461a      	mov	r2, r3
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	42a3      	cmp	r3, r4
 800b916:	d1fb      	bne.n	800b910 <_malloc_r+0xdc>
 800b918:	2300      	movs	r3, #0
 800b91a:	6053      	str	r3, [r2, #4]
 800b91c:	e7de      	b.n	800b8dc <_malloc_r+0xa8>
 800b91e:	230c      	movs	r3, #12
 800b920:	6033      	str	r3, [r6, #0]
 800b922:	4630      	mov	r0, r6
 800b924:	f000 f80c 	bl	800b940 <__malloc_unlock>
 800b928:	e794      	b.n	800b854 <_malloc_r+0x20>
 800b92a:	6005      	str	r5, [r0, #0]
 800b92c:	e7d6      	b.n	800b8dc <_malloc_r+0xa8>
 800b92e:	bf00      	nop
 800b930:	24001c18 	.word	0x24001c18

0800b934 <__malloc_lock>:
 800b934:	4801      	ldr	r0, [pc, #4]	@ (800b93c <__malloc_lock+0x8>)
 800b936:	f7ff bf0f 	b.w	800b758 <__retarget_lock_acquire_recursive>
 800b93a:	bf00      	nop
 800b93c:	24001c10 	.word	0x24001c10

0800b940 <__malloc_unlock>:
 800b940:	4801      	ldr	r0, [pc, #4]	@ (800b948 <__malloc_unlock+0x8>)
 800b942:	f7ff bf0a 	b.w	800b75a <__retarget_lock_release_recursive>
 800b946:	bf00      	nop
 800b948:	24001c10 	.word	0x24001c10

0800b94c <__ssputs_r>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	688e      	ldr	r6, [r1, #8]
 800b952:	461f      	mov	r7, r3
 800b954:	42be      	cmp	r6, r7
 800b956:	680b      	ldr	r3, [r1, #0]
 800b958:	4682      	mov	sl, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	4690      	mov	r8, r2
 800b95e:	d82d      	bhi.n	800b9bc <__ssputs_r+0x70>
 800b960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b968:	d026      	beq.n	800b9b8 <__ssputs_r+0x6c>
 800b96a:	6965      	ldr	r5, [r4, #20]
 800b96c:	6909      	ldr	r1, [r1, #16]
 800b96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b972:	eba3 0901 	sub.w	r9, r3, r1
 800b976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b97a:	1c7b      	adds	r3, r7, #1
 800b97c:	444b      	add	r3, r9
 800b97e:	106d      	asrs	r5, r5, #1
 800b980:	429d      	cmp	r5, r3
 800b982:	bf38      	it	cc
 800b984:	461d      	movcc	r5, r3
 800b986:	0553      	lsls	r3, r2, #21
 800b988:	d527      	bpl.n	800b9da <__ssputs_r+0x8e>
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7ff ff52 	bl	800b834 <_malloc_r>
 800b990:	4606      	mov	r6, r0
 800b992:	b360      	cbz	r0, 800b9ee <__ssputs_r+0xa2>
 800b994:	6921      	ldr	r1, [r4, #16]
 800b996:	464a      	mov	r2, r9
 800b998:	f000 fae8 	bl	800bf6c <memcpy>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9a6:	81a3      	strh	r3, [r4, #12]
 800b9a8:	6126      	str	r6, [r4, #16]
 800b9aa:	6165      	str	r5, [r4, #20]
 800b9ac:	444e      	add	r6, r9
 800b9ae:	eba5 0509 	sub.w	r5, r5, r9
 800b9b2:	6026      	str	r6, [r4, #0]
 800b9b4:	60a5      	str	r5, [r4, #8]
 800b9b6:	463e      	mov	r6, r7
 800b9b8:	42be      	cmp	r6, r7
 800b9ba:	d900      	bls.n	800b9be <__ssputs_r+0x72>
 800b9bc:	463e      	mov	r6, r7
 800b9be:	6820      	ldr	r0, [r4, #0]
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	4641      	mov	r1, r8
 800b9c4:	f000 faa8 	bl	800bf18 <memmove>
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	1b9b      	subs	r3, r3, r6
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	4433      	add	r3, r6
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9da:	462a      	mov	r2, r5
 800b9dc:	f000 fad4 	bl	800bf88 <_realloc_r>
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d1e0      	bne.n	800b9a8 <__ssputs_r+0x5c>
 800b9e6:	6921      	ldr	r1, [r4, #16]
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	f7ff feb7 	bl	800b75c <_free_r>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	f8ca 3000 	str.w	r3, [sl]
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	e7e9      	b.n	800b9d6 <__ssputs_r+0x8a>
	...

0800ba04 <_svfiprintf_r>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	4698      	mov	r8, r3
 800ba0a:	898b      	ldrh	r3, [r1, #12]
 800ba0c:	061b      	lsls	r3, r3, #24
 800ba0e:	b09d      	sub	sp, #116	@ 0x74
 800ba10:	4607      	mov	r7, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	4614      	mov	r4, r2
 800ba16:	d510      	bpl.n	800ba3a <_svfiprintf_r+0x36>
 800ba18:	690b      	ldr	r3, [r1, #16]
 800ba1a:	b973      	cbnz	r3, 800ba3a <_svfiprintf_r+0x36>
 800ba1c:	2140      	movs	r1, #64	@ 0x40
 800ba1e:	f7ff ff09 	bl	800b834 <_malloc_r>
 800ba22:	6028      	str	r0, [r5, #0]
 800ba24:	6128      	str	r0, [r5, #16]
 800ba26:	b930      	cbnz	r0, 800ba36 <_svfiprintf_r+0x32>
 800ba28:	230c      	movs	r3, #12
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	b01d      	add	sp, #116	@ 0x74
 800ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba36:	2340      	movs	r3, #64	@ 0x40
 800ba38:	616b      	str	r3, [r5, #20]
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba3e:	2320      	movs	r3, #32
 800ba40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba48:	2330      	movs	r3, #48	@ 0x30
 800ba4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bbe8 <_svfiprintf_r+0x1e4>
 800ba4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba52:	f04f 0901 	mov.w	r9, #1
 800ba56:	4623      	mov	r3, r4
 800ba58:	469a      	mov	sl, r3
 800ba5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5e:	b10a      	cbz	r2, 800ba64 <_svfiprintf_r+0x60>
 800ba60:	2a25      	cmp	r2, #37	@ 0x25
 800ba62:	d1f9      	bne.n	800ba58 <_svfiprintf_r+0x54>
 800ba64:	ebba 0b04 	subs.w	fp, sl, r4
 800ba68:	d00b      	beq.n	800ba82 <_svfiprintf_r+0x7e>
 800ba6a:	465b      	mov	r3, fp
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4638      	mov	r0, r7
 800ba72:	f7ff ff6b 	bl	800b94c <__ssputs_r>
 800ba76:	3001      	adds	r0, #1
 800ba78:	f000 80a7 	beq.w	800bbca <_svfiprintf_r+0x1c6>
 800ba7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba7e:	445a      	add	r2, fp
 800ba80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba82:	f89a 3000 	ldrb.w	r3, [sl]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 809f 	beq.w	800bbca <_svfiprintf_r+0x1c6>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba96:	f10a 0a01 	add.w	sl, sl, #1
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	9307      	str	r3, [sp, #28]
 800ba9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800baa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800baa4:	4654      	mov	r4, sl
 800baa6:	2205      	movs	r2, #5
 800baa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baac:	484e      	ldr	r0, [pc, #312]	@ (800bbe8 <_svfiprintf_r+0x1e4>)
 800baae:	f7f4 fc1f 	bl	80002f0 <memchr>
 800bab2:	9a04      	ldr	r2, [sp, #16]
 800bab4:	b9d8      	cbnz	r0, 800baee <_svfiprintf_r+0xea>
 800bab6:	06d0      	lsls	r0, r2, #27
 800bab8:	bf44      	itt	mi
 800baba:	2320      	movmi	r3, #32
 800babc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bac0:	0711      	lsls	r1, r2, #28
 800bac2:	bf44      	itt	mi
 800bac4:	232b      	movmi	r3, #43	@ 0x2b
 800bac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baca:	f89a 3000 	ldrb.w	r3, [sl]
 800bace:	2b2a      	cmp	r3, #42	@ 0x2a
 800bad0:	d015      	beq.n	800bafe <_svfiprintf_r+0xfa>
 800bad2:	9a07      	ldr	r2, [sp, #28]
 800bad4:	4654      	mov	r4, sl
 800bad6:	2000      	movs	r0, #0
 800bad8:	f04f 0c0a 	mov.w	ip, #10
 800badc:	4621      	mov	r1, r4
 800bade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae2:	3b30      	subs	r3, #48	@ 0x30
 800bae4:	2b09      	cmp	r3, #9
 800bae6:	d94b      	bls.n	800bb80 <_svfiprintf_r+0x17c>
 800bae8:	b1b0      	cbz	r0, 800bb18 <_svfiprintf_r+0x114>
 800baea:	9207      	str	r2, [sp, #28]
 800baec:	e014      	b.n	800bb18 <_svfiprintf_r+0x114>
 800baee:	eba0 0308 	sub.w	r3, r0, r8
 800baf2:	fa09 f303 	lsl.w	r3, r9, r3
 800baf6:	4313      	orrs	r3, r2
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	46a2      	mov	sl, r4
 800bafc:	e7d2      	b.n	800baa4 <_svfiprintf_r+0xa0>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	1d19      	adds	r1, r3, #4
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	9103      	str	r1, [sp, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	bfbb      	ittet	lt
 800bb0a:	425b      	neglt	r3, r3
 800bb0c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb10:	9307      	strge	r3, [sp, #28]
 800bb12:	9307      	strlt	r3, [sp, #28]
 800bb14:	bfb8      	it	lt
 800bb16:	9204      	strlt	r2, [sp, #16]
 800bb18:	7823      	ldrb	r3, [r4, #0]
 800bb1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb1c:	d10a      	bne.n	800bb34 <_svfiprintf_r+0x130>
 800bb1e:	7863      	ldrb	r3, [r4, #1]
 800bb20:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb22:	d132      	bne.n	800bb8a <_svfiprintf_r+0x186>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	1d1a      	adds	r2, r3, #4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	9203      	str	r2, [sp, #12]
 800bb2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb30:	3402      	adds	r4, #2
 800bb32:	9305      	str	r3, [sp, #20]
 800bb34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bbf8 <_svfiprintf_r+0x1f4>
 800bb38:	7821      	ldrb	r1, [r4, #0]
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	f7f4 fbd7 	bl	80002f0 <memchr>
 800bb42:	b138      	cbz	r0, 800bb54 <_svfiprintf_r+0x150>
 800bb44:	9b04      	ldr	r3, [sp, #16]
 800bb46:	eba0 000a 	sub.w	r0, r0, sl
 800bb4a:	2240      	movs	r2, #64	@ 0x40
 800bb4c:	4082      	lsls	r2, r0
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	3401      	adds	r4, #1
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb58:	4824      	ldr	r0, [pc, #144]	@ (800bbec <_svfiprintf_r+0x1e8>)
 800bb5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb5e:	2206      	movs	r2, #6
 800bb60:	f7f4 fbc6 	bl	80002f0 <memchr>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d036      	beq.n	800bbd6 <_svfiprintf_r+0x1d2>
 800bb68:	4b21      	ldr	r3, [pc, #132]	@ (800bbf0 <_svfiprintf_r+0x1ec>)
 800bb6a:	bb1b      	cbnz	r3, 800bbb4 <_svfiprintf_r+0x1b0>
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	3307      	adds	r3, #7
 800bb70:	f023 0307 	bic.w	r3, r3, #7
 800bb74:	3308      	adds	r3, #8
 800bb76:	9303      	str	r3, [sp, #12]
 800bb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb7a:	4433      	add	r3, r6
 800bb7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb7e:	e76a      	b.n	800ba56 <_svfiprintf_r+0x52>
 800bb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb84:	460c      	mov	r4, r1
 800bb86:	2001      	movs	r0, #1
 800bb88:	e7a8      	b.n	800badc <_svfiprintf_r+0xd8>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	3401      	adds	r4, #1
 800bb8e:	9305      	str	r3, [sp, #20]
 800bb90:	4619      	mov	r1, r3
 800bb92:	f04f 0c0a 	mov.w	ip, #10
 800bb96:	4620      	mov	r0, r4
 800bb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb9c:	3a30      	subs	r2, #48	@ 0x30
 800bb9e:	2a09      	cmp	r2, #9
 800bba0:	d903      	bls.n	800bbaa <_svfiprintf_r+0x1a6>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0c6      	beq.n	800bb34 <_svfiprintf_r+0x130>
 800bba6:	9105      	str	r1, [sp, #20]
 800bba8:	e7c4      	b.n	800bb34 <_svfiprintf_r+0x130>
 800bbaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbae:	4604      	mov	r4, r0
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e7f0      	b.n	800bb96 <_svfiprintf_r+0x192>
 800bbb4:	ab03      	add	r3, sp, #12
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	462a      	mov	r2, r5
 800bbba:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <_svfiprintf_r+0x1f0>)
 800bbbc:	a904      	add	r1, sp, #16
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	f3af 8000 	nop.w
 800bbc4:	1c42      	adds	r2, r0, #1
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	d1d6      	bne.n	800bb78 <_svfiprintf_r+0x174>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	065b      	lsls	r3, r3, #25
 800bbce:	f53f af2d 	bmi.w	800ba2c <_svfiprintf_r+0x28>
 800bbd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbd4:	e72c      	b.n	800ba30 <_svfiprintf_r+0x2c>
 800bbd6:	ab03      	add	r3, sp, #12
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <_svfiprintf_r+0x1f0>)
 800bbde:	a904      	add	r1, sp, #16
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f000 f879 	bl	800bcd8 <_printf_i>
 800bbe6:	e7ed      	b.n	800bbc4 <_svfiprintf_r+0x1c0>
 800bbe8:	0800c194 	.word	0x0800c194
 800bbec:	0800c19e 	.word	0x0800c19e
 800bbf0:	00000000 	.word	0x00000000
 800bbf4:	0800b94d 	.word	0x0800b94d
 800bbf8:	0800c19a 	.word	0x0800c19a

0800bbfc <_printf_common>:
 800bbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc00:	4616      	mov	r6, r2
 800bc02:	4698      	mov	r8, r3
 800bc04:	688a      	ldr	r2, [r1, #8]
 800bc06:	690b      	ldr	r3, [r1, #16]
 800bc08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	bfb8      	it	lt
 800bc10:	4613      	movlt	r3, r2
 800bc12:	6033      	str	r3, [r6, #0]
 800bc14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc18:	4607      	mov	r7, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	b10a      	cbz	r2, 800bc22 <_printf_common+0x26>
 800bc1e:	3301      	adds	r3, #1
 800bc20:	6033      	str	r3, [r6, #0]
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	0699      	lsls	r1, r3, #26
 800bc26:	bf42      	ittt	mi
 800bc28:	6833      	ldrmi	r3, [r6, #0]
 800bc2a:	3302      	addmi	r3, #2
 800bc2c:	6033      	strmi	r3, [r6, #0]
 800bc2e:	6825      	ldr	r5, [r4, #0]
 800bc30:	f015 0506 	ands.w	r5, r5, #6
 800bc34:	d106      	bne.n	800bc44 <_printf_common+0x48>
 800bc36:	f104 0a19 	add.w	sl, r4, #25
 800bc3a:	68e3      	ldr	r3, [r4, #12]
 800bc3c:	6832      	ldr	r2, [r6, #0]
 800bc3e:	1a9b      	subs	r3, r3, r2
 800bc40:	42ab      	cmp	r3, r5
 800bc42:	dc26      	bgt.n	800bc92 <_printf_common+0x96>
 800bc44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc48:	6822      	ldr	r2, [r4, #0]
 800bc4a:	3b00      	subs	r3, #0
 800bc4c:	bf18      	it	ne
 800bc4e:	2301      	movne	r3, #1
 800bc50:	0692      	lsls	r2, r2, #26
 800bc52:	d42b      	bmi.n	800bcac <_printf_common+0xb0>
 800bc54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc58:	4641      	mov	r1, r8
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	47c8      	blx	r9
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d01e      	beq.n	800bca0 <_printf_common+0xa4>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	6922      	ldr	r2, [r4, #16]
 800bc66:	f003 0306 	and.w	r3, r3, #6
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	bf02      	ittt	eq
 800bc6e:	68e5      	ldreq	r5, [r4, #12]
 800bc70:	6833      	ldreq	r3, [r6, #0]
 800bc72:	1aed      	subeq	r5, r5, r3
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	bf0c      	ite	eq
 800bc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc7c:	2500      	movne	r5, #0
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	bfc4      	itt	gt
 800bc82:	1a9b      	subgt	r3, r3, r2
 800bc84:	18ed      	addgt	r5, r5, r3
 800bc86:	2600      	movs	r6, #0
 800bc88:	341a      	adds	r4, #26
 800bc8a:	42b5      	cmp	r5, r6
 800bc8c:	d11a      	bne.n	800bcc4 <_printf_common+0xc8>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e008      	b.n	800bca4 <_printf_common+0xa8>
 800bc92:	2301      	movs	r3, #1
 800bc94:	4652      	mov	r2, sl
 800bc96:	4641      	mov	r1, r8
 800bc98:	4638      	mov	r0, r7
 800bc9a:	47c8      	blx	r9
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	d103      	bne.n	800bca8 <_printf_common+0xac>
 800bca0:	f04f 30ff 	mov.w	r0, #4294967295
 800bca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca8:	3501      	adds	r5, #1
 800bcaa:	e7c6      	b.n	800bc3a <_printf_common+0x3e>
 800bcac:	18e1      	adds	r1, r4, r3
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	2030      	movs	r0, #48	@ 0x30
 800bcb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bcb6:	4422      	add	r2, r4
 800bcb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bcbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bcc0:	3302      	adds	r3, #2
 800bcc2:	e7c7      	b.n	800bc54 <_printf_common+0x58>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	4641      	mov	r1, r8
 800bcca:	4638      	mov	r0, r7
 800bccc:	47c8      	blx	r9
 800bcce:	3001      	adds	r0, #1
 800bcd0:	d0e6      	beq.n	800bca0 <_printf_common+0xa4>
 800bcd2:	3601      	adds	r6, #1
 800bcd4:	e7d9      	b.n	800bc8a <_printf_common+0x8e>
	...

0800bcd8 <_printf_i>:
 800bcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	7e0f      	ldrb	r7, [r1, #24]
 800bcde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bce0:	2f78      	cmp	r7, #120	@ 0x78
 800bce2:	4691      	mov	r9, r2
 800bce4:	4680      	mov	r8, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	469a      	mov	sl, r3
 800bcea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bcee:	d807      	bhi.n	800bd00 <_printf_i+0x28>
 800bcf0:	2f62      	cmp	r7, #98	@ 0x62
 800bcf2:	d80a      	bhi.n	800bd0a <_printf_i+0x32>
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	f000 80d2 	beq.w	800be9e <_printf_i+0x1c6>
 800bcfa:	2f58      	cmp	r7, #88	@ 0x58
 800bcfc:	f000 80b9 	beq.w	800be72 <_printf_i+0x19a>
 800bd00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd08:	e03a      	b.n	800bd80 <_printf_i+0xa8>
 800bd0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd0e:	2b15      	cmp	r3, #21
 800bd10:	d8f6      	bhi.n	800bd00 <_printf_i+0x28>
 800bd12:	a101      	add	r1, pc, #4	@ (adr r1, 800bd18 <_printf_i+0x40>)
 800bd14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd18:	0800bd71 	.word	0x0800bd71
 800bd1c:	0800bd85 	.word	0x0800bd85
 800bd20:	0800bd01 	.word	0x0800bd01
 800bd24:	0800bd01 	.word	0x0800bd01
 800bd28:	0800bd01 	.word	0x0800bd01
 800bd2c:	0800bd01 	.word	0x0800bd01
 800bd30:	0800bd85 	.word	0x0800bd85
 800bd34:	0800bd01 	.word	0x0800bd01
 800bd38:	0800bd01 	.word	0x0800bd01
 800bd3c:	0800bd01 	.word	0x0800bd01
 800bd40:	0800bd01 	.word	0x0800bd01
 800bd44:	0800be85 	.word	0x0800be85
 800bd48:	0800bdaf 	.word	0x0800bdaf
 800bd4c:	0800be3f 	.word	0x0800be3f
 800bd50:	0800bd01 	.word	0x0800bd01
 800bd54:	0800bd01 	.word	0x0800bd01
 800bd58:	0800bea7 	.word	0x0800bea7
 800bd5c:	0800bd01 	.word	0x0800bd01
 800bd60:	0800bdaf 	.word	0x0800bdaf
 800bd64:	0800bd01 	.word	0x0800bd01
 800bd68:	0800bd01 	.word	0x0800bd01
 800bd6c:	0800be47 	.word	0x0800be47
 800bd70:	6833      	ldr	r3, [r6, #0]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	6032      	str	r2, [r6, #0]
 800bd78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd80:	2301      	movs	r3, #1
 800bd82:	e09d      	b.n	800bec0 <_printf_i+0x1e8>
 800bd84:	6833      	ldr	r3, [r6, #0]
 800bd86:	6820      	ldr	r0, [r4, #0]
 800bd88:	1d19      	adds	r1, r3, #4
 800bd8a:	6031      	str	r1, [r6, #0]
 800bd8c:	0606      	lsls	r6, r0, #24
 800bd8e:	d501      	bpl.n	800bd94 <_printf_i+0xbc>
 800bd90:	681d      	ldr	r5, [r3, #0]
 800bd92:	e003      	b.n	800bd9c <_printf_i+0xc4>
 800bd94:	0645      	lsls	r5, r0, #25
 800bd96:	d5fb      	bpl.n	800bd90 <_printf_i+0xb8>
 800bd98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bd9c:	2d00      	cmp	r5, #0
 800bd9e:	da03      	bge.n	800bda8 <_printf_i+0xd0>
 800bda0:	232d      	movs	r3, #45	@ 0x2d
 800bda2:	426d      	negs	r5, r5
 800bda4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bda8:	4859      	ldr	r0, [pc, #356]	@ (800bf10 <_printf_i+0x238>)
 800bdaa:	230a      	movs	r3, #10
 800bdac:	e011      	b.n	800bdd2 <_printf_i+0xfa>
 800bdae:	6821      	ldr	r1, [r4, #0]
 800bdb0:	6833      	ldr	r3, [r6, #0]
 800bdb2:	0608      	lsls	r0, r1, #24
 800bdb4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bdb8:	d402      	bmi.n	800bdc0 <_printf_i+0xe8>
 800bdba:	0649      	lsls	r1, r1, #25
 800bdbc:	bf48      	it	mi
 800bdbe:	b2ad      	uxthmi	r5, r5
 800bdc0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bdc2:	4853      	ldr	r0, [pc, #332]	@ (800bf10 <_printf_i+0x238>)
 800bdc4:	6033      	str	r3, [r6, #0]
 800bdc6:	bf14      	ite	ne
 800bdc8:	230a      	movne	r3, #10
 800bdca:	2308      	moveq	r3, #8
 800bdcc:	2100      	movs	r1, #0
 800bdce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bdd2:	6866      	ldr	r6, [r4, #4]
 800bdd4:	60a6      	str	r6, [r4, #8]
 800bdd6:	2e00      	cmp	r6, #0
 800bdd8:	bfa2      	ittt	ge
 800bdda:	6821      	ldrge	r1, [r4, #0]
 800bddc:	f021 0104 	bicge.w	r1, r1, #4
 800bde0:	6021      	strge	r1, [r4, #0]
 800bde2:	b90d      	cbnz	r5, 800bde8 <_printf_i+0x110>
 800bde4:	2e00      	cmp	r6, #0
 800bde6:	d04b      	beq.n	800be80 <_printf_i+0x1a8>
 800bde8:	4616      	mov	r6, r2
 800bdea:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdee:	fb03 5711 	mls	r7, r3, r1, r5
 800bdf2:	5dc7      	ldrb	r7, [r0, r7]
 800bdf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdf8:	462f      	mov	r7, r5
 800bdfa:	42bb      	cmp	r3, r7
 800bdfc:	460d      	mov	r5, r1
 800bdfe:	d9f4      	bls.n	800bdea <_printf_i+0x112>
 800be00:	2b08      	cmp	r3, #8
 800be02:	d10b      	bne.n	800be1c <_printf_i+0x144>
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	07df      	lsls	r7, r3, #31
 800be08:	d508      	bpl.n	800be1c <_printf_i+0x144>
 800be0a:	6923      	ldr	r3, [r4, #16]
 800be0c:	6861      	ldr	r1, [r4, #4]
 800be0e:	4299      	cmp	r1, r3
 800be10:	bfde      	ittt	le
 800be12:	2330      	movle	r3, #48	@ 0x30
 800be14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be1c:	1b92      	subs	r2, r2, r6
 800be1e:	6122      	str	r2, [r4, #16]
 800be20:	f8cd a000 	str.w	sl, [sp]
 800be24:	464b      	mov	r3, r9
 800be26:	aa03      	add	r2, sp, #12
 800be28:	4621      	mov	r1, r4
 800be2a:	4640      	mov	r0, r8
 800be2c:	f7ff fee6 	bl	800bbfc <_printf_common>
 800be30:	3001      	adds	r0, #1
 800be32:	d14a      	bne.n	800beca <_printf_i+0x1f2>
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	b004      	add	sp, #16
 800be3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	f043 0320 	orr.w	r3, r3, #32
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	4833      	ldr	r0, [pc, #204]	@ (800bf14 <_printf_i+0x23c>)
 800be48:	2778      	movs	r7, #120	@ 0x78
 800be4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	6831      	ldr	r1, [r6, #0]
 800be52:	061f      	lsls	r7, r3, #24
 800be54:	f851 5b04 	ldr.w	r5, [r1], #4
 800be58:	d402      	bmi.n	800be60 <_printf_i+0x188>
 800be5a:	065f      	lsls	r7, r3, #25
 800be5c:	bf48      	it	mi
 800be5e:	b2ad      	uxthmi	r5, r5
 800be60:	6031      	str	r1, [r6, #0]
 800be62:	07d9      	lsls	r1, r3, #31
 800be64:	bf44      	itt	mi
 800be66:	f043 0320 	orrmi.w	r3, r3, #32
 800be6a:	6023      	strmi	r3, [r4, #0]
 800be6c:	b11d      	cbz	r5, 800be76 <_printf_i+0x19e>
 800be6e:	2310      	movs	r3, #16
 800be70:	e7ac      	b.n	800bdcc <_printf_i+0xf4>
 800be72:	4827      	ldr	r0, [pc, #156]	@ (800bf10 <_printf_i+0x238>)
 800be74:	e7e9      	b.n	800be4a <_printf_i+0x172>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	f023 0320 	bic.w	r3, r3, #32
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	e7f6      	b.n	800be6e <_printf_i+0x196>
 800be80:	4616      	mov	r6, r2
 800be82:	e7bd      	b.n	800be00 <_printf_i+0x128>
 800be84:	6833      	ldr	r3, [r6, #0]
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	6961      	ldr	r1, [r4, #20]
 800be8a:	1d18      	adds	r0, r3, #4
 800be8c:	6030      	str	r0, [r6, #0]
 800be8e:	062e      	lsls	r6, r5, #24
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	d501      	bpl.n	800be98 <_printf_i+0x1c0>
 800be94:	6019      	str	r1, [r3, #0]
 800be96:	e002      	b.n	800be9e <_printf_i+0x1c6>
 800be98:	0668      	lsls	r0, r5, #25
 800be9a:	d5fb      	bpl.n	800be94 <_printf_i+0x1bc>
 800be9c:	8019      	strh	r1, [r3, #0]
 800be9e:	2300      	movs	r3, #0
 800bea0:	6123      	str	r3, [r4, #16]
 800bea2:	4616      	mov	r6, r2
 800bea4:	e7bc      	b.n	800be20 <_printf_i+0x148>
 800bea6:	6833      	ldr	r3, [r6, #0]
 800bea8:	1d1a      	adds	r2, r3, #4
 800beaa:	6032      	str	r2, [r6, #0]
 800beac:	681e      	ldr	r6, [r3, #0]
 800beae:	6862      	ldr	r2, [r4, #4]
 800beb0:	2100      	movs	r1, #0
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7f4 fa1c 	bl	80002f0 <memchr>
 800beb8:	b108      	cbz	r0, 800bebe <_printf_i+0x1e6>
 800beba:	1b80      	subs	r0, r0, r6
 800bebc:	6060      	str	r0, [r4, #4]
 800bebe:	6863      	ldr	r3, [r4, #4]
 800bec0:	6123      	str	r3, [r4, #16]
 800bec2:	2300      	movs	r3, #0
 800bec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bec8:	e7aa      	b.n	800be20 <_printf_i+0x148>
 800beca:	6923      	ldr	r3, [r4, #16]
 800becc:	4632      	mov	r2, r6
 800bece:	4649      	mov	r1, r9
 800bed0:	4640      	mov	r0, r8
 800bed2:	47d0      	blx	sl
 800bed4:	3001      	adds	r0, #1
 800bed6:	d0ad      	beq.n	800be34 <_printf_i+0x15c>
 800bed8:	6823      	ldr	r3, [r4, #0]
 800beda:	079b      	lsls	r3, r3, #30
 800bedc:	d413      	bmi.n	800bf06 <_printf_i+0x22e>
 800bede:	68e0      	ldr	r0, [r4, #12]
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	4298      	cmp	r0, r3
 800bee4:	bfb8      	it	lt
 800bee6:	4618      	movlt	r0, r3
 800bee8:	e7a6      	b.n	800be38 <_printf_i+0x160>
 800beea:	2301      	movs	r3, #1
 800beec:	4632      	mov	r2, r6
 800beee:	4649      	mov	r1, r9
 800bef0:	4640      	mov	r0, r8
 800bef2:	47d0      	blx	sl
 800bef4:	3001      	adds	r0, #1
 800bef6:	d09d      	beq.n	800be34 <_printf_i+0x15c>
 800bef8:	3501      	adds	r5, #1
 800befa:	68e3      	ldr	r3, [r4, #12]
 800befc:	9903      	ldr	r1, [sp, #12]
 800befe:	1a5b      	subs	r3, r3, r1
 800bf00:	42ab      	cmp	r3, r5
 800bf02:	dcf2      	bgt.n	800beea <_printf_i+0x212>
 800bf04:	e7eb      	b.n	800bede <_printf_i+0x206>
 800bf06:	2500      	movs	r5, #0
 800bf08:	f104 0619 	add.w	r6, r4, #25
 800bf0c:	e7f5      	b.n	800befa <_printf_i+0x222>
 800bf0e:	bf00      	nop
 800bf10:	0800c1a5 	.word	0x0800c1a5
 800bf14:	0800c1b6 	.word	0x0800c1b6

0800bf18 <memmove>:
 800bf18:	4288      	cmp	r0, r1
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	eb01 0402 	add.w	r4, r1, r2
 800bf20:	d902      	bls.n	800bf28 <memmove+0x10>
 800bf22:	4284      	cmp	r4, r0
 800bf24:	4623      	mov	r3, r4
 800bf26:	d807      	bhi.n	800bf38 <memmove+0x20>
 800bf28:	1e43      	subs	r3, r0, #1
 800bf2a:	42a1      	cmp	r1, r4
 800bf2c:	d008      	beq.n	800bf40 <memmove+0x28>
 800bf2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf36:	e7f8      	b.n	800bf2a <memmove+0x12>
 800bf38:	4402      	add	r2, r0
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	428a      	cmp	r2, r1
 800bf3e:	d100      	bne.n	800bf42 <memmove+0x2a>
 800bf40:	bd10      	pop	{r4, pc}
 800bf42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf4a:	e7f7      	b.n	800bf3c <memmove+0x24>

0800bf4c <_sbrk_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d06      	ldr	r5, [pc, #24]	@ (800bf68 <_sbrk_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	f7f5 fdaa 	bl	8001ab0 <_sbrk>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_sbrk_r+0x1a>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_sbrk_r+0x1a>
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	24001c0c 	.word	0x24001c0c

0800bf6c <memcpy>:
 800bf6c:	440a      	add	r2, r1
 800bf6e:	4291      	cmp	r1, r2
 800bf70:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf74:	d100      	bne.n	800bf78 <memcpy+0xc>
 800bf76:	4770      	bx	lr
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf82:	4291      	cmp	r1, r2
 800bf84:	d1f9      	bne.n	800bf7a <memcpy+0xe>
 800bf86:	bd10      	pop	{r4, pc}

0800bf88 <_realloc_r>:
 800bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4615      	mov	r5, r2
 800bf90:	460c      	mov	r4, r1
 800bf92:	b921      	cbnz	r1, 800bf9e <_realloc_r+0x16>
 800bf94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	4611      	mov	r1, r2
 800bf9a:	f7ff bc4b 	b.w	800b834 <_malloc_r>
 800bf9e:	b92a      	cbnz	r2, 800bfac <_realloc_r+0x24>
 800bfa0:	f7ff fbdc 	bl	800b75c <_free_r>
 800bfa4:	2400      	movs	r4, #0
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfac:	f000 f81a 	bl	800bfe4 <_malloc_usable_size_r>
 800bfb0:	4285      	cmp	r5, r0
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	d802      	bhi.n	800bfbc <_realloc_r+0x34>
 800bfb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bfba:	d8f4      	bhi.n	800bfa6 <_realloc_r+0x1e>
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	f7ff fc38 	bl	800b834 <_malloc_r>
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d0ec      	beq.n	800bfa4 <_realloc_r+0x1c>
 800bfca:	42b5      	cmp	r5, r6
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4621      	mov	r1, r4
 800bfd0:	bf28      	it	cs
 800bfd2:	4632      	movcs	r2, r6
 800bfd4:	f7ff ffca 	bl	800bf6c <memcpy>
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4640      	mov	r0, r8
 800bfdc:	f7ff fbbe 	bl	800b75c <_free_r>
 800bfe0:	463c      	mov	r4, r7
 800bfe2:	e7e0      	b.n	800bfa6 <_realloc_r+0x1e>

0800bfe4 <_malloc_usable_size_r>:
 800bfe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe8:	1f18      	subs	r0, r3, #4
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	bfbc      	itt	lt
 800bfee:	580b      	ldrlt	r3, [r1, r0]
 800bff0:	18c0      	addlt	r0, r0, r3
 800bff2:	4770      	bx	lr

0800bff4 <_init>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	bf00      	nop
 800bff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffa:	bc08      	pop	{r3}
 800bffc:	469e      	mov	lr, r3
 800bffe:	4770      	bx	lr

0800c000 <_fini>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	bf00      	nop
 800c004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c006:	bc08      	pop	{r3}
 800c008:	469e      	mov	lr, r3
 800c00a:	4770      	bx	lr
